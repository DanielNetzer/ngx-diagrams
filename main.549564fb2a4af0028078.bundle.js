(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1219:function(module,exports,__webpack_require__){"use strict";__webpack_require__(10),__webpack_require__(75),__webpack_require__(62),__webpack_require__(50),__webpack_require__(64),__webpack_require__(1220),__webpack_require__(1221),__webpack_require__(18),__webpack_require__(63);var _clientApi=__webpack_require__(74),_clientLogger=__webpack_require__(51),_configFilename=__webpack_require__(1222);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1222:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"parameters",(function(){return parameters}));var _storybook_addon_docs_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(639),_storybook_theming__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(17),_documentation_json__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(640);Object(_storybook_addon_docs_angular__WEBPACK_IMPORTED_MODULE_0__.setCompodocJson)(_documentation_json__WEBPACK_IMPORTED_MODULE_2__);var parameters={actions:{argTypesRegex:"^on[A-Z].*"},docs:{theme:_storybook_theming__WEBPACK_IMPORTED_MODULE_1__.themes.dark},options:{storySort:{order:["Getting Started","Node","Link","Port","Label","Actions","Plugins","Examples"]}}}},1224:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(99).configure)([__webpack_require__(1225),__webpack_require__(1229)],module,!1)}).call(this,__webpack_require__(154)(module))},1225:function(module,exports,__webpack_require__){var map={"./changelog.stories.mdx":1333,"./getting-started.stories.mdx":1226};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1225},1226:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(23),__webpack_require__(12),__webpack_require__(18),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(16),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(144),_assets_code_brackets_svg__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(641),_assets_code_brackets_svg__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_assets_code_brackets_svg__WEBPACK_IMPORTED_MODULE_6__),_assets_colors_svg__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(642),_assets_colors_svg__WEBPACK_IMPORTED_MODULE_7___default=__webpack_require__.n(_assets_colors_svg__WEBPACK_IMPORTED_MODULE_7__),_assets_comments_svg__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(643),_assets_comments_svg__WEBPACK_IMPORTED_MODULE_8___default=__webpack_require__.n(_assets_comments_svg__WEBPACK_IMPORTED_MODULE_8__),_assets_flow_svg__WEBPACK_IMPORTED_MODULE_10__=(__webpack_require__(1227),__webpack_require__(644)),_assets_flow_svg__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(_assets_flow_svg__WEBPACK_IMPORTED_MODULE_10__),_assets_plugin_svg__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(645),_assets_plugin_svg__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(_assets_plugin_svg__WEBPACK_IMPORTED_MODULE_11__),_assets_stackalt_svg__WEBPACK_IMPORTED_MODULE_13__=(__webpack_require__(1228),__webpack_require__(646)),_assets_stackalt_svg__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(_assets_stackalt_svg__WEBPACK_IMPORTED_MODULE_13__);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_5__.Meta,{title:"Getting Started",mdxType:"Meta"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("style",null,"\n  .subheading {\n    --mediumdark: '#999999';\n    font-weight: 900;\n    font-size: 13px;\n    color: #999;\n    letter-spacing: 6px;\n    line-height: 24px;\n    text-transform: uppercase;\n    margin-bottom: 12px;\n    margin-top: 40px;\n  }\n\n  .link-list {\n    display: grid;\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n    row-gap: 10px;\n  }\n\n  @media (min-width: 620px) {\n    .link-list {\n      row-gap: 20px;\n      column-gap: 20px;\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n\n  @media all and (-ms-high-contrast:none) {\n  .link-list {\n      display: -ms-grid;\n      -ms-grid-columns: 1fr 1fr;\n      -ms-grid-rows: 1fr 1fr;\n    }\n  }\n\n  .link-item {\n    display: block;\n    padding: 20px 30px 20px 15px;\n    border: 1px solid white;\n    border-radius: 5px;\n    transition: background 150ms ease-out, border 150ms ease-out, transform 150ms ease-out;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .link-item:hover {\n    border-color: #1EA7FD50;\n    transform: translate3d(0, -3px, 0);\n    box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n  }\n\n  .link-item:active {\n    border-color: #1EA7FD;\n    transform: translate3d(0, 0, 0);\n  }\n\n  .link-item strong {\n    font-weight: 700;\n    display: block;\n    margin-bottom: 2px;\n  }\n\n  .link-item img {\n    height: 40px;\n    width: 40px;\n    margin-right: 15px;\n    flex: none;\n  }\n\n  .link-item span {\n    font-size: 14px;\n    line-height: 20px;\n  }\n\n  .tip {\n    display: inline-block;\n    border-radius: 1em;\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 700;\n    background: #E7FDD8;\n    color: #66BF3C;\n    padding: 4px 12px;\n    margin-right: 10px;\n    vertical-align: top;\n  }\n\n  .tip-wrapper {\n    font-size: 13px;\n    line-height: 20px;\n    margin-top: 40px;\n    margin-bottom: 40px;\n  }\n\n  .tip-wrapper code {\n    font-size: 12px;\n    display: inline-block;\n  }\n\n\n"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("h1",{id:"welcome-to-ngx-diagrams"},"Welcome to NGX-Diagrams"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,"NGX-Diagrams is a diagrams engine system, built on top of Angular and RxJS, which takes the idea of graphic visualization to the next level in terms of performance, rendering optimization, and customizability."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,"NGX-Digrams encourages creativity. It allows you to create any node, link, label, or even a custom entity and provide powerful tools with a moderate learning curve, suitable for both experienced and inexperienced developers alike."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,"Browse example stories now by navigating to them in the sidebar.\nView their code in the ",Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("inlineCode",{parentName:"p"},"./stories")," directory to learn how they work."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("div",{class:"subheading"},"Installation"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,"Install from the NPM repository using yarn or npm:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),"yarn add ngx-diagrams\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("code",_extends({parentName:"pre"},{className:"language-shell"}),"npm install ngx-diagrams\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,"On production environemnt add the following:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("inlineCode",{parentName:"p"},"main.ts")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("code",_extends({parentName:"pre"},{className:"language-typescript"}),"import { enableProdMode } from '@angular/core';\nimport { enableDiagramProdMode } from 'ngx-diagrams';\n\n...\nif(environemnt.production) {\n    enableDiagramProdMode();\n    enableProdMode();\n}\n...\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("div",{class:"subheading"},"Configure"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("div",{class:"link-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://storybook.js.org/docs/react/api/presets",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_plugin_svg__WEBPACK_IMPORTED_MODULE_11___default.a,alt:"plugin"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"Presets for popular entities"),"Easy setup for default entities")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://storybook.js.org/docs/react/configure/webpack",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_stackalt_svg__WEBPACK_IMPORTED_MODULE_13___default.a,alt:"Build"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"Build customized entities"),"How to customize and create your own entities")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://storybook.js.org/docs/react/configure/styling-and-css",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_colors_svg__WEBPACK_IMPORTED_MODULE_7___default.a,alt:"colors"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"Styling"),"How to configure CSS for the diagram")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://storybook.js.org/docs/react/get-started/setup#configure-storybook-for-your-stack",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_flow_svg__WEBPACK_IMPORTED_MODULE_10___default.a,alt:"flow"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"Plugins"),"Plugins and libraries for additional functionality"))),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("div",{class:"subheading"},"Learn"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("div",{class:"link-list"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://github.com/DanielNetzer/ngx-diagrams",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_code_brackets_svg__WEBPACK_IMPORTED_MODULE_6___default.a,alt:"code"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"GitHub project"),"View the source and add issues")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("a",{class:"link-item",href:"https://gitter.im/ngx-diagrams/community",target:"_blank"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("img",{src:_assets_comments_svg__WEBPACK_IMPORTED_MODULE_8___default.a,alt:"comments"}),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("span",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)("strong",null,"Gitter chat"),"Chat with maintainers and the community"))))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Getting Started",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_5__.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_4__.mdx)(MDXContent,null))}}),__webpack_exports__.default=componentMeta},1227:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/direction.b770f9af.svg"},1228:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/repo.6d496322.svg"},1229:function(module,exports,__webpack_require__){var map={"./examples/examples.stories.ts":1327,"./label/label.stories.ts":1328,"./link/link.stories.ts":1329,"./node/node.stories.ts":1330,"./port/port.stories.ts":1331};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1229},1327:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Basic",(function(){return Basic})),__webpack_require__.d(__webpack_exports__,"Serialization",(function(){return Serialization})),__webpack_require__.d(__webpack_exports__,"AutoArrange",(function(){return AutoArrange})),__webpack_require__.d(__webpack_exports__,"SmartRouting",(function(){return SmartRouting})),__webpack_require__.d(__webpack_exports__,"Performance",(function(){return Performance}));var _a,_b,client=__webpack_require__(99),common=__webpack_require__(14),src=__webpack_require__(4),dist=__webpack_require__(326),tslib_es6=__webpack_require__(3),core=__webpack_require__(0);let auto_arrange_component_AutoArrangeExampleStoryComponent=class AutoArrangeExampleStoryComponent{constructor(diagramEngine,dagreEngine){this.diagramEngine=diagramEngine,this.dagreEngine=dagreEngine}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1e3,y:0}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"});for(let index=0;index<2;index++){const nodeLoop=new src.k;nodeLoop.setCoords({x:10*Math.random()*1e3,y:300+index*(10*Math.random())*300}),nodeLoop.setDimensions(nodesDefaultDimensions);const inportLoop=nodeLoop.addInPort({name:"inport"+(index+3)});this.diagramModel.addNode(nodeLoop);const linkLoop=outport1.link(inportLoop);this.diagramModel.addLink(linkLoop)}const link=outport1.link(inport);this.diagramModel.addAll(node1,node2,link),this.diagramEngine.zoomToFit()}autoArrange(){this.dagreEngine.redistribute(this.diagramModel,{graph:{align:"DL",rankdir:"LR",ranksep:150}}),this.diagramEngine.zoomToFit()}};var basic_component_a;auto_arrange_component_AutoArrangeExampleStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'\n    <div class="action-bar">\n      <button (click)="autoArrange()">Auto Arrange</button>\n    </div>\n    <ngdx-diagram class="demo-diagram" [model]="diagramModel"></ngdx-diagram>\n  ',styles:[(__webpack_require__(60).default||__webpack_require__(60)).length?__webpack_require__(60).default||__webpack_require__(60):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_a=void 0!==src.n&&src.n)?_a:Object,"function"==typeof(_b=void 0!==src.e&&src.e)?_b:Object])],auto_arrange_component_AutoArrangeExampleStoryComponent);let basic_component_BasicExampleStoryComponent=class BasicExampleStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1e3,y:0}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"});for(let index=0;index<2;index++){const nodeLoop=new src.k;nodeLoop.setCoords({x:1e3,y:300+300*index}),nodeLoop.setDimensions(nodesDefaultDimensions),nodeLoop.addInPort({name:"inport"+(index+3)}),this.diagramModel.addNode(nodeLoop)}const link=outport1.link(inport);link.setLocked(),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}};var performance_component_a,performance_component_b;basic_component_BasicExampleStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(60).default||__webpack_require__(60)).length?__webpack_require__(60).default||__webpack_require__(60):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(basic_component_a=void 0!==src.n&&src.n)?basic_component_a:Object])],basic_component_BasicExampleStoryComponent);let performance_component_PerformanceExampleStoryComponent=class PerformanceExampleStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine,this.isResseted=!1,this.isCreated=!0,this.numberOfNodes=200,this.serialized=new core.EventEmitter}ngOnInit(){this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram(),this.createNodes(),this.diagramEngine.zoomToFit()}createDiagram(){this.createNodes()}resetDiagram(){this.diagramModel.reset(),this.isResseted=!0}recreateDiagram(){this.createNodes()}createNodes(){this.isResseted=!1;const startTime=performance.now(),nodesDefaultDimensions={height:200,width:200};for(let index=0;index<this.numberOfNodes;index++){const nodeLoop=new src.k({id:index.toString()}),row=index%10,col=Math.floor(index/10);nodeLoop.setCoords({x:1e3*row,y:300*col}),nodeLoop.setDimensions(nodesDefaultDimensions),nodeLoop.addInPort({name:"inport"+index,id:"inport"+index});const outport=nodeLoop.addOutPort({name:"outport"+index,id:"outport"+index});if(index>0){const link=outport.link(this.diagramModel.getNode(""+(index-1)).getPort("inport"+(index-1)));this.diagramModel.addLink(link)}this.diagramModel.addNode(nodeLoop)}const endTime=performance.now();this.initialRenderTimer=endTime-startTime}clearGraph(){this.diagramModel.reset()}};var serialization_component_a,serialization_component_b;Object(tslib_es6.a)([Object(core.Output)(),Object(tslib_es6.b)("design:type","function"==typeof(performance_component_a=void 0!==core.EventEmitter&&core.EventEmitter)?performance_component_a:Object)],performance_component_PerformanceExampleStoryComponent.prototype,"serialized",void 0),performance_component_PerformanceExampleStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'\n\t\t<div class="action-bar">\n\t\t\t<button (click)="resetDiagram()" *ngIf="isResseted === false">Reset</button\n\t\t\t><button (click)="createDiagram()" *ngIf="isResseted">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\n\t\t\t{{ initialRenderTimer }} ms\n\t\t</div>\n\t\t<ngdx-diagram class="demo-diagram" [model]="diagramModel"></ngdx-diagram>\n\t',styles:[(__webpack_require__(60).default||__webpack_require__(60)).length?__webpack_require__(60).default||__webpack_require__(60):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(performance_component_b=void 0!==src.n&&src.n)?performance_component_b:Object])],performance_component_PerformanceExampleStoryComponent);let serialization_component_SerializationExampleStoryComponent=class SerializationExampleStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine,this.serialized=new core.EventEmitter}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1e3,y:0}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"});for(let index=0;index<2;index++){const nodeLoop=new src.k;nodeLoop.setCoords({x:1e3,y:300+300*index}),nodeLoop.setDimensions(nodesDefaultDimensions),nodeLoop.addInPort({name:"inport"+(index+3)}),this.diagramModel.addNode(nodeLoop)}const link=outport1.link(inport);link.setLocked(),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}serialize(){const serializedModel=this.diagramModel.serialize();this.serialized.emit(serializedModel)}clearGraph(){this.diagramModel.reset()}};var smart_routing_component_a;Object(tslib_es6.a)([Object(core.Output)(),Object(tslib_es6.b)("design:type","function"==typeof(serialization_component_a=void 0!==core.EventEmitter&&core.EventEmitter)?serialization_component_a:Object)],serialization_component_SerializationExampleStoryComponent.prototype,"serialized",void 0),serialization_component_SerializationExampleStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'\n    <div class="action-bar">\n      <button (click)="serialize()">Serialize Diagram Model</button>\n      <button (click)="clearGraph()">Clear Graph</button>\n    </div>\n    <ngdx-diagram class="demo-diagram" [model]="diagramModel"></ngdx-diagram>\n  ',styles:[(__webpack_require__(60).default||__webpack_require__(60)).length?__webpack_require__(60).default||__webpack_require__(60):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(serialization_component_b=void 0!==src.n&&src.n)?serialization_component_b:Object])],serialization_component_SerializationExampleStoryComponent);let smart_routing_component_SmartRoutingExampleStoryComponent=class SmartRoutingExampleStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"});for(let index=0;index<5;index++){const nodeLoop=new src.k;nodeLoop.setCoords({x:1500,y:300*index}),nodeLoop.setDimensions(nodesDefaultDimensions);const inportLoop=nodeLoop.addInPort({name:"inport"+(index+3)});this.diagramModel.addNode(nodeLoop);const linkLoop=outport1.link(inportLoop);this.diagramModel.addLink(linkLoop)}const blockingNode=new src.k;blockingNode.setCoords({x:1e3,y:300}),blockingNode.setDimensions(nodesDefaultDimensions),this.diagramModel.addAll(node1,blockingNode),this.diagramEngine.zoomToFit()}};smart_routing_component_SmartRoutingExampleStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'\n    <ngdx-diagram\n      class="demo-diagram"\n      [model]="diagramModel"\n      [smartRouting]="true"\n    ></ngdx-diagram>\n  ',styles:[(__webpack_require__(60).default||__webpack_require__(60)).length?__webpack_require__(60).default||__webpack_require__(60):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(smart_routing_component_a=void 0!==src.n&&src.n)?smart_routing_component_a:Object])],smart_routing_component_SmartRoutingExampleStoryComponent);__webpack_exports__.default={title:"Examples",component:src.h,parameters:{docs:{iframeHeight:"400px"}},decorators:[Object(client.moduleMetadata)({declarations:[src.j,basic_component_BasicExampleStoryComponent,serialization_component_SerializationExampleStoryComponent,auto_arrange_component_AutoArrangeExampleStoryComponent,smart_routing_component_SmartRoutingExampleStoryComponent,performance_component_PerformanceExampleStoryComponent,src.h,src.f,src.l],providers:[src.e],imports:[common.a,src.o],entryComponents:[src.j,src.h,src.f,src.l]})]};const Basic=(args=>({component:basic_component_BasicExampleStoryComponent,props:args})).bind({}),Serialization=(args=>({component:serialization_component_SerializationExampleStoryComponent,props:Object.assign(Object.assign({},args),{serialized:Object(dist.action)("serialized")})})).bind({}),AutoArrange=(args=>({component:auto_arrange_component_AutoArrangeExampleStoryComponent,props:args})).bind({}),SmartRouting=(args=>({component:smart_routing_component_SmartRoutingExampleStoryComponent,props:args})).bind({}),Performance=(args=>({component:performance_component_PerformanceExampleStoryComponent,props:args})).bind({});Basic.parameters=Object.assign({storySource:{source:"BasicDiagramTemplate.bind({})"}},Basic.parameters),Serialization.parameters=Object.assign({storySource:{source:"SerializationDiagramTemplate.bind({})"}},Serialization.parameters),AutoArrange.parameters=Object.assign({storySource:{source:"AutoArrangeDiagramTemplate.bind({})"}},AutoArrange.parameters),SmartRouting.parameters=Object.assign({storySource:{source:"SmartRoutingDiagramTemplate.bind({})"}},SmartRouting.parameters),Performance.parameters=Object.assign({storySource:{source:"PerformanceDiagramTemplate.bind({})"}},Performance.parameters)},1328:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Custom",(function(){return Custom}));var client=__webpack_require__(99),common=__webpack_require__(14),src=__webpack_require__(4),tslib_es6=__webpack_require__(3),core=__webpack_require__(0);let custom_label_component_CustomLabelComponent=class CustomLabelComponent extends src.g{constructor(){super("custom")}};custom_label_component_CustomLabelComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"custom-label",template:(__webpack_require__(310).default||__webpack_require__(310)).length?__webpack_require__(310).default||__webpack_require__(310):"",styles:[(__webpack_require__(311).default||__webpack_require__(311)).length?__webpack_require__(311).default||__webpack_require__(311):""]}),Object(tslib_es6.b)("design:paramtypes",[])],custom_label_component_CustomLabelComponent);class custom_factory_CustomLabelFactory extends src.a{constructor(resolver,renderer){super("custom-label"),this.resolver=resolver,this.renderer=renderer}generateWidget(label,labelHost){const componentRef=labelHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.setAttribute(rootNode,"data-labelid",label.id),label.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),Object.entries(label).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(custom_label_component_CustomLabelComponent)}getNewInstance(){return new src.g}}var _a,_b,_c;let diagram_component_CustomLabelDiagramComponent=class CustomLabelDiagramComponent{constructor(diagramEngine,resolver,renderer){this.diagramEngine=diagramEngine,this.resolver=resolver,this.renderer=renderer}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramEngine.registerLabelFactory(new custom_factory_CustomLabelFactory(this.resolver,this.renderer)),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1500,y:300}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"}),link=outport1.link(inport),label=new src.g("I'm a custom label","custom-label");link.setLabel(label),link.setLocked(),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}};var default_component_a;diagram_component_CustomLabelDiagramComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(160).default||__webpack_require__(160)).length?__webpack_require__(160).default||__webpack_require__(160):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_a=void 0!==src.n&&src.n)?_a:Object,"function"==typeof(_b=void 0!==core.ComponentFactoryResolver&&core.ComponentFactoryResolver)?_b:Object,"function"==typeof(_c=void 0!==core.Renderer2&&core.Renderer2)?_c:Object])],diagram_component_CustomLabelDiagramComponent);let default_component_DefaultLabelStoryComponent=class DefaultLabelStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1e3,y:300}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"}),link=outport1.link(inport),label=new src.g("I'm a label");link.setLabel(label),link.setLocked(),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}};default_component_DefaultLabelStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(160).default||__webpack_require__(160)).length?__webpack_require__(160).default||__webpack_require__(160):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(default_component_a=void 0!==src.n&&src.n)?default_component_a:Object])],default_component_DefaultLabelStoryComponent);__webpack_exports__.default={title:"Label",component:src.h,parameters:{docs:{iframeHeight:"400px"}},decorators:[Object(client.moduleMetadata)({declarations:[src.j,custom_label_component_CustomLabelComponent,default_component_DefaultLabelStoryComponent,src.h,src.f,src.l],imports:[common.a,src.o],entryComponents:[src.j,src.h,custom_label_component_CustomLabelComponent,src.f,src.l]})]};const Default=(args=>({component:default_component_DefaultLabelStoryComponent,props:args})).bind({}),Custom=(args=>({component:diagram_component_CustomLabelDiagramComponent,props:args})).bind({});Default.parameters=Object.assign({storySource:{source:"DefaultLinkTemplate.bind({})"}},Default.parameters),Custom.parameters=Object.assign({storySource:{source:"CustomLinkTemplate.bind({})"}},Custom.parameters)},1329:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Custom",(function(){return Custom}));var _a,_b,client=__webpack_require__(99),common=__webpack_require__(14),src=__webpack_require__(4),tslib_es6=__webpack_require__(3),core=__webpack_require__(0),BehaviorSubject=__webpack_require__(319),combineLatest=__webpack_require__(202),tap=__webpack_require__(544);let custom_link_component_CustomLinkComponent=class CustomLinkComponent extends src.i{constructor(cd){super({type:"custom-link",logPrefix:"[CustomLink]"}),this.cd=cd,this._path$=new BehaviorSubject.a(""),this.path$=this._path$.pipe(this.entityPipe("path"),Object(tap.a)(()=>this.cd.detectChanges())),this.hover=!1}ngAfterViewInit(){const firstPCoords$=this.getFirstPoint().selectCoords(),lastPCoords$=this.getLastPoint().selectCoords();Object(combineLatest.b)([firstPCoords$,lastPCoords$]).subscribe(([firstPCoords,lastPCoords])=>{const points=[firstPCoords,lastPCoords],xOrY=Math.abs(firstPCoords.x-lastPCoords.x)>Math.abs(firstPCoords.y-lastPCoords.y)?"x":"y";let isStraight=!1;Math.abs(points[0][xOrY]-points[1][xOrY])<150&&(isStraight=!0);const path=Object(src.p)(firstPCoords,lastPCoords,isStraight?0:200);this._path$.next(path)})}calcCenterOfPath(){const firstPointCoords=this.getFirstPoint().getCoords(),lastPointCoords=this.getLastPoint().getCoords();return{x:(firstPointCoords.x+lastPointCoords.x)/2,y:(firstPointCoords.y+lastPointCoords.y)/2}}deleteLink(){this.destroy()}};Object(tslib_es6.a)([Object(core.ViewChild)("labelLayer",{read:core.ViewContainerRef,static:!0}),Object(tslib_es6.b)("design:type","function"==typeof(_a=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?_a:Object)],custom_link_component_CustomLinkComponent.prototype,"labelLayer",void 0),custom_link_component_CustomLinkComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"custom-link",template:(__webpack_require__(312).default||__webpack_require__(312)).length?__webpack_require__(312).default||__webpack_require__(312):"",styles:[(__webpack_require__(313).default||__webpack_require__(313)).length?__webpack_require__(313).default||__webpack_require__(313):""],changeDetection:core.ChangeDetectionStrategy.Default}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_b=void 0!==core.ChangeDetectorRef&&core.ChangeDetectorRef)?_b:Object])],custom_link_component_CustomLinkComponent);class custom_factory_CustomLinkFactory extends src.b{constructor(resolver,renderer){super("custom-link"),this.resolver=resolver,this.renderer=renderer}generateWidget(diagramEngine,link,linksHost){const componentRef=linksHost.createComponent(this.getRecipe());link.setWidth(1),link.setColor("pink");const rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.setAttribute(rootNode,"data-linkid",link.id),link.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),Object.entries(link).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef.instance.diagramEngine=diagramEngine,componentRef.instance.setPainted(!0),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(custom_link_component_CustomLinkComponent)}getNewInstance(){return new src.i({type:"custom-link"})}}var diagram_component_a,diagram_component_b,_c;let diagram_component_CustomLinkDiagramComponent=class CustomLinkDiagramComponent{constructor(diagramEngine,resolver,renderer){this.diagramEngine=diagramEngine,this.resolver=resolver,this.renderer=renderer,this.nodeHeight=200,this.nodeWidth=200}ngOnInit(){const nodesDefaultDimensions={height:this.nodeHeight,width:this.nodeWidth};this.diagramEngine.registerDefaultFactories(),this.diagramEngine.registerLinkFactory(new custom_factory_CustomLinkFactory(this.resolver,this.renderer)),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1",linkType:"custom-link",maximumLinks:3}),node2=new src.k;node2.setCoords({x:1e3,y:300}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"}),link=new src.i({type:"custom-link"});link.setSourcePort(outport1),link.setTargetPort(inport),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}};var default_component_a;Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_CustomLinkDiagramComponent.prototype,"nodeHeight",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_CustomLinkDiagramComponent.prototype,"nodeWidth",void 0),diagram_component_CustomLinkDiagramComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(161).default||__webpack_require__(161)).length?__webpack_require__(161).default||__webpack_require__(161):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(diagram_component_a=void 0!==src.n&&src.n)?diagram_component_a:Object,"function"==typeof(diagram_component_b=void 0!==core.ComponentFactoryResolver&&core.ComponentFactoryResolver)?diagram_component_b:Object,"function"==typeof(_c=void 0!==core.Renderer2&&core.Renderer2)?_c:Object])],diagram_component_CustomLinkDiagramComponent);let default_component_DefaultLinkStoryComponent=class DefaultLinkStoryComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){const nodesDefaultDimensions={height:200,width:200};this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions);const outport1=node1.addOutPort({name:"outport1"}),node2=new src.k;node2.setCoords({x:1e3,y:0}),node2.setDimensions(nodesDefaultDimensions);const inport=node2.addInPort({name:"inport2"});for(let index=0;index<2;index++){const nodeLoop=new src.k;nodeLoop.setCoords({x:1e3,y:300+300*index}),nodeLoop.setDimensions(nodesDefaultDimensions),nodeLoop.addInPort({name:"inport"+(index+3)}),this.diagramModel.addNode(nodeLoop)}const link=outport1.link(inport);link.setLocked(),this.diagramModel.addAll(node1,node2,link),this.diagramModel.getDiagramEngine().zoomToFit()}};default_component_DefaultLinkStoryComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(161).default||__webpack_require__(161)).length?__webpack_require__(161).default||__webpack_require__(161):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(default_component_a=void 0!==src.n&&src.n)?default_component_a:Object])],default_component_DefaultLinkStoryComponent);__webpack_exports__.default={title:"Link",component:src.h,parameters:{docs:{iframeHeight:"400px"}},decorators:[Object(client.moduleMetadata)({declarations:[src.j,custom_link_component_CustomLinkComponent,default_component_DefaultLinkStoryComponent,src.h,src.f,src.l],imports:[common.a,src.o],entryComponents:[src.j,src.h,custom_link_component_CustomLinkComponent,src.f,src.l]})]};const Default=(args=>({component:default_component_DefaultLinkStoryComponent,props:args})).bind({}),Custom=(args=>({component:diagram_component_CustomLinkDiagramComponent,props:args})).bind({});Default.parameters=Object.assign({storySource:{source:"DefaultLinkTemplate.bind({})"}},Default.parameters),Custom.parameters=Object.assign({storySource:{source:"CustomLinkTemplate.bind({})"}},Custom.parameters)},1330:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Custom",(function(){return Custom}));var _a,client=__webpack_require__(99),common=__webpack_require__(14),src=__webpack_require__(4),tslib_es6=__webpack_require__(3),core=__webpack_require__(0),ReplaySubject=__webpack_require__(200);let custom_component_CustomNodeComponent=class CustomNodeComponent extends src.k{constructor(){super({type:"custom-node"}),this.destroyed$=new ReplaySubject.a(1),this.nodeContent="Pick me!"}ngOnInit(){this.selectPorts().subscribe(ports=>{ports.forEach(port=>{port.getPainted()||(port.setLocked(this.getLocked()),this.generatePort(port))})}),this.selectSelected().subscribe(selected=>{this.nodeContent=selected?"Thank you 🙏":"Pick me!"})}ngOnDestroy(){this.destroyed$.next(!0),this.destroyed$.complete()}generatePort(port){this.getDiagramEngine().generateWidgetForPort(port,this.portsLayer)}};Object(tslib_es6.a)([Object(core.ViewChild)("portsLayer",{read:core.ViewContainerRef,static:!0}),Object(tslib_es6.b)("design:type","function"==typeof(_a=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?_a:Object)],custom_component_CustomNodeComponent.prototype,"portsLayer",void 0),custom_component_CustomNodeComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"custom-node",template:(__webpack_require__(314).default||__webpack_require__(314)).length?__webpack_require__(314).default||__webpack_require__(314):"",styles:[(__webpack_require__(315).default||__webpack_require__(315)).length?__webpack_require__(315).default||__webpack_require__(315):""],changeDetection:core.ChangeDetectionStrategy.Default}),Object(tslib_es6.b)("design:paramtypes",[])],custom_component_CustomNodeComponent);class custom_factory_CustomNodeFactory extends src.c{constructor(resolver,renderer){super("custom-node"),this.resolver=resolver,this.renderer=renderer}generateWidget(diagramEngine,node,nodesHost){const componentRef=nodesHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.setStyle(rootNode,"display","block"),this.renderer.setAttribute(rootNode,"data-nodeid",node.id),node.selectCoords().subscribe(({x:x,y:y})=>{this.renderer.setStyle(rootNode,"left",x+"px"),this.renderer.setStyle(rootNode,"top",y+"px")}),node.selectionChanges().subscribe(e=>{e.isSelected?this.renderer.addClass(rootNode,"selected"):this.renderer.removeClass(rootNode,"selected")}),node.onEntityDestroy().subscribe(e=>{componentRef.destroy()}),Object.entries(node).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef.instance.setDiagramEngine(diagramEngine),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(custom_component_CustomNodeComponent)}getNewInstance(initialConfig){return new src.k(...initialConfig)}}var diagram_component_a,_b,_c;let diagram_component_CustomNodeDiagramComponent=class CustomNodeDiagramComponent{constructor(diagramEngine,resolver,renderer){this.diagramEngine=diagramEngine,this.resolver=resolver,this.renderer=renderer,this.nodeHeight=200,this.nodeWidth=200}ngOnInit(){const nodesDefaultDimensions={height:this.nodeHeight,width:this.nodeWidth};this.diagramEngine.registerDefaultFactories(),this.diagramEngine.registerNodeFactory(new custom_factory_CustomNodeFactory(this.resolver,this.renderer)),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k({type:"custom-node"});node1.setCoords({x:500,y:300}),node1.setDimensions(nodesDefaultDimensions),this.diagramModel.addAll(node1),this.diagramModel.getDiagramEngine().zoomToFit()}ngOnChanges(e){this.diagramModel&&(e.nodeHeight&&Object.values(this.diagramModel.getNodes()).forEach(node=>{node.setHeight(e.nodeHeight.currentValue)}),e.nodeWidth&&Object.values(this.diagramModel.getNodes()).forEach(node=>{node.setWidth(e.nodeWidth.currentValue)}))}};var default_component_a;Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_CustomNodeDiagramComponent.prototype,"nodeHeight",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_CustomNodeDiagramComponent.prototype,"nodeWidth",void 0),diagram_component_CustomNodeDiagramComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(162).default||__webpack_require__(162)).length?__webpack_require__(162).default||__webpack_require__(162):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(diagram_component_a=void 0!==src.n&&src.n)?diagram_component_a:Object,"function"==typeof(_b=void 0!==core.ComponentFactoryResolver&&core.ComponentFactoryResolver)?_b:Object,"function"==typeof(_c=void 0!==core.Renderer2&&core.Renderer2)?_c:Object])],diagram_component_CustomNodeDiagramComponent);let default_component_DefaultNodeComponent=class DefaultNodeComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions({height:200,width:200}),this.diagramModel.addAll(node1),this.diagramModel.getDiagramEngine().zoomToFit()}ngOnChanges(e){this.diagramModel&&(e.nodeHeight&&Object.values(this.diagramModel.getNodes()).forEach(node=>{node.setHeight(e.nodeHeight.currentValue)}),e.nodeWidth&&Object.values(this.diagramModel.getNodes()).forEach(node=>{node.setWidth(e.nodeWidth.currentValue)}))}};default_component_DefaultNodeComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(162).default||__webpack_require__(162)).length?__webpack_require__(162).default||__webpack_require__(162):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(default_component_a=void 0!==src.n&&src.n)?default_component_a:Object])],default_component_DefaultNodeComponent);__webpack_exports__.default={title:"Node",component:src.j,parameters:{docs:{iframeHeight:"400px"}},decorators:[Object(client.moduleMetadata)({declarations:[src.j,custom_component_CustomNodeComponent,src.h,src.f,src.l],imports:[common.a,src.o],entryComponents:[src.j,src.h,custom_component_CustomNodeComponent,src.f,src.l]})]};const Default=(args=>({component:default_component_DefaultNodeComponent,props:args})).bind({}),Custom=(args=>({component:diagram_component_CustomNodeDiagramComponent,props:args})).bind({});Custom.args={nodeHeight:200,nodeWidth:200},Default.parameters=Object.assign({storySource:{source:"DefaultNodeTemplate.bind({})"}},Default.parameters),Custom.parameters=Object.assign({storySource:{source:"CustomNodeTemplate.bind({})"}},Custom.parameters)},1331:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Default",(function(){return Default})),__webpack_require__.d(__webpack_exports__,"Custom",(function(){return Custom}));var client=__webpack_require__(99),common=__webpack_require__(14),src=__webpack_require__(4),tslib_es6=__webpack_require__(3),core=__webpack_require__(0),takeUntil=__webpack_require__(543),map=__webpack_require__(47);let custom_component_CustomPortComponent=class CustomPortComponent extends src.m{constructor(){super()}createLinkModel(){return new src.i}};custom_component_CustomPortComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"custom-port",template:(__webpack_require__(316).default||__webpack_require__(316)).length?__webpack_require__(316).default||__webpack_require__(316):"",styles:[(__webpack_require__(317).default||__webpack_require__(317)).length?__webpack_require__(317).default||__webpack_require__(317):""]}),Object(tslib_es6.b)("design:paramtypes",[])],custom_component_CustomPortComponent);class custom_factory_CustomPortFactory extends src.d{constructor(resolver,renderer){super("custom-port"),this.resolver=resolver,this.renderer=renderer}generateWidget(port,portsHost){const componentRef=portsHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setAttribute(rootNode,"data-portid",port.id),this.renderer.setAttribute(rootNode,"data-name",port.getName()),port.in?this.renderer.addClass(rootNode,"in"):this.renderer.addClass(rootNode,"out"),Object.entries(port).forEach(([key,value])=>{componentRef.instance[key]=value}),this.isConnected(port).subscribe(connected=>{connected?this.renderer.addClass(rootNode,"connected"):this.renderer.removeClass(rootNode,"connected")}),port.onEntityDestroy().subscribe(e=>{componentRef.destroy()}),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(custom_component_CustomPortComponent)}getNewInstance(initialConfig){return new src.m(Object.assign({isInput:!0,name:"unknown"},initialConfig))}isConnected(port){return port.selectLinks().pipe(Object(takeUntil.a)(port.onEntityDestroy()),Object(map.a)(links=>Object.keys(links).length>0))}}var _a,_b,_c;let diagram_component_CustomPortDiagramComponent=class CustomPortDiagramComponent{constructor(diagramEngine,resolver,renderer){this.diagramEngine=diagramEngine,this.resolver=resolver,this.renderer=renderer}ngOnInit(){this.diagramEngine.registerDefaultFactories(),this.diagramEngine.registerPortFactory(new custom_factory_CustomPortFactory(this.resolver,this.renderer)),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions({height:200,width:200});const port1=new src.m({type:"custom-port"});node1.addPort(port1),this.diagramModel.addAll(node1),this.diagramModel.getDiagramEngine().zoomToFit()}};var default_component_a;diagram_component_CustomPortDiagramComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(163).default||__webpack_require__(163)).length?__webpack_require__(163).default||__webpack_require__(163):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_a=void 0!==src.n&&src.n)?_a:Object,"function"==typeof(_b=void 0!==core.ComponentFactoryResolver&&core.ComponentFactoryResolver)?_b:Object,"function"==typeof(_c=void 0!==core.Renderer2&&core.Renderer2)?_c:Object])],diagram_component_CustomPortDiagramComponent);let default_component_DefaultPortComponent=class DefaultPortComponent{constructor(diagramEngine){this.diagramEngine=diagramEngine}ngOnInit(){this.diagramEngine.registerDefaultFactories(),this.diagramModel=this.diagramEngine.createDiagram();const node1=new src.k;node1.setCoords({x:500,y:300}),node1.setDimensions({height:200,width:200}),node1.addInPort({name:"inport1"}),node1.addOutPort({name:"outport1"}),this.diagramModel.addAll(node1),this.diagramModel.getDiagramEngine().zoomToFit()}};default_component_DefaultPortComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"app-root",template:'<ngdx-diagram\n    class="demo-diagram"\n    [model]="diagramModel"\n  ></ngdx-diagram>',styles:[(__webpack_require__(163).default||__webpack_require__(163)).length?__webpack_require__(163).default||__webpack_require__(163):""]}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(default_component_a=void 0!==src.n&&src.n)?default_component_a:Object])],default_component_DefaultPortComponent);__webpack_exports__.default={title:"Port",component:src.j,parameters:{docs:{iframeHeight:"400px"}},decorators:[Object(client.moduleMetadata)({declarations:[src.j,custom_component_CustomPortComponent,src.h,src.f,src.l],imports:[common.a,src.o],entryComponents:[src.j,src.h,custom_component_CustomPortComponent,src.f,src.l]})]};const Default=(args=>({component:default_component_DefaultPortComponent,props:args})).bind({}),Custom=(args=>({component:diagram_component_CustomPortDiagramComponent,props:args})).bind({});Custom.args={nodeHeight:200,nodeWidth:200},Default.parameters=Object.assign({storySource:{source:"DefaultNodeTemplate.bind({})"}},Default.parameters),Custom.parameters=Object.assign({storySource:{source:"CustomNodeTemplate.bind({})"}},Custom.parameters)},1333:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(23),__webpack_require__(12),__webpack_require__(18),__webpack_require__(1);var esm=__webpack_require__(16),blocks=__webpack_require__(144);function _extends(){return(_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),Object(esm.mdx)(blocks.Meta,{title:"Changelog",mdxType:"Meta"}),Object(esm.mdx)(blocks.Description,{mdxType:"Description"},"## [3.3.4](https://github.com/Vonage/ngx-diagrams/compare/v3.3.3...v3.3.4) (2020-12-16)\n\n\n### Performance Improvements\n\n* **components:** set change detection to OnPush to reduce cd cycles ([80d2339](https://github.com/Vonage/ngx-diagrams/commit/80d23399b8bf9c9615673ce7b021c346bc6e86ba))\n* **diagram:** run dom changes outside of zone ([0d5fd04](https://github.com/Vonage/ngx-diagrams/commit/0d5fd04144ece14accc5dd229bde3c179a044481))\n\n## [3.3.3](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.3.2...v3.3.3) (2020-12-11)\n\n### Performance Improvements\n\n- **diagram:** improve reset and addAll performance ([d809b29](https://github.com/DanielNetzer/ngx-diagrams/commit/d809b298cd1c2be90c96500ec8594fceb44efdcf))\n\n## [3.3.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.3.1...v3.3.2) (2020-11-22)\n\n### Bug Fixes\n\n- **links:** unfound model errors, links layer position ([431c282](https://github.com/DanielNetzer/ngx-diagrams/commit/431c282dd4bccc2584701b29e0461c128260e8f2))\n\n## [3.3.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.3.0...v3.3.1) (2020-11-19)\n\n### Bug Fixes\n\n- upgrade snyk from 1.419.1 to 1.420.0 ([4a49514](https://github.com/DanielNetzer/ngx-diagrams/commit/4a49514445bbbfd69cb62522e0b628b54f074209))\n- **dependencies:** updated all relevant dependencies ([dec8e9e](https://github.com/DanielNetzer/ngx-diagrams/commit/dec8e9e00537f261b2731b04d09ea6d4eaa2cc8d))\n- **merged:** lock file ([2182347](https://github.com/DanielNetzer/ngx-diagrams/commit/21823478f92a863ccf14e93d0c10c683a7d9e6d1))\n- **on mouse up:** handle edge cases where models cleared manually mid iteration ([a9d3603](https://github.com/DanielNetzer/ngx-diagrams/commit/a9d3603d03362189ade36740523cd57c2c123947))\n\n# [3.3.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.2.0...v3.3.0) (2020-11-15)\n\n### Features\n\n- **angular 11:** updated library, storybook to angular 11 ([d67fd6b](https://github.com/DanielNetzer/ngx-diagrams/commit/d67fd6b63acc9d77837bbcb5482038feb82c17ff))\n\n# [3.2.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.1.1...v3.2.0) (2020-11-15)\n\n### Features\n\n- **logger:** every event changes can be monitored using log level info ([d7b217d](https://github.com/DanielNetzer/ngx-diagrams/commit/d7b217dfa292f3d0876a5c7a583ddba7cca3c2cb))\n- **no zone:** everything rx with proper pipes ([fa400a2](https://github.com/DanielNetzer/ngx-diagrams/commit/fa400a2c398ff6d37cf65334263dc96c11057d08))\n- **smart routing:** mid implementation of smart links ([a074ac2](https://github.com/DanielNetzer/ngx-diagrams/commit/a074ac27fec3698cf889343b8fddd7779b1d646e))\n- **smart routing:** working, now to optmizations ([ea301f5](https://github.com/DanielNetzer/ngx-diagrams/commit/ea301f5e14aa3a8135c04b60eeb72440d80c548d))\n- **smart-routing:** working, still have to restrict canvas limits ([d82479e](https://github.com/DanielNetzer/ngx-diagrams/commit/d82479e8e59609feaa49450561421be1ce7fb7cf))\n\n## [3.1.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.1.0...v3.1.1) (2020-11-14)\n\n### Bug Fixes\n\n- upgrade snyk from 1.415.0 to 1.419.1 ([d7e38df](https://github.com/DanielNetzer/ngx-diagrams/commit/d7e38df9ef538904b2fa619121f78d17db2adc7d))\n\n# [3.1.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.0.1...v3.1.0) (2020-11-12)\n\n### Features\n\n- **serialization:** from and to json ([6fbd0be](https://github.com/DanielNetzer/ngx-diagrams/commit/6fbd0bea4009b3add591df80ff2e1143f1066e90))\n- **serialization:** interface for all serialized models ([4a3539a](https://github.com/DanielNetzer/ngx-diagrams/commit/4a3539a0a9b9c51d1dd0ce6da02b6aabffece70a))\n- **serialization:** serialize graph to json ([df6aa19](https://github.com/DanielNetzer/ngx-diagrams/commit/df6aa193f4a9ea1f8d886272e05756a622a56137)), closes [#17](https://github.com/DanielNetzer/ngx-diagrams/issues/17)\n\n## [3.0.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v3.0.0...v3.0.1) (2020-11-12)\n\n### Bug Fixes\n\n- upgrade multiple dependencies with Snyk ([fec3a5b](https://github.com/DanielNetzer/ngx-diagrams/commit/fec3a5bbe919348f4aaad8ae6c214232b5cd856d))\n- upgrade snyk from 1.414.1 to 1.415.0 ([3ed91ef](https://github.com/DanielNetzer/ngx-diagrams/commit/3ed91ef88f1cca8fb2b0035a96fec6cc2d81248b))\n\n# [3.0.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.7...v3.0.0) (2020-11-07)\n\n### Bug Fixes\n\n- **links model:** auto resolve the correct model for ports links ([cf6d074](https://github.com/DanielNetzer/ngx-diagrams/commit/cf6d0740e8c0177af38c50b85ce9c991daddd8e0))\n- **magnets:** resseting all previously defined magnets on selection models ([63d17f8](https://github.com/DanielNetzer/ngx-diagrams/commit/63d17f80a52b826444a253cf7c08dcedc91fb6d9))\n- **points:** reselecting points and moving links ([f123e05](https://github.com/DanielNetzer/ngx-diagrams/commit/f123e05ba2ca97bb9b17d1bce0e5b9443cf4c03e))\n- **ports:** multiple bugs and rendering races ([636aa39](https://github.com/DanielNetzer/ngx-diagrams/commit/636aa394af6dea42e7ba46b10bbb62d3150e9bc7))\n- **ports coords:** on initialization ports coords will align based on their true position ([22dd4bd](https://github.com/DanielNetzer/ngx-diagrams/commit/22dd4bd8ed710386d4be70ad26cf675868d3fc1b))\n\n### Documentation\n\n- **changelog:** added to stories ([c43b109](https://github.com/DanielNetzer/ngx-diagrams/commit/c43b109d8c943308f804dbf1e88874ba271cd4ec))\n- **custom link:** updated models and template according to changes ([1d09e0f](https://github.com/DanielNetzer/ngx-diagrams/commit/1d09e0f8a1347a9c4b7d2f6295cd1802eb57a0b0))\n\n### Features\n\n- **magnetic ports:** on link drag when getting to 30px proximity, magnetize ([a696474](https://github.com/DanielNetzer/ngx-diagrams/commit/a696474c69538ec04d84f5aa7ca0672da48ef264))\n\n### BREAKING CHANGES\n\n- **changelog:** models changes\n- **custom link:** models changes\n- **magnets:** models changes\n- **points:** models changes\n\n## [2.18.7](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.6...v2.18.7) (2020-10-25)\n\n### Bug Fixes\n\n- **default link:** using public members selectColor ([99f5ab9](https://github.com/DanielNetzer/ngx-diagrams/commit/99f5ab987d33d9caff341603b6a9075b14582db4))\n\n## [2.18.6](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.5...v2.18.6) (2020-06-10)\n\n### Bug Fixes\n\n- upgrade multiple dependencies with Snyk ([6b502d8](https://github.com/DanielNetzer/ngx-diagrams/commit/6b502d85fec81eb886d75a66d02928e5db2b6779))\n- upgrade snyk from 1.317.0 to 1.319.0 ([5e12d4a](https://github.com/DanielNetzer/ngx-diagrams/commit/5e12d4a31f897bed7080fc8c313e8a8ec2fc4bbb))\n- upgrade snyk from 1.317.0 to 1.319.0 ([a81d4aa](https://github.com/DanielNetzer/ngx-diagrams/commit/a81d4aacc0a3a30e92411909db030c99b28d4a87))\n- upgrade tslib from 1.11.1 to 1.11.2 ([48dbaf7](https://github.com/DanielNetzer/ngx-diagrams/commit/48dbaf7956c4e5173f0f97e0e6a627bf8de23034))\n- upgrade tslib from 1.11.1 to 1.11.2 ([98c84ca](https://github.com/DanielNetzer/ngx-diagrams/commit/98c84caadfd54a74ab224f720bf3a188848191bf))\n\n## [2.18.5](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.4...v2.18.5) (2020-06-10)\n\n### Bug Fixes\n\n- upgrade ngx-markdown from 9.0.0 to 9.1.0 ([bc89e53](https://github.com/DanielNetzer/ngx-diagrams/commit/bc89e53ed6a238f817812e3b03d8549217d8bc2f))\n\n## [2.18.4](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.3...v2.18.4) (2020-06-02)\n\n### Bug Fixes\n\n- **link model:** lock child points when locking link ([c07cf37](https://github.com/DanielNetzer/ngx-diagrams/commit/c07cf374b906240a3d1368cf1639c2c78c09c2d5))\n\n## [2.18.3](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.2...v2.18.3) (2020-06-02)\n\n### Bug Fixes\n\n- upgrade multiple dependencies with Snyk ([55fd568](https://github.com/DanielNetzer/ngx-diagrams/commit/55fd568e9d20a719b9308ea15eb9288b69346ded))\n- upgrade multiple dependencies with Snyk ([b62f06b](https://github.com/DanielNetzer/ngx-diagrams/commit/b62f06bd15724d2fc118d250d429d0e320cbfd6a))\n\n## [2.18.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.1...v2.18.2) (2020-05-07)\n\n### Bug Fixes\n\n- **links:** new links wont be created if canLinkToPort fail ([2a1ea0f](https://github.com/DanielNetzer/ngx-diagrams/commit/2a1ea0fba7b6ded4197b6de5f18187b6c0dee16e))\n\n## [2.18.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.18.0...v2.18.1) (2020-05-04)\n\n### Bug Fixes\n\n- **zoom:** fixed issue with zoom to fit ([62777c7](https://github.com/DanielNetzer/ngx-diagrams/commit/62777c7a98a84152e77f5e9fc10d9bf47be82839))\n\n# [2.18.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.17.0...v2.18.0) (2020-05-04)\n\n### Features\n\n- **zoom to fit:** taking under consideration min/max zoom ([2adc18d](https://github.com/DanielNetzer/ngx-diagrams/commit/2adc18db3747323823acf3b28cfd98abcf24e8eb))\n\n# [2.17.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.16.0...v2.17.0) (2020-05-04)\n\n### Bug Fixes\n\n- package.json, package-lock.json & .snyk to reduce vulnerabilities ([71edd1e](https://github.com/DanielNetzer/ngx-diagrams/commit/71edd1e051ad2270536a6bb8edaf06abf8be0177))\n- package.json, package-lock.json & .snyk to reduce vulnerabilities ([8f4613d](https://github.com/DanielNetzer/ngx-diagrams/commit/8f4613d2ca2ec7ac2ff967e601be2939bfe0f726))\n- package.json, package-lock.json & .snyk to reduce vulnerabilities ([4da388b](https://github.com/DanielNetzer/ngx-diagrams/commit/4da388b98f39e5d44212dc9684a386ed1c64159c))\n- upgrade multiple dependencies with Snyk ([35e5380](https://github.com/DanielNetzer/ngx-diagrams/commit/35e5380bc92b86a20e36dd3c7c4f26c9c43a28f3))\n- upgrade rxjs from 6.5.4 to 6.5.5 ([59483a1](https://github.com/DanielNetzer/ngx-diagrams/commit/59483a16d26af5f633f7dc804a6d39cee711f898))\n- upgrade rxjs from 6.5.4 to 6.5.5 ([275b457](https://github.com/DanielNetzer/ngx-diagrams/commit/275b4575cf383322c315dc3b1c24d298d48f0313))\n- **deps:** updated all deps to address vuln ([e2323d1](https://github.com/DanielNetzer/ngx-diagrams/commit/e2323d1d25dfb8f15f6f9a88b1eff8b8f8159b6a))\n\n### Features\n\n- **zoom:** min and max zoom levels properties ([f8470cb](https://github.com/DanielNetzer/ngx-diagrams/commit/f8470cbe8ba55a8421ed9af4cfb2fa52aa9fc721))\n\n# [2.16.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.15.0...v2.16.0) (2020-04-12)\n\n### Features\n\n- **links:** canCreateLinks property on ports ([73eba4b](https://github.com/DanielNetzer/ngx-diagrams/commit/73eba4b334c5cab50ad00f49754f94124b4d090e))\n\n# [2.15.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.14.0...v2.15.0) (2020-04-12)\n\n### Features\n\n- **actions:** invalid link destroyed action dispatched ([d942119](https://github.com/DanielNetzer/ngx-diagrams/commit/d942119f5fe59045ed01191559ad79c994c90ca4))\n\n# [2.14.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.13.2...v2.14.0) (2020-03-29)\n\n### Features\n\n- **actions:** loose link destroyed action ([4b47147](https://github.com/DanielNetzer/ngx-diagrams/commit/4b47147e07f9a152e36b3848f425f0d633513a44))\n- **colors:** links colors are now subscribable ([face093](https://github.com/DanielNetzer/ngx-diagrams/commit/face093b405cfa1d575b5da4abe1e4ce96b81e0c))\n\n## [2.13.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.13.1...v2.13.2) (2020-02-09)\n\n### Bug Fixes\n\n- **imports:** coords interface import ([7b649a7](https://github.com/DanielNetzer/ngx-diagrams/commit/7b649a7e69ad7b570d05cfe9f12842fe43098f00))\n\n## [2.13.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.13.0...v2.13.1) (2020-02-09)\n\n### Bug Fixes\n\n- **imports:** bad imports naming ([014f17a](https://github.com/DanielNetzer/ngx-diagrams/commit/014f17a4f3dbd8e4b166e072a67918a46c9760c3))\n\n# [2.13.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.12.1...v2.13.0) (2019-12-25)\n\n### Features\n\n- **node model:** remove, update, add ports ([e334267](https://github.com/DanielNetzer/ngx-diagrams/commit/e3342674a5aad82d2e5e4c0839a989c2d371abb0))\n\n## [2.12.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.12.0...v2.12.1) (2019-12-25)\n\n### Bug Fixes\n\n- **base event:** null reference in options for event ([8a69a51](https://github.com/DanielNetzer/ngx-diagrams/commit/8a69a51f16a172514030c20f2c628fd5aec31206))\n\n# [2.12.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.11.2...v2.12.0) (2019-12-25)\n\n### Features\n\n- **base entity:** passing options to constructor ([5cd07d9](https://github.com/DanielNetzer/ngx-diagrams/commit/5cd07d956528d4a26c708ab45ae8b933ad76ebda))\n\n## [2.11.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.11.1...v2.11.2) (2019-12-19)\n\n### Bug Fixes\n\n- **on entity destroyed:** reverted the filtering ([2b92467](https://github.com/DanielNetzer/ngx-diagrams/commit/2b92467c29907c489b958abef84e47c1470a5265))\n\n## [2.11.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.11.0...v2.11.1) (2019-12-19)\n\n### Performance Improvements\n\n- **destroy options:** moved interface to a their right place ([c032bd5](https://github.com/DanielNetzer/ngx-diagrams/commit/c032bd5e0829d734ed125dd4c4d093a391a54132))\n\n# [2.11.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.10.0...v2.11.0) (2019-12-19)\n\n### Features\n\n- **destroy options:** allowing to pass options to destroy method ([06373bf](https://github.com/DanielNetzer/ngx-diagrams/commit/06373bf193f8fcf42b4156bdb651dae42698ec85))\n- **destroy-options:** emit property ([16a4a2e](https://github.com/DanielNetzer/ngx-diagrams/commit/16a4a2e7585b680aff81fb70bfae29cba55a8bad))\n\n# [2.10.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.9.0...v2.10.0) (2019-11-21)\n\n### Features\n\n- **port:** added getters and setters for width and height ([ba2c6c5](https://github.com/DanielNetzer/ngx-diagrams/commit/ba2c6c581bd3f5a586dd44bb286f6a5c7351f1a4))\n\n# [2.9.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.8.3...v2.9.0) (2019-11-21)\n\n### Features\n\n- **port:** get x,y coords ([5162334](https://github.com/DanielNetzer/ngx-diagrams/commit/5162334b1005b3a557e3363d414148c5e2bb3a13))\n\n## [2.8.3](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.8.2...v2.8.3) (2019-09-16)\n\n### Bug Fixes\n\n- **actions:** links created action ([f031475](https://github.com/DanielNetzer/ngx-diagrams/commit/f031475))\n\n## [2.8.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.8.1...v2.8.2) (2019-09-15)\n\n### Bug Fixes\n\n- **defaults:** default link coords binding ([1f54ccd](https://github.com/DanielNetzer/ngx-diagrams/commit/1f54ccd))\n- **links:** maximum links ([554e76e](https://github.com/DanielNetzer/ngx-diagrams/commit/554e76e))\n- **points:** bad coords observable for points ([1936d62](https://github.com/DanielNetzer/ngx-diagrams/commit/1936d62)), closes [#13](https://github.com/DanielNetzer/ngx-diagrams/issues/13)\n\n## [2.8.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.8.0...v2.8.1) (2019-09-11)\n\n### Bug Fixes\n\n- **actions:** link connection action now trigger when link is valid ([60d413e](https://github.com/DanielNetzer/ngx-diagrams/commit/60d413e))\n\n# [2.8.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.7.1...v2.8.0) (2019-09-09)\n\n### Features\n\n- **actions:** on link connected between two ports ([55f492e](https://github.com/DanielNetzer/ngx-diagrams/commit/55f492e))\n\n## [2.7.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.7.0...v2.7.1) (2019-09-09)\n\n### Bug Fixes\n\n- **selection:** multiple selection ([49ab712](https://github.com/DanielNetzer/ngx-diagrams/commit/49ab712)), closes [#12](https://github.com/DanielNetzer/ngx-diagrams/issues/12)\n\n# [2.7.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.6.4...v2.7.0) (2019-09-04)\n\n### Features\n\n- **auto arrange:** dagre based auto arrange engine ([4e6263a](https://github.com/DanielNetzer/ngx-diagrams/commit/4e6263a))\n\n## [2.6.4](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.6.3...v2.6.4) (2019-09-03)\n\n### Bug Fixes\n\n- **custom links:** outport can now define their links type per port ([68d0b95](https://github.com/DanielNetzer/ngx-diagrams/commit/68d0b95)), closes [#10](https://github.com/DanielNetzer/ngx-diagrams/issues/10) [#11](https://github.com/DanielNetzer/ngx-diagrams/issues/11)\n\n## [2.6.3](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.6.2...v2.6.3) (2019-07-11)\n\n### Bug Fixes\n\n- **defauls:** changed exports to point to index file ([c3032e0](https://github.com/DanielNetzer/ngx-diagrams/commit/c3032e0))\n\n## [2.6.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.6.1...v2.6.2) (2019-07-11)\n\n### Bug Fixes\n\n- **defaults:** exporting all default components ([3bb0ec8](https://github.com/DanielNetzer/ngx-diagrams/commit/3bb0ec8))\n\n## [2.6.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.6.0...v2.6.1) (2019-07-08)\n\n### Bug Fixes\n\n- **security:** updated packages to remove security issues ([6643aa5](https://github.com/DanielNetzer/ngx-diagrams/commit/6643aa5))\n\n### Performance Improvements\n\n- **default components:** exported as individual modules ([2a4bff6](https://github.com/DanielNetzer/ngx-diagrams/commit/2a4bff6))\n\n# [2.6.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.5.1...v2.6.0) (2019-07-04)\n\n### Features\n\n- **labels:** links can now have a label ([4359cb5](https://github.com/DanielNetzer/ngx-diagrams/commit/4359cb5))\n\n## [2.5.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.5.0...v2.5.1) (2019-06-26)\n\n### Bug Fixes\n\n- **change detection:** on widget created run change detection ref check ([05f1eec](https://github.com/DanielNetzer/ngx-diagrams/commit/05f1eec))\n\n# [2.5.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.4.0...v2.5.0) (2019-06-25)\n\n### Features\n\n- **default port:** custom ids ([6e7772a](https://github.com/DanielNetzer/ngx-diagrams/commit/6e7772a))\n\n# [2.4.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.3.0...v2.4.0) (2019-06-25)\n\n### Features\n\n- **default node:** support for custom ids ([0e3ff7f](https://github.com/DanielNetzer/ngx-diagrams/commit/0e3ff7f))\n\n# [2.3.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.2.0...v2.3.0) (2019-06-25)\n\n### Features\n\n- **default node:** support for custom ID ([ddd8b92](https://github.com/DanielNetzer/ngx-diagrams/commit/ddd8b92))\n\n# [2.2.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.1.1...v2.2.0) (2019-06-24)\n\n### Features\n\n- **ports:** support for different types of ports ([9c9af1e](https://github.com/DanielNetzer/ngx-diagrams/commit/9c9af1e))\n\n## [2.1.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.1.0...v2.1.1) (2019-06-24)\n\n### Bug Fixes\n\n- **util:** exporting utils ([eed447d](https://github.com/DanielNetzer/ngx-diagrams/commit/eed447d))\n\n# [2.1.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.0.4...v2.1.0) (2019-06-24)\n\n### Bug Fixes\n\n- **storybook:** imports are now from the library and not the dist ([9a487cf](https://github.com/DanielNetzer/ngx-diagrams/commit/9a487cf))\n\n### Features\n\n- **exports:** exporting all relevant apis ([0d24b42](https://github.com/DanielNetzer/ngx-diagrams/commit/0d24b42))\n\n## [2.0.4](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.0.3...v2.0.4) (2019-06-24)\n\n### Bug Fixes\n\n- **main module:** declared all components inside self ([80a55b3](https://github.com/DanielNetzer/ngx-diagrams/commit/80a55b3))\n\n## [2.0.3](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.0.2...v2.0.3) (2019-06-23)\n\n### Bug Fixes\n\n- **public api:** fixed exposed public apis ([9861bda](https://github.com/DanielNetzer/ngx-diagrams/commit/9861bda))\n\n## [2.0.2](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.0.1...v2.0.2) (2019-06-23)\n\n### Bug Fixes\n\n- **ci:** fixed issue with ci ([ff380d6](https://github.com/DanielNetzer/ngx-diagrams/commit/ff380d6))\n- **package lock:** updated package lock ([fb0d604](https://github.com/DanielNetzer/ngx-diagrams/commit/fb0d604))\n\n## [2.0.1](https://github.com/DanielNetzer/ngx-diagrams/compare/v2.0.0...v2.0.1) (2019-06-23)\n\n### Bug Fixes\n\n- **public api:** exporting all required modules ([69a80de](https://github.com/DanielNetzer/ngx-diagrams/commit/69a80de))\n\n# [2.0.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v1.5.0...v2.0.0) (2019-06-23)\n\n### Bug Fixes\n\n- **base entity:** removed unused import ([24a366b](https://github.com/DanielNetzer/ngx-diagrams/commit/24a366b))\n- **default-factories:** use renderer2 instead direct DOM ([c10970d](https://github.com/DanielNetzer/ngx-diagrams/commit/c10970d))\n- **layers overlapping:** layers wont overlap each ([045cffb](https://github.com/DanielNetzer/ngx-diagrams/commit/045cffb))\n\n### Features\n\n- **rxstate:** move all library and engine to rx style [WIP](<[24d2b03](https://github.com/DanielNetzer/ngx-diagrams/commit/24d2b03)>)\n\n### BREAKING CHANGES\n\n- **rxstate:** CHANGES\n\n# [1.5.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v1.4.0...v1.5.0) (2019-05-18)\n\n### Features\n\n- **selection:** links, points selection ([ad6e1dd](https://github.com/DanielNetzer/ngx-diagrams/commit/ad6e1dd))\n\n# [1.4.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v1.3.0...v1.4.0) (2019-05-12)\n\n### Features\n\n- **multiple selection:** selection box, multiple entities selection ([ef6677a](https://github.com/DanielNetzer/ngx-diagrams/commit/ef6677a))\n\n# [1.3.0](https://github.com/DanielNetzer/ngx-diagrams/compare/v1.2.0...v1.3.0) (2019-05-11)\n\n### Bug Fixes\n\n- **actions:** once action stop firing, clear the action from the state ([c77571e](https://github.com/DanielNetzer/ngx-diagrams/commit/c77571e))\n- **build:** clean build errors ([adf7bf8](https://github.com/DanielNetzer/ngx-diagrams/commit/adf7bf8))\n- **build:** expose props to be used in html ([4a11834](https://github.com/DanielNetzer/ngx-diagrams/commit/4a11834))\n- **configs:** configurations and node models ([a545c2c](https://github.com/DanielNetzer/ngx-diagrams/commit/a545c2c))\n- **engine:** missed refactoring parent prop ([4de3a63](https://github.com/DanielNetzer/ngx-diagrams/commit/4de3a63))\n- **merge:** correct merge conflict glitch ([115eb19](https://github.com/DanielNetzer/ngx-diagrams/commit/115eb19))\n- **merge:** merged all branches to master ([64fdb92](https://github.com/DanielNetzer/ngx-diagrams/commit/64fdb92))\n- **release:** change semantic release prepare stage ([89131f8](https://github.com/DanielNetzer/ngx-diagrams/commit/89131f8))\n\n### Features\n\n- **abstract factories:** node, links, ports abstract factories added ([ad58aa9](https://github.com/DanielNetzer/ngx-diagrams/commit/ad58aa9))\n- **component:** default link component impl ([f870137](https://github.com/DanielNetzer/ngx-diagrams/commit/f870137))\n- **data attribs:** entities id, name data attribs, get mouse element ([a847af9](https://github.com/DanielNetzer/ngx-diagrams/commit/a847af9))\n- **data attributes:** nodes, ports id and name data attributes ([56ddcca](https://github.com/DanielNetzer/ngx-diagrams/commit/56ddcca))\n- **default models:** node, port, link default models added ([3378b34](https://github.com/DanielNetzer/ngx-diagrams/commit/3378b34))\n- **default models:** node, port, link default models created ([ecbadf3](https://github.com/DanielNetzer/ngx-diagrams/commit/ecbadf3))\n- **engine service:** all core functionality implemented ([123010e](https://github.com/DanielNetzer/ngx-diagrams/commit/123010e))\n- **links:** links are rendered, port coords inaccurate ([54b99a0](https://github.com/DanielNetzer/ngx-diagrams/commit/54b99a0))\n- **links:** mid work on links, change detection issue ([84b292f](https://github.com/DanielNetzer/ngx-diagrams/commit/84b292f))\n- **links:** mid work on ports position ([1c285cc](https://github.com/DanielNetzer/ngx-diagrams/commit/1c285cc))\n- **merge:** branch feature/links merged ([52a9fa4](https://github.com/DanielNetzer/ngx-diagrams/commit/52a9fa4))\n- **models:** added models for all entities ([04a5f65](https://github.com/DanielNetzer/ngx-diagrams/commit/04a5f65))\n- **models:** change props to private and expose with get/set ([cdf10d4](https://github.com/DanielNetzer/ngx-diagrams/commit/cdf10d4))\n- **ports:** factory ports implemented ([c148aaf](https://github.com/DanielNetzer/ngx-diagrams/commit/c148aaf))\n- **ports:** mid work on ports factory ([b748bc9](https://github.com/DanielNetzer/ngx-diagrams/commit/b748bc9))\n- **rendering:** programmatic rendering of links ([58eabe4](https://github.com/DanielNetzer/ngx-diagrams/commit/58eabe4))\n- **zoom to fit:** canvas zoom level fit to elements in it ([5fbd783](https://github.com/DanielNetzer/ngx-diagrams/commit/5fbd783))\n"))}MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Changelog",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:mdxStoryNameToKey,mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null))}});__webpack_exports__.default=componentMeta},160:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent);\n  background-size: 50px 50px;\n}"},161:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent);\n  background-size: 50px 50px;\n}"},162:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent);\n  background-size: 50px 50px;\n}"},163:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent);\n  background-size: 50px 50px;\n}"},297:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='<div class="ngdx-diagram" #canvas (mousedown)="onMouseDown($event)" (wheel)="onMouseWheel($event)">\n\t\x3c!-- Nodes Layer --\x3e\n\t<div class="ngdx-nodes-layer">\n\t\t<ng-template #nodesLayer></ng-template>\n\t</div>\n\n\t\x3c!-- Links Layer --\x3e\n\t<div class="ngdx-links-layer">\n\t\t<ng-template #linksLayer></ng-template>\n\t</div>\n\n\t\x3c!-- Selection Box --\x3e\n\t<div\n\t\t*ngIf="shouldDrawSelectionBox() && selectAction() | async as action"\n\t\tclass="selector"\n\t\t[ngStyle]="{\n\t\t\ttop: action.dimensions.top + \'px\',\n\t\t\tleft: action.dimensions.left + \'px\',\n\t\t\twidth: action.dimensions.width + \'px\',\n\t\t\theight: action.dimensions.height + \'px\'\n\t\t}"></div>\n</div>\n'},298:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".ngdx-diagram {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  cursor: move;\n  overflow: hidden;\n}\n.ngdx-diagram .selector {\n  position: absolute;\n  background-color: rgba(0, 192, 255, 0.2);\n  border: solid 2px #00c0ff;\n}\n.ngdx-diagram .ngdx-nodes-layer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  transform-origin: 0 0;\n  overflow: visible !important;\n  pointer-events: none;\n  z-index: 150;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n.ngdx-diagram .ngdx-links-layer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  transform-origin: 0 0;\n  overflow: visible !important;\n  pointer-events: none;\n  z-index: 100;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}"},299:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n\t\ttransform:\n\t\t\t'translate(' +\n\t\t\t(selectCoords() | async).x +\n\t\t\t'px, ' +\n\t\t\t(selectCoords() | async).y +\n\t\t\t'px)' +\n\t\t\t'rotate(' +\n\t\t\t(selectRotation() | async) +\n\t\t\t'deg)'\n\t}\">\n  {{ selectLabel() | async }}\n</div>\n"},300:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".default-label {\n  color: white;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}"},301:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='\x3c!-- Label Host --\x3e\n<ng-template #labelLayer></ng-template>\n\n<svg class="link-container">\n  \x3c!-- Link --\x3e\n  <g [id]="id">\n    <path\n      [attr.stroke-width]="width"\n      [attr.stroke]="selectColor() | async"\n      [attr.d]="selectPath() | async"\n      class="default-link"\n      (mouseleave)="setHovered(false)"\n      (mouseenter)="setHovered()"\n      [ngClass]="{ hovered: selectHovered() | async }"\n    ></path>\n    <path\n      class="default-link"\n      (mouseleave)="setHovered(false)"\n      (mouseenter)="setHovered()"\n      [attr.stroke-width]="20"\n      [attr.stroke]="selectColor() | async"\n      [attr.stroke-linecap]="\'round\'"\n      [attr.data-linkid]="id"\n      [attr.stroke-opacity]="(selectHovered() | async) ? \'0.1\' : \'0\'"\n      [attr.d]="selectPath() | async"\n    ></path>\n  </g>\n\n  \x3c!-- Points --\x3e\n  <g *ngFor="let point of getPoints(); trackBy: trackByPoints" [id]="point.id">\n    <circle\n      fill="currentColor"\n      [attr.cx]="point.selectX() | async"\n      [attr.cy]="point.selectY() | async"\n      r="5"\n      class="default-point"\n      [ngClass]="{ hovered: point.selectHovered() | async }"\n    />\n    <circle\n      [attr.data-pointid]="point.id"\n      [attr.data-linkid]="id"\n      (mouseleave)="point.setHovered(false); setHovered(false)"\n      (mouseenter)="point.setHovered(); setHovered()"\n      [attr.cx]="point.selectX() | async"\n      [attr.cy]="point.selectY() | async"\n      r="15"\n      [attr.opacity]="0"\n      [ngClass]="{ selected: point.selectSelected() | async }"\n    />\n  </g>\n</svg>\n'},302:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-link {\n  fill: none;\n  overflow: visible;\n}\n\n@-webkit-keyframes dash {\n  from {\n    stroke-dashoffset: 24;\n  }\n  to {\n    stroke-dashoffset: 0;\n  }\n}\n\n@keyframes dash {\n  from {\n    stroke-dashoffset: 24;\n  }\n  to {\n    stroke-dashoffset: 0;\n  }\n}\n\n.default-link.hovered {\n  stroke: #00c0ff;\n  stroke-dasharray: 10, 2;\n  -webkit-animation: dash 1s linear infinite;\n          animation: dash 1s linear infinite;\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point.hovered {\n  color: #00c0ff;\n}"},303:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="<div\n  class=\"default-node\"\n  [ngStyle]=\"{\n    'height.px': height$ | async,\n    'width.px': width$ | async,\n    'background-color': color\n  }\"\n>\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"},304:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=":host.selected .default-node {\n  background-color: white !important;\n  border-color: blue;\n}\n:host .default-node {\n  pointer-events: all;\n  width: 100%;\n  border-radius: 10px;\n  transition: all 0.3s ease-in-out;\n  cursor: auto;\n}\n:host .default-node .title {\n  padding: 10px;\n  text-align: center;\n  border-bottom: 1px solid blue;\n}\n:host .ports {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}"},305:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="<div [ngClass]=\"in ? 'in' : 'out'\" draggable=\"false\"></div>\n"},306:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=":host {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  border-radius: 60px;\n  border: 1px solid gray;\n  background-color: lightgray;\n  margin: 10px 0;\n}\n:host:hover {\n  background-color: green;\n}\n:host.out {\n  right: -195px;\n}\n:host.in {\n  left: -5px;\n}"},310:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default="<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (selectCoords() | async).x +\n      'px, ' +\n      (selectCoords() | async).y +\n      'px)' +\n      'rotate(' +\n      (selectRotation() | async) +\n      'deg)'\n  }\">\n  {{ selectLabel() | async }}\n</div>\n"},311:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".default-label {\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  -webkit-background-clip: text;\n          background-clip: text;\n  color: transparent;\n  font-size: 24px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}"},312:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='\x3c!-- Label Host --\x3e\n<ng-template #labelLayer></ng-template>\n\n<svg class="custom-link-container" [ngStyle]="{ color: selectColor() | async }">\n  <g>\n    <defs>\n      <marker\n        id="triangle"\n        viewBox="0 0 20 20"\n        refX="15"\n        refY="4"\n        markerUnits="strokeWidth"\n        markerWidth="1"\n        markerHeight="1"\n        orient="auto"\n      >\n        <path\n          d="M 0 0 L 10 5 L 0 10 z"\n          fill="currentcolor"\n          stroke="currentcolor"\n        />\n      </marker>\n    </defs>\n    <path\n      [attr.stroke-width]="width"\n      [attr.stroke]="selectColor() | async"\n      [attr.d]="path$ | async"\n      class="custom-link"\n      (mouseleave)="setHovered(false)"\n      (mouseenter)="setHovered()"\n      [ngClass]="{ hovered: selectHovered() | async }"\n      marker-end="url(#triangle)"\n    ></path>\n    <path\n      class="custom-link"\n      (mouseleave)="setHovered(false)"\n      (mouseenter)="setHovered()"\n      [attr.stroke-width]="20"\n      [attr.stroke]="selectColor() | async"\n      [attr.stroke-linecap]="\'round\'"\n      [attr.data-linkid]="id"\n      [attr.stroke-opacity]="(selectHovered() | async) ? \'0.1\' : \'0\'"\n      [attr.d]="path$ | async"\n      marker-end="url(#triangle)"\n    ></path>\n  </g>\n\n  \x3c!-- Points --\x3e\n  <g *ngFor="let point of getPoints()" [id]="point.id">\n    <circle\n      fill="currentColor"\n      [attr.cx]="point.selectX() | async"\n      [attr.cy]="point.selectY() | async"\n      r="5"\n      class="default-point"\n      [ngClass]="{ hovered: point.selectHovered() | async }"\n    />\n    <circle\n      [attr.data-pointid]="point.id"\n      [attr.data-linkid]="id"\n      (mouseleave)="point.setHovered(false); setHovered(false)"\n      (mouseenter)="point.setHovered(); setHovered()"\n      [attr.cx]="point.selectX() | async"\n      [attr.cy]="point.selectY() | async"\n      r="15"\n      [attr.opacity]="0"\n      [ngClass]="{ selected: point.selectSelected() | async }"\n    />\n  </g>\n</svg>\n\n<div\n  (click)="deleteLink()"\n  class="delete-icon"\n  [ngStyle]="{\n    transform:\n      \'translate(\' +\n      calcCenterOfPath().x +\n      \'px, \' +\n      (calcCenterOfPath().y - 200) +\n      \'px)\'\n  }"\n>\n  <svg\n    fill="currentcolor"\n    xmlns="http://www.w3.org/2000/svg"\n    height="30px"\n    viewBox="-47 0 512 512"\n    width="30px"\n  >\n    <path\n      fill="currentcolor"\n      d="m416.875 114.441406-11.304688-33.886718c-4.304687-12.90625-16.339843-21.578126-29.941406-21.578126h-95.011718v-30.933593c0-15.460938-12.570313-28.042969-28.027344-28.042969h-87.007813c-15.453125 0-28.027343 12.582031-28.027343 28.042969v30.933593h-95.007813c-13.605469 0-25.640625 8.671876-29.945313 21.578126l-11.304687 33.886718c-2.574219 7.714844-1.2695312 16.257813 3.484375 22.855469 4.753906 6.597656 12.445312 10.539063 20.578125 10.539063h11.816406l26.007813 321.605468c1.933594 23.863282 22.183594 42.558594 46.109375 42.558594h204.863281c23.921875 0 44.175781-18.695312 46.105469-42.5625l26.007812-321.601562h6.542969c8.132812 0 15.824219-3.941407 20.578125-10.535157 4.753906-6.597656 6.058594-15.144531 3.484375-22.859375zm-249.320312-84.441406h83.0625v28.976562h-83.0625zm162.804687 437.019531c-.679687 8.402344-7.796875 14.980469-16.203125 14.980469h-204.863281c-8.40625 0-15.523438-6.578125-16.203125-14.980469l-25.816406-319.183593h288.898437zm-298.566406-349.183593 9.269531-27.789063c.210938-.640625.808594-1.070313 1.484375-1.070313h333.082031c.675782 0 1.269532.429688 1.484375 1.070313l9.269531 27.789063zm0 0"\n    />\n    <path\n      fill="currentcolor"\n      d="m282.515625 465.957031c.265625.015625.527344.019531.792969.019531 7.925781 0 14.550781-6.210937 14.964844-14.21875l14.085937-270.398437c.429687-8.273437-5.929687-15.332031-14.199219-15.761719-8.292968-.441406-15.328125 5.925782-15.761718 14.199219l-14.082032 270.398437c-.429687 8.273438 5.925782 15.332032 14.199219 15.761719zm0 0"\n    />\n    <path\n      fill="currentcolor"\n      d="m120.566406 451.792969c.4375 7.996093 7.054688 14.183593 14.964844 14.183593.273438 0 .554688-.007812.832031-.023437 8.269531-.449219 14.609375-7.519531 14.160157-15.792969l-14.753907-270.398437c-.449219-8.273438-7.519531-14.613281-15.792969-14.160157-8.269531.449219-14.609374 7.519532-14.160156 15.792969zm0 0"\n    />\n    <path\n      fill="currentcolor"\n      d="m209.253906 465.976562c8.285156 0 15-6.714843 15-15v-270.398437c0-8.285156-6.714844-15-15-15s-15 6.714844-15 15v270.398437c0 8.285157 6.714844 15 15 15zm0 0"\n    />\n  </svg>\n</div>\n'},313:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".custom-link #triangle path {\n  fill: currentColor;\n}\n\n.custom-link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-point.hovered {\n  color: #00c0ff;\n}\n\n.delete-icon {\n  color: white;\n  cursor: pointer;\n  display: flex;\n  pointer-events: all;\n}"},314:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='<div class="custom-node">\n  <div>{{ nodeContent }}</div>\n\n  <div class="ports">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n'},315:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=':host.selected .custom-node:after {\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-color: #86d8b9;\n}\n:host .custom-node {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  pointer-events: all;\n  background-color: white !important;\n  border-radius: 16px;\n  transition: all 0.3s ease-in-out;\n  padding: 20px;\n  cursor: auto;\n  border: 1px solid #e1e2e6;\n}\n:host .custom-node:hover {\n  cursor: pointer;\n  border-color: #86d8b9;\n}\n:host .custom-node:after {\n  transition: all 0.3s ease-in-out;\n  content: "";\n  position: absolute;\n  top: 12px;\n  right: 4px;\n  bottom: 4px;\n  left: 12px;\n  z-index: -1;\n  margin: -9px;\n  border-radius: 16px;\n}\n:host .custom-node:after {\n  background: #86d8b9;\n}'},316:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default='<svg\n  class="in"\n  *ngIf="in"\n  width="24"\n  height="16"\n  viewBox="0 0 24 16"\n  fill="none"\n  xmlns="http://www.w3.org/2000/svg"\n>\n  <path\n    d="M23.4092 0.839456L23.4096 0.839967C23.4709 0.93801 23.5 1.04467 23.5 1.14951C23.5 1.24656 23.4748 1.34624 23.421 1.44004L12.6823 15.1163L12.6657 15.1375L12.6514 15.1603C12.5272 15.3593 12.2828 15.5 11.9998 15.5C11.7164 15.5 11.4727 15.3596 11.3489 15.1608L11.3345 15.1377L11.3177 15.1163L0.578554 1.44007C0.470045 1.25053 0.474001 1.02677 0.590099 0.84006C0.714827 0.640412 0.959347 0.499999 1.2421 0.499999L22.7579 0.5C23.041 0.5 23.285 0.640261 23.4092 0.839456Z"\n    fill="white"\n    stroke="#B0B0B0"\n  />\n</svg>\n'},317:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=":host {\n  position: absolute;\n}\n:host.in {\n  left: 45%;\n  top: -10px;\n}"},4:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"n",(function(){return engine_service_DiagramEngine})),__webpack_require__.d(__webpack_exports__,"o",(function(){return NgxDiagramsModule})),__webpack_require__.d(__webpack_exports__,"h",(function(){return default_link_component_DefaultLinkComponent})),__webpack_require__.d(__webpack_exports__,"j",(function(){return default_node_component_DefaultNodeComponent})),__webpack_require__.d(__webpack_exports__,"l",(function(){return default_port_component_DefaultPortComponent})),__webpack_require__.d(__webpack_exports__,"f",(function(){return default_label_component_DefaultLabelComponent})),__webpack_require__.d(__webpack_exports__,"i",(function(){return default_link_model_DefaultLinkModel})),__webpack_require__.d(__webpack_exports__,"k",(function(){return default_node_model_DefaultNodeModel})),__webpack_require__.d(__webpack_exports__,"m",(function(){return default_port_model_DefaultPortModel})),__webpack_require__.d(__webpack_exports__,"g",(function(){return default_label_model_DefaultLabelModel})),__webpack_require__.d(__webpack_exports__,"b",(function(){return link_factory_AbstractLinkFactory})),__webpack_require__.d(__webpack_exports__,"d",(function(){return port_factory_AbstractPortFactory})),__webpack_require__.d(__webpack_exports__,"c",(function(){return node_factory_AbstractNodeFactory})),__webpack_require__.d(__webpack_exports__,"a",(function(){return label_factory_AbstractLabelFactory})),__webpack_require__.d(__webpack_exports__,"p",(function(){return generateCurvePath})),__webpack_require__.d(__webpack_exports__,"e",(function(){return dagre_engine_plugin_DagreEngine}));var tslib_es6=__webpack_require__(3),common=__webpack_require__(14),core=__webpack_require__(0),BehaviorSubject=__webpack_require__(319),ReplaySubject=__webpack_require__(200),combineLatest=__webpack_require__(202),fromEvent=__webpack_require__(540),merge=__webpack_require__(242),takeUntil=__webpack_require__(543),filter=__webpack_require__(80),tap=__webpack_require__(544),take=__webpack_require__(205);class BaseAction{constructor(mouseX,mouseY){this.mouseX=mouseX,this.mouseY=mouseY,this.ms=(new Date).getTime()}}class move_canvas_action_MoveCanvasAction extends BaseAction{constructor(mouseX,mouseY,diagramModel){super(mouseX,mouseY),this.initialOffsetX=diagramModel.getOffsetX(),this.initialOffsetY=diagramModel.getOffsetY()}}class selecting_action_SelectingAction extends BaseAction{constructor(mouseX,mouseY){super(mouseX,mouseY),this.mouseX2=mouseX,this.mouseY2=mouseY}getBoxDimensions(){return this.dimensions={left:this.mouseX2>this.mouseX?this.mouseX:this.mouseX2,top:this.mouseY2>this.mouseY?this.mouseY:this.mouseY2,width:Math.abs(this.mouseX2-this.mouseX),height:Math.abs(this.mouseY2-this.mouseY),right:this.mouseX2<this.mouseX?this.mouseX:this.mouseX2,bottom:this.mouseY2<this.mouseY?this.mouseY:this.mouseY2},this.dimensions}containsElement({x:x,y:y},diagramModel){const z=diagramModel.getZoomLevel()/100,dimensions=this.getBoxDimensions();return x*z+diagramModel.getOffsetX()>dimensions.left&&x*z+diagramModel.getOffsetX()<dimensions.right&&y*z+diagramModel.getOffsetY()>dimensions.top&&y*z+diagramModel.getOffsetY()<dimensions.bottom}}var map=__webpack_require__(47),distinctUntilChanged=__webpack_require__(325),paths_js_path=__webpack_require__(647),path_default=__webpack_require__.n(paths_js_path),shareReplay=__webpack_require__(542),pathfinding=__webpack_require__(187);class smart_routing_plugin_PathFinding{constructor(diagramEngine,heuristic=pathfinding.Heuristic.manhattan){this.diagramEngine=diagramEngine,this.pathFinderInstance=new pathfinding.AStarFinder({heuristic:heuristic,diagonalMovement:pathfinding.DiagonalMovement.Always,weight:0})}calculateDirectPath(from,to){const matrix=this.diagramEngine.getCanvasMatrix(),grid=new pathfinding.Grid(matrix),fromX=this.diagramEngine.translateRoutingX(Math.floor(from.x/10)),toX=this.diagramEngine.translateRoutingX(Math.floor(to.x/10)),fromY=this.diagramEngine.translateRoutingX(Math.floor(from.y/10)),toY=this.diagramEngine.translateRoutingX(Math.floor(to.y/10));return this.pathFinderInstance.findPath(fromX,fromY,toX,toY,grid)}calculateLinkStartEndCoords(matrix,path){const startIndex=path.findIndex(point=>0===matrix[point[1]][point[0]]),endIndex=path.length-1-path.slice().reverse().findIndex(point=>0===matrix[point[1]][point[0]]);if(-1===startIndex||-1===endIndex)return;const pathToStart=path.slice(0,startIndex),pathToEnd=path.slice(endIndex);return{start:{x:path[startIndex][0],y:path[startIndex][1]},end:{x:path[endIndex][0],y:path[endIndex][1]},pathToStart:pathToStart,pathToEnd:pathToEnd}}calculateDynamicPath(routingMatrix,start,end,pathToStart,pathToEnd){const grid=new pathfinding.Grid(routingMatrix),dynamicPath=this.pathFinderInstance.findPath(start.x,start.y,end.x,end.y,grid),pathCoords=pathToStart.concat(dynamicPath,pathToEnd).map(coords=>[this.diagramEngine.translateRoutingX(coords[0],!0),this.diagramEngine.translateRoutingY(coords[1],!0)]);return pathfinding.Util.compressPath(pathCoords)}}var LOG_LEVEL;!function(LOG_LEVEL){LOG_LEVEL[LOG_LEVEL.LOG=0]="LOG",LOG_LEVEL[LOG_LEVEL.ERROR=1]="ERROR"}(LOG_LEVEL||(LOG_LEVEL={}));let __DEV__=!0,__LOG__=LOG_LEVEL.ERROR;function isDev(){return __DEV__}function log(message,level=LOG_LEVEL.LOG,...args){isDev()&&__LOG__===level&&(__LOG__===LOG_LEVEL.ERROR&&console.error(message,...args),console.log(message,...args))}function withLog(message,level=LOG_LEVEL.LOG,...args){return source=>isDev()?source.pipe(Object(tap.a)(val=>log(message,level,val,...args))):source}function UID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,c=>{const r=16*Math.random()|0;return("x"===c?r:3&r|8).toString(16)})}function isArray(val){return Array.isArray(val)}function isNil(v){return null==v}function generateCurvePath(firstPoint,lastPoint,curvy=0){const isHorizontal=Math.abs(firstPoint.x-lastPoint.x)>Math.abs(firstPoint.y-lastPoint.y),curvyX=isHorizontal?curvy:0,curvyY=isHorizontal?0:curvy;return`M${firstPoint.x},${firstPoint.y} C ${firstPoint.x+curvyX},${firstPoint.y+curvyY}\n    ${lastPoint.x-curvyX},${lastPoint.y-curvyY} ${lastPoint.x},${lastPoint.y}`}function OutsideZone(targetClass,functionName,descriptor){const source=descriptor.value;return descriptor.value=function(...data){if(!this.ngZone)throw new Error("Class with 'OutsideZone' decorator should have 'ngZone' class property with 'NgZone' class.");return this.ngZone.runOutsideAngular(()=>source.call(this,...data))},descriptor}class state_ValueState{constructor(value,operator){this.stream$=new BehaviorSubject.a(value),this.value$=operator?this.stream$.pipe(operator):this.stream$.asObservable()}get value(){return this.stream$.getValue()}set(value){return this.stream$.next(value),this}emit(){this.stream$.next(this.value)}select(project){const mapFn=project||(v=>v);return this.value$.pipe(Object(map.a)(value=>mapFn(value)),Object(distinctUntilChanged.a)())}}function createValueState(value,operator){return new state_ValueState(value,operator)}class EntityState extends state_ValueState{constructor(value,entityPipe){super(value,entityPipe)}destroy(){this.clear(),this.stream$=null,this.value$=null}clear(destroy=!0){return destroy&&this.forEach(entity=>entity.destroy()),this.value.clear(),this}get(id){return this.value.get(id)}has(id){return this.value.has(id)}add(entity){return this.value.set(entity.id,entity),this}addMany(entities){for(const entity of entities)this.add(entity);return this}remove(id,destroy=!0){var _a;return destroy&&(null===(_a=this.value.get(id))||void 0===_a||_a.destroy()),this.value.delete(id),this}array(){return Array.from(this.value.values())}array$(){return this.select(value=>Array.from(value.values()))}forEach(cb){this.value.forEach(cb)}map(cb){return this.array().map(cb)}}function createEntityState(value=[],entityPipe){return isArray(value)?new EntityState(new Map(value),entityPipe):new EntityState(new Map(function mapToEntries(map){const result=[];for(const key in map)result.push([key,map[key]]);return result}(value)),entityPipe)}var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,Subject=__webpack_require__(36);class event_interface_BaseEvent{constructor(entity,options){this.id=UID(),this.entity=entity,this.entityId=entity.id,this.firing=!0,this.stopPropagation=()=>this.firing=!1,this.propogate=options?options.propagate:null}}class LockEvent extends event_interface_BaseEvent{constructor(entity,locked=!1){super(entity),this.locked=locked}}class ParentChangeEvent extends event_interface_BaseEvent{constructor(entity,parent){super(entity),this.parent=parent}}class SelectionEvent extends event_interface_BaseEvent{constructor(entity,selected){super(entity),this.isSelected=selected}}class PaintedEvent extends event_interface_BaseEvent{constructor(entity,painted=!1){super(entity),this.isPainted=painted}}class base_entity_BaseEntity{constructor(id,logPrefix=""){this.destroyed$=new Subject.a,this.locked$=createValueState(!1,this.entityPipe("locked")),this._id=id||UID(),this._logPrefix=""+logPrefix}get id(){return this._id}set id(id){this._id=id}log(message,...args){log(`${this._logPrefix} ${message}: `,LOG_LEVEL.LOG,...args)}withLog(message,...args){return withLog(`${this._logPrefix} ${message}: `,LOG_LEVEL.LOG,...args)}entityPipe(logMessage=""){return function entityProperty(destroyedNotifier,replayBy=1,logMessage=""){return source=>source.pipe(Object(distinctUntilChanged.a)((a,b)=>!(a instanceof Map||b instanceof Map)&&a===b),Object(shareReplay.a)(replayBy),withLog(logMessage),Object(takeUntil.a)(destroyedNotifier))}(this.onEntityDestroy(),0,`${this._logPrefix}: ${logMessage}`)}getLocked(){return this.locked$.value}setLocked(locked=!0){this.locked$.set(locked).emit()}doClone(lookupTable={},clone){}clone(lookupTable={}){if(lookupTable[this.id])return lookupTable[this.id];const clone=Object.assign({},this);return clone.id=UID(),lookupTable[this.id]=clone,this.doClone(lookupTable,clone),clone}serialize(){return{id:this.id,locked:this.getLocked()}}lockChanges(){return this.locked$.select(locked=>new LockEvent(this,locked))}destroy(){this.log("entity destroyed"),this.destroyed$.next(),this.destroyed$.complete()}onEntityDestroy(){return this.destroyed$.pipe(Object(map.a)(opts=>new event_interface_BaseEvent(this,opts)))}}class base_model_BaseModel extends base_entity_BaseEntity{constructor(type,id,logPrefix="[Base]"){super(id,logPrefix),this.parent$=createValueState(null,this.entityPipe("ParentsChange")),this.selected$=createValueState(!1,this.entityPipe("SelectedChange")),this.hovered$=createValueState(!1,this.entityPipe("HoveredChange")),this.painted$=createValueState(!1,this.entityPipe("PaintedChange")),this._type=type}serialize(){return Object.assign(Object.assign({},super.serialize()),{type:this.getType()})}getParent(){return this.parent$.value}setParent(parent){this.parent$.set(parent).emit()}parentChanges(){return this.parent$.select(p=>new ParentChangeEvent(this,p))}getPainted(){return this.painted$.value}setPainted(painted=!0){this.painted$.set(painted).emit()}getHovered(){return this.hovered$.value}setHovered(painted=!0){this.hovered$.set(painted).emit()}selectHovered(){return this.hovered$.value$}paintChanges(){return this.painted$.select(p=>new PaintedEvent(this,p))}getType(){return this._type}getSelected(){return this.selected$.value}selectSelected(){return this.selected$.select()}setSelected(selected=!0){this.selected$.set(selected).emit()}selectionChanges(){return this.selected$.select(selected=>new SelectionEvent(this,selected))}getSelectedEntities(){return this.getSelected()?[this]:[]}}class point_model_PointModel extends base_model_BaseModel{constructor(link,coords,id,logPrefix="[Point]"){super(link.getType(),id,logPrefix),this.coords$=createValueState(coords,this.entityPipe("coords")),this.setParent(link)}serialize(){return Object.assign(Object.assign({},super.serialize()),{coords:this.getCoords()})}isConnectedToPort(){return null!==this.getParent().getPortForPoint(this)}getLink(){return this.getParent()}destroy(){this.getParent&&this.getParent().removePoint(this),super.destroy()}setCoords(newCoords){this.coords$.set(Object.assign(Object.assign({},this.getCoords()),newCoords)).emit()}selectCoords(){return this.coords$.value$}getCoords(){return this.coords$.value}selectX(){return this.coords$.select(coords=>coords.x)}selectY(){return this.coords$.select(coords=>coords.y)}}class link_model_LinkModel extends base_model_BaseModel{constructor(linkType="default",id,logPrefix="[Link]"){super(linkType,id,logPrefix),this.label$=createValueState(null,this.entityPipe("label")),this.points=[new point_model_PointModel(this,{x:0,y:0}),new point_model_PointModel(this,{x:0,y:0})],this.extras={},this.sourcePort=null,this.targetPort=null}serialize(){var _a;const serializedPoints=this.points.map(point=>point.serialize()),label=null===(_a=this.getLabel())||void 0===_a?void 0:_a.serialize();return Object.assign(Object.assign({},super.serialize()),{name:this.getName(),sourcePort:this.getSourcePort().id,targetPort:this.getTargetPort().id,extras:this.getExtras(),points:serializedPoints,label:label})}setName(name){this.name=name}getName(){return this.name}getExtras(){return this.extras}setExtras(extras){this.extras=extras}destroy(){this.sourcePort&&this.sourcePort.removeLink(this),this.targetPort&&this.targetPort.removeLink(this),super.destroy()}doClone(lookupTable={},clone){clone.setPoints(this.getPoints().map(point=>point.clone(lookupTable))),this.sourcePort&&clone.setSourcePort(this.sourcePort.clone(lookupTable)),this.targetPort&&clone.setTargetPort(this.targetPort.clone(lookupTable))}isLastPoint(point){return this.getPointIndex(point)===this.points.length-1}getPointIndex(point){return this.points.indexOf(point)}getPointModel(id){for(const point of this.points)if(point.id===id)return point;return null}getPortForPoint(point){return null!==this.sourcePort&&this.getFirstPoint().id===point.id?this.sourcePort:null!==this.targetPort&&this.getLastPoint().id===point.id?this.targetPort:null}getPointForPort(port){return null!==this.sourcePort&&this.sourcePort.id===port.id?this.getFirstPoint():null!==this.targetPort&&this.targetPort.id===port.id?this.getLastPoint():null}getFirstPoint(){return this.points[0]}getLastPoint(){return this.points[this.points.length-1]}setSourcePort(port){null!==port&&port.addLink(this),null!==this.sourcePort&&this.sourcePort.removeLink(this),this.sourcePort=port}getSourcePort(){return this.sourcePort}getTargetPort(){return this.targetPort}setTargetPort(port){null!==port&&port.addLink(this),null!==this.targetPort&&this.targetPort.removeLink(this),this.targetPort=port}point({x:x,y:y}){return this.addPoint(this.generatePoint({x:x,y:y}))}getPoints(){return this.points}setPoints(points){points.forEach(point=>{point.setParent(this)}),this.points=points}setLabel(label){label.setParent(this),this.label$.set(label).emit()}selectLabel(){return this.label$.value$}getLabel(){return this.label$.value}resetLabel(){const currentLabel=this.getLabel();currentLabel&&(currentLabel.setParent(null),currentLabel.setPainted(!1)),this.setLabel(null)}removePoint(pointModel){this.points.splice(this.getPointIndex(pointModel),1)}removePointsBefore(pointModel){this.points.splice(0,this.getPointIndex(pointModel))}removePointsAfter(pointModel){this.points.splice(this.getPointIndex(pointModel)+1)}removeMiddlePoints(){this.points.length>2&&this.points.splice(0,this.points.length-2)}addPoint(pointModel,index=1){return pointModel.setParent(this),pointModel.setLocked(this.getLocked()),this.points.splice(index,0,pointModel),pointModel}generatePoint({x:x=0,y:y=0}){return new point_model_PointModel(this,{x:x,y:y})}setLocked(locked=!0){super.setLocked(locked),this.points.forEach(point=>point.setLocked(locked))}}class move_items_action_MoveItemsAction extends BaseAction{constructor(mouseX,mouseY,diagramEngine){super(mouseX,mouseY),this.moved=!1;let selectedItems=diagramEngine.getDiagramModel().getSelectedItems();selectedItems=selectedItems.filter(item=>!(diagramEngine.isModelLocked(item)||item instanceof link_model_LinkModel)),this.selectionModels=selectedItems.map(item=>{const{x:initialX,y:initialY}=item.getCoords();return{model:item,initialX:initialX,initialY:initialY}})}}class links_created_action_LinkCreatedAction extends BaseAction{constructor(mouseX,mouseY,link){super(mouseX,mouseY),this.sourcePort=link.getSourcePort(),this.targetPort=link.getTargetPort(),this.link=link}getOutPortNode(){return this.sourcePort.getParent()}getInPortNode(){return this.targetPort.getParent()}}class loose_link_destroyed_action_LooseLinkDestroyed extends BaseAction{constructor(mouseX,mouseY,link){super(mouseX,mouseY),this.sourcePort=link.getSourcePort(),this.link=link}getOutPortNode(){return this.sourcePort.getParent()}}class invalid_link_destroyed_action_InvalidLinkDestroyed extends BaseAction{constructor(mouseX,mouseY,link){super(mouseX,mouseY),this.sourcePort=link.getSourcePort(),this.link=link}getOutPortNode(){return this.sourcePort.getParent()}}class node_model_NodeModel extends base_model_BaseModel{constructor(nodeType="default",id,extras={},x=0,y=0,width=0,height=0,logPrefix="[Node]"){super(nodeType,id,logPrefix),this.diagramEngine$=createValueState(null,this.entityPipe("diagramEngine")),this.extras$=createValueState({},this.entityPipe("extras")),this.ports$=createEntityState([],this.entityPipe("ports")),this.coords$=createValueState({x:0,y:0},this.entityPipe("coords")),this.dimensions$=createValueState({width:0,height:0},this.entityPipe("dimensions")),this.setExtras(extras),this.setDimensions({width:width,height:height}),this.setCoords({x:x,y:y})}getDiagramEngine(){return this.diagramEngine$.value}selectDiagramEngine(){return this.diagramEngine$.value$}setDiagramEngine(diagramEngine){this.diagramEngine$.set(diagramEngine).emit()}getCoords(){return this.coords$.value}setCoords({x:x,y:y}){const{x:oldX,y:oldY}=this.getCoords();this.getPorts().forEach(port=>{port.getLinks().forEach(link=>{const point=link.getPointForPort(port),{x:pointX,y:pointY}=point.getCoords();point.setCoords({x:pointX+x-oldX,y:pointY+y-oldY})})}),this.coords$.set({x:x,y:y}).emit()}serialize(){const serializedPorts=this.getPortsArray().map(port=>port.serialize());return Object.assign(Object.assign(Object.assign(Object.assign({},super.serialize()),{nodeType:this.getType(),extras:this.getExtras(),width:this.getWidth(),height:this.getHeight()}),this.getCoords()),{ports:serializedPorts})}getSelectedEntities(){let entities=super.getSelectedEntities();return this.getSelected()&&this.getPorts().forEach(port=>{const points=port.getLinksArray().map(link=>link.getPointForPort(port));entities=entities.concat(points)}),this.log("selectedEntities",entities),entities}coordsChanges(){return this.coords$.value$}selectCoords(){return this.coords$.value$}selectX(){return this.coords$.select(coords=>coords.x)}selectY(){return this.coords$.select(coords=>coords.y)}addPort(port){return port.setParent(this),this.ports$.add(port).emit(),port}removePort(portOrId){const portId="string"==typeof portOrId?portOrId:portOrId.id;return this.ports$.remove(portId).emit(),portId}getPort(id){return this.ports$.get(id)}selectPorts(selector){return this.ports$.array$().pipe(this.withLog("selectPorts"))}getPorts(){return this.ports$.value}getPortsArray(){return this.ports$.array()}setDimensions(dimensions){this.dimensions$.set(Object.assign(Object.assign({},this.getDimensions()),dimensions)).emit()}getDimensions(){return this.dimensions$.value}dimensionChanges(){return this.dimensions$.select()}getHeight(){return this.getDimensions().height}setHeight(height){return this.setDimensions({height:height})}getWidth(){return this.getDimensions().width}setWidth(width){return this.setDimensions({width:width})}selectWidth(){return this.dimensions$.select(d=>d.width).pipe(this.withLog("selectWidth"))}selectHeight(){return this.dimensions$.select(d=>d.height).pipe(this.withLog("selectHeight"))}setExtras(extras){this.extras$.set(extras).emit()}getExtras(){return this.extras$.value}selectExtras(selector){return this.extras$.select(selector)}destroy(){super.destroy(),this.removeAllPorts()}removeAllPorts(){this.ports$.clear().emit()}}class diagram_model_DiagramModel extends base_entity_BaseEntity{constructor(diagramEngine,id,logPrefix="[Diagram]"){super(id,logPrefix),this.diagramEngine=diagramEngine,this.nodes$=createEntityState([],this.entityPipe("nodes")),this.links$=createEntityState([],this.entityPipe("links")),this.offsetX$=createValueState(0,this.entityPipe("offsetX")),this.offsetY$=createValueState(0,this.entityPipe("offsetY")),this.zoom$=createValueState(100,this.entityPipe("zoom")),this.maxZoomOut$=createValueState(null),this.maxZoomIn$=createValueState(null),this.gridSize$=createValueState(0)}getNodes(){return this.nodes$.value}getNodesArray(){return this.nodes$.array()}getNode(id){return this.nodes$.get(id)}getLink(id){return this.links$.get(id)}getLinks(){return this.links$.value}getLinksArray(){return this.links$.array()}getAllPorts(options={}){const result=new Map;return this.getNodes().forEach(node=>{(options.filter?node.getPortsArray().filter(options.filter):node.getPortsArray()).forEach(port=>result.set(port.id,port))}),result}addNode(node){return this.nodes$.add(node).emit(),node}deleteNode(nodeOrId){const nodeId="string"==typeof nodeOrId?nodeOrId:nodeOrId.id,node=this.getNode(nodeId);for(const port of node.getPorts().values())for(const link of port.getLinks().values())this.deleteLink(link);this.nodes$.remove(nodeId).emit()}selectNodes(){return this.nodes$.value$}addLink(link){return this.links$.add(link).emit(),link}deleteLink(linkOrId){const linkId="string"==typeof linkOrId?linkOrId:linkOrId.id;this.links$.remove(linkId).emit()}reset(){this.nodes$.clear().emit(),this.links$.clear().emit()}selectLinks(){return this.links$.value$}serialize(){const serializedNodes=this.nodes$.map(node=>node.serialize()),serializedLinks=this.links$.map(link=>link.serialize());return Object.assign(Object.assign({},super.serialize()),{nodes:serializedNodes,links:serializedLinks})}setMaxZoomOut(maxZoomOut){this.maxZoomOut$.set(maxZoomOut).emit()}setMaxZoomIn(maxZoomIn){this.maxZoomIn$.set(maxZoomIn).emit()}getMaxZoomOut(){return this.maxZoomOut$.value}getMaxZoomIn(){return this.maxZoomIn$.value}setOffset(x,y){this.offsetX$.set(x).emit(),this.offsetY$.set(y).emit()}setOffsetX(x){this.offsetX$.set(x).emit()}getOffsetX(){return this.offsetX$.value}selectOffsetX(){return this.offsetX$.value$}setOffsetY(y){this.offsetY$.set(y).emit()}getOffsetY(){return this.offsetY$.value}selectOffsetY(){return this.offsetY$.value$}setZoomLevel(z){const maxZoomIn=this.getMaxZoomIn(),maxZoomOut=this.getMaxZoomOut();maxZoomIn&&z>maxZoomIn||maxZoomOut&&z<maxZoomOut||this.zoom$.set(z).emit()}getZoomLevel(){return this.zoom$.value}selectZoomLevel(){return this.zoom$.value$}getDiagramEngine(){return this.diagramEngine}clearSelection(ignore=null){this.getSelectedItems().forEach(element=>{(null==ignore?void 0:ignore.id)!==element.id&&element.setSelected(!1)})}getGridPosition({x:x,y:y}){const gridSize=this.gridSize$.value;return 0===gridSize?{x:x,y:y}:{x:gridSize*Math.floor((x+gridSize/2)/gridSize),y:gridSize*Math.floor((y+gridSize/2)/gridSize)}}getSelectedItems(...filters){filters=function coerceArray(value){return isNil(value)?[]:Array.isArray(value)?value:[value]}(filters);const items=[],nodes=this.nodes$.array(),links=this.links$.array(),selectedNodes=()=>nodes.flatMap(node=>node.getSelectedEntities()),selectedPorts=()=>nodes.flatMap(node=>node.getPortsArray().flatMap(port=>port.getSelectedEntities())),selectedLinks=()=>links.flatMap(link=>link.getSelectedEntities()),selectedPoints=()=>links.flatMap(link=>link.getPoints().flatMap(point=>point.getSelectedEntities()));if(function isEmptyArray(arr){return!arr||!isArray(arr)||0===arr.length}(filters))items.push(...selectedNodes(),...selectedPorts(),...selectedLinks(),...selectedPoints());else{const byType={node:selectedNodes,port:selectedPorts,link:selectedLinks,point:selectedPoints};for(const type of filters)items.push(...byType[type]())}return function unique(arr){return[...new Set(arr)]}(items)}addAll(...models){const links=[],nodes=[];for(const model of models)model instanceof link_model_LinkModel?links.push(model):model instanceof node_model_NodeModel&&nodes.push(model);return this.addLinks(links),this.addNodes(nodes),models}addLinks(links){this.links$.addMany(links).emit()}addNodes(nodes){this.nodes$.addMany(nodes).emit()}destroy(){super.destroy(),this.nodes$.destroy(),this.links$.destroy()}}class port_model_PortModel extends base_model_BaseModel{constructor(name,type,id,maximumLinks,linkType,magnetic=!0,logPrefix="[Port]"){super(type,id,logPrefix),this.links$=createEntityState([],this.entityPipe("links")),this.x$=createValueState(0,this.entityPipe("x")),this.y$=createValueState(0,this.entityPipe("y")),this.width$=createValueState(0,this.entityPipe("y")),this.height$=createValueState(0,this.entityPipe("y")),this.magnetic$=createValueState(!0,this.entityPipe("magnetic")),this.canCreateLinks$=createValueState(!0,this.entityPipe("magnetic")),this.name=name,this.maximumLinks=maximumLinks,this.linkType=linkType,this.setMagnetic(magnetic)}serialize(){return Object.assign(Object.assign(Object.assign({},super.serialize()),{name:this.getName(),linkType:this.getLinkType(),maximumLinks:this.getMaximumLinks(),type:this.getType(),magnetic:this.getMagnetic(),height:this.getHeight(),width:this.getWidth(),canCreateLinks:this.getCanCreateLinks()}),this.getCoords())}getNode(){return this.getParent()}getName(){return this.name}getCanCreateLinks(){const numberOfLinks=this.getLinks().size;return!(this.maximumLinks&&numberOfLinks>=this.maximumLinks)&&this.canCreateLinks$.value}getCoords(){return{x:this.getX(),y:this.getY()}}selectCanCreateLinks(){return this.canCreateLinks$.value$}setCanCreateLinks(value){this.canCreateLinks$.set(value).emit()}getMagnetic(){return this.magnetic$.value}selectMagnetic(){return this.magnetic$.value$}setMagnetic(magnetic){this.magnetic$.set(magnetic).emit()}selectX(){return this.x$.value$}selectY(){return this.y$.value$}getY(){return this.y$.value}getX(){return this.x$.value}getHeight(){return this.height$.value}getWidth(){return this.width$.value}getMaximumLinks(){return this.maximumLinks}setMaximumLinks(maximumLinks){this.maximumLinks=maximumLinks}getLinkType(){return this.linkType}setLinkType(type){this.linkType=type}removeLink(linkOrId){const linkId=function isString(val){return"string"==typeof val}(linkOrId)?linkOrId:linkOrId.id;this.links$.remove(linkId,!1).emit()}addLink(link){this.links$.add(link).emit()}getLinks(){return this.links$.value}getLinksArray(){return this.links$.array()}selectLinks(){return this.links$.value$}updateCoords({x:x,y:y,width:width,height:height}){this.x$.set(x).emit(),this.y$.set(y).emit(),this.width$.set(width).emit(),this.height$.set(height).emit()}canLinkToPort(port){return!0}isLocked(){return super.getLocked()}createLinkModel(){if(this.getCanCreateLinks())return new link_model_LinkModel}destroy(){super.destroy(),this.links$.clear().emit()}}let diagram_component_NgxDiagramComponent=class NgxDiagramComponent{constructor(document,ngZone,renderer,cdRef,elRef){this.document=document,this.ngZone=ngZone,this.renderer=renderer,this.cdRef=cdRef,this.elRef=elRef,this.allowCanvasZoom=!0,this.allowCanvasTranslation=!0,this.inverseZoom=!0,this.allowLooseLinks=!0,this.maxZoomOut=null,this.maxZoomIn=null,this.portMagneticRadius=30,this.smartRouting=!1,this.actionStartedFiring=new core.EventEmitter,this.actionStillFiring=new core.EventEmitter,this.actionStoppedFiring=new core.EventEmitter,this.action$=new BehaviorSubject.a(null),this.nodesRendered$=new BehaviorSubject.a(!1),this.destroyed$=new ReplaySubject.a(1)}get host(){return this.elRef.nativeElement}ngAfterViewInit(){this.diagramModel&&(this.initNodes(),this.initLinks(),this.initSubs())}ngOnDestroy(){this.destroyed$.next(!0),this.destroyed$.complete()}fireAction(){this.action$.value&&this.actionStillFiring.emit(this.action$.value)}stopFiringAction(shouldSkipEvent){shouldSkipEvent||this.actionStoppedFiring.emit(this.action$.value),this.action$.next(null)}startFiringAction(action){this.action$.next(action),this.actionStartedFiring.emit(action)}selectAction(){return this.action$}shouldDrawSelectionBox(){const action=this.action$.getValue();return action instanceof selecting_action_SelectingAction&&(action.getBoxDimensions(),!0)}getMouseElement(event){const target=event.target;let element=target.closest("[data-portid]");if(element){const nodeEl=target.closest("[data-nodeid]");return{model:this.diagramModel.getNode(nodeEl.getAttribute("data-nodeid")).getPort(element.getAttribute("data-portid")),element:element}}return element=target.closest("[data-pointid]"),element?{model:this.diagramModel.getLink(element.getAttribute("data-linkid")).getPointModel(element.getAttribute("data-pointid")),element:element}:(element=target.closest("[data-linkid]"),element?{model:this.diagramModel.getLink(element.getAttribute("data-linkid")),element:element}:(element=target.closest("[data-nodeid]"),element?{model:this.diagramModel.getNode(element.getAttribute("data-nodeid")),element:element}:null))}onMouseUp(event){const diagramEngine=this.diagramModel.getDiagramEngine(),action=this.action$.getValue();if(action instanceof move_items_action_MoveItemsAction){const element=this.getMouseElement(event);action.selectionModels.forEach(model=>{if(!(model&&model.model instanceof point_model_PointModel))return;let el;if(model.magnet?el=model.magnet:element&&element.model&&(el=element.model),el instanceof port_model_PortModel&&!diagramEngine.isModelLocked(el)){const link=model.model.getLink();if(null!==link.getTargetPort())if(link.getTargetPort()!==el&&link.getSourcePort()!==el){const targetPort=link.getTargetPort(),newLink=link.clone({});newLink.setSourcePort(el),newLink.setTargetPort(targetPort),link.setTargetPort(el),targetPort.removeLink(link),newLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]),link.removePointsAfter(model.model),diagramEngine.getDiagramModel().addLink(newLink)}else link.getTargetPort()===el?link.removePointsAfter(model.model):link.getSourcePort()===el&&link.removePointsBefore(model.model);else{link.setTargetPort(el);const targetPort=link.getTargetPort(),srcPort=link.getSourcePort();targetPort.id!==srcPort.id&&srcPort.canLinkToPort(targetPort)&&this.startFiringAction(new links_created_action_LinkCreatedAction(event.clientX,event.clientY,link))}}model.magnet=void 0}),this.allowLooseLinks||action.selectionModels.forEach(model=>{if(!(model&&model.model instanceof point_model_PointModel))return;const link=model.model.getLink();null!==link.getSourcePort()&&null!==link.getTargetPort()||(link.destroy(),this.startFiringAction(new loose_link_destroyed_action_LooseLinkDestroyed(event.clientX,event.clientY,link)))}),action.selectionModels.forEach(model=>{if(!(model&&model.model instanceof point_model_PointModel))return;const link=model.model.getLink(),sourcePort=link.getSourcePort(),targetPort=link.getTargetPort();null!==sourcePort&&null!==targetPort&&(sourcePort.canLinkToPort(targetPort)?targetPort.getLinksArray().some(link=>link!=link&&(link.getSourcePort()===sourcePort||link.getTargetPort()===sourcePort))&&link.destroy():(link.destroy(),this.startFiringAction(new invalid_link_destroyed_action_InvalidLinkDestroyed(event.clientX,event.clientY,link))))}),this.stopFiringAction()}else this.stopFiringAction();this.action$.next(null)}onMouseMove(event){const action=this.action$.getValue();if(null!=action){if(action instanceof selecting_action_SelectingAction){const relative=this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX,event.clientY);return this.diagramModel.getNodes().forEach(node=>{action.containsElement(node.getCoords(),this.diagramModel)?node.setSelected():node.setSelected(!1)}),this.diagramModel.getLinks().forEach(link=>{let allSelected=!0;link.getPoints().forEach(point=>{action.containsElement(point.getCoords(),this.diagramModel)?point.setSelected():(point.setSelected(!1),allSelected=!1)}),allSelected&&link.setSelected()}),action.mouseX2=relative.x,action.mouseY2=relative.y,this.fireAction(),void this.action$.next(action)}if(action instanceof move_items_action_MoveItemsAction){const coords={x:event.clientX-action.mouseX,y:event.clientY-action.mouseY},amountZoom=this.diagramModel.getZoomLevel()/100;action.selectionModels.forEach(selectionModel=>{if(selectionModel.magnet=void 0,selectionModel.model instanceof node_model_NodeModel||selectionModel.model instanceof point_model_PointModel&&!selectionModel.model.isConnectedToPort()){const newCoords={x:selectionModel.initialX+coords.x/amountZoom,y:selectionModel.initialY+coords.y/amountZoom},gridRelativeCoords=this.diagramModel.getGridPosition(newCoords);if(selectionModel.model instanceof point_model_PointModel&&this.portMagneticRadius){const portsMap=this.diagramModel.getAllPorts({filter:p=>p.getMagnetic()});for(const port of portsMap.values()){const portCoords=port.getCoords();if(Math.hypot(portCoords.x-newCoords.x,portCoords.y-newCoords.y)<=this.portMagneticRadius){const portCenter=this.diagramModel.getDiagramEngine().getPortCenter(port);return selectionModel.model.setCoords(portCenter),void(selectionModel.magnet=port)}}}selectionModel.model.setCoords(gridRelativeCoords),selectionModel.model instanceof node_model_NodeModel&&selectionModel.model.getPorts().forEach(port=>{const portCoords=this.diagramModel.getDiagramEngine().getPortCoords(port);port.updateCoords(portCoords)}),this.diagramModel.getDiagramEngine().getSmartRouting()&&setTimeout(()=>{this.diagramModel.getDiagramEngine().calculateRoutingMatrix()},1)}else if(selectionModel.model instanceof point_model_PointModel){const newCoords=this.diagramModel.getGridPosition({x:coords.x/amountZoom,y:coords.y/amountZoom});selectionModel.model.setCoords({x:selectionModel.initialX+newCoords.x,y:selectionModel.initialY+newCoords.y})}}),this.fireAction()}else action instanceof move_canvas_action_MoveCanvasAction&&this.allowCanvasTranslation&&(this.diagramModel.setOffset(action.initialOffsetX+(event.clientX-action.mouseX),action.initialOffsetY+(event.clientY-action.mouseY)),this.fireAction())}}onMouseDown(event){if(3===event.button)return;const selectedModel=this.getMouseElement(event);if(null===selectedModel)if(event.shiftKey){const relative=this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX,event.clientY);this.startFiringAction(new selecting_action_SelectingAction(relative.x,relative.y))}else this.diagramModel.clearSelection(),this.startFiringAction(new move_canvas_action_MoveCanvasAction(event.clientX,event.clientY,this.diagramModel));else if(selectedModel.model instanceof port_model_PortModel)if(!selectedModel.model.isLocked()&&selectedModel.model.getCanCreateLinks()){const relative=this.diagramModel.getDiagramEngine().getRelativeMousePoint(event),sourcePort=selectedModel.model,link=sourcePort.createLinkModel();link&&(link.setSourcePort(sourcePort),link.removeMiddlePoints(),link.getSourcePort()!==sourcePort&&link.setSourcePort(sourcePort),link.setTargetPort(null),link.getFirstPoint().setCoords(relative),link.getLastPoint().setCoords(relative),this.diagramModel.clearSelection(),link.getLastPoint().setSelected(),this.diagramModel.addLink(link),this.startFiringAction(new move_items_action_MoveItemsAction(event.clientX,event.clientY,this.diagramModel.getDiagramEngine())))}else this.diagramModel.clearSelection();else selectedModel.model instanceof point_model_PointModel&&selectedModel.model.isConnectedToPort()?this.diagramModel.clearSelection():(event.shiftKey||selectedModel.model.getSelected()||this.diagramModel.clearSelection(),selectedModel.model.setSelected(),this.startFiringAction(new move_items_action_MoveItemsAction(event.clientX,event.clientY,this.diagramModel.getDiagramEngine())));this.createMouseListeners()}onMouseWheel(event){if(!this.allowCanvasZoom)return;event.preventDefault(),event.stopPropagation();const currentZoomLevel=this.diagramModel.getZoomLevel(),oldZoomFactor=currentZoomLevel/100;let scrollDelta=this.inverseZoom?-event.deltaY:event.deltaY;if(event.ctrlKey&&scrollDelta%1!=0?scrollDelta/=3:scrollDelta/=60,currentZoomLevel+scrollDelta>10){const newZoomLvl=currentZoomLevel+scrollDelta;this.diagramModel.setZoomLevel(newZoomLvl)}const zoomFactor=this.diagramModel.getZoomLevel()/100,boundingRect=event.currentTarget.getBoundingClientRect(),clientWidth=boundingRect.width,clientHeight=boundingRect.height,widthDiff=clientWidth*zoomFactor-clientWidth*oldZoomFactor,heightDiff=clientHeight*zoomFactor-clientHeight*oldZoomFactor,clientX=event.clientX-boundingRect.left,clientY=event.clientY-boundingRect.top,xFactor=(clientX-this.diagramModel.getOffsetX())/oldZoomFactor/clientWidth,yFactor=(clientY-this.diagramModel.getOffsetY())/oldZoomFactor/clientHeight,updatedXOffset=this.diagramModel.getOffsetX()-widthDiff*xFactor,updatedYOffset=this.diagramModel.getOffsetY()-heightDiff*yFactor;this.diagramModel.setOffset(updatedXOffset,updatedYOffset)}setLayerStyles(x,y,zoom){const nodesLayer=this.getNodesLayer(),linksLayer=this.getLinksLayer(),value=`translate(${x}px, ${y}px) scale(${zoom/100})`;this.renderer.setStyle(nodesLayer,"transform",value),this.renderer.setStyle(linksLayer,"transform",value)}initNodes(){this.nodes$=this.diagramModel.selectNodes(),this.diagramModel.getDiagramEngine().setCanvas(this.canvas.nativeElement),this.diagramModel.getDiagramEngine().setSmartRoutingStatus(this.smartRouting),this.diagramModel.setMaxZoomIn(this.maxZoomIn),this.diagramModel.setMaxZoomOut(this.maxZoomOut),this.nodes$.pipe(Object(takeUntil.a)(this.destroyed$)).subscribe(nodes=>{this.nodesRendered$.next(!1);for(const node of nodes.values())node.getPainted()||(this.diagramModel.getDiagramEngine().generateWidgetForNode(node,this.nodesLayer),this.cdRef.detectChanges());this.nodesRendered$.next(!0)})}initLinks(){this.links$=this.diagramModel.selectLinks(),Object(combineLatest.b)([this.nodesRendered$,this.links$]).pipe(Object(filter.a)(([nodesRendered])=>!!nodesRendered),Object(takeUntil.a)(this.destroyed$)).subscribe(([,links])=>{for(const link of links.values())if(!link.getPainted()&&link.getSourcePort().getPainted()){if(null!==link.getSourcePort()){const portCenter=this.diagramModel.getDiagramEngine().getPortCenter(link.getSourcePort());link.getPoints()[0].setCoords(portCenter);const portCoords=this.diagramModel.getDiagramEngine().getPortCoords(link.getSourcePort());link.getSourcePort().updateCoords(portCoords)}if(null!==link.getTargetPort()){const portCenter=this.diagramModel.getDiagramEngine().getPortCenter(link.getTargetPort());link.getPoints()[link.getPoints().length-1].setCoords(portCenter);const portCoords=this.diagramModel.getDiagramEngine().getPortCoords(link.getTargetPort());link.getTargetPort().updateCoords(portCoords)}this.diagramModel.getDiagramEngine().generateWidgetForLink(link,this.linksLayer),this.cdRef.detectChanges()}})}initSubs(){Object(combineLatest.b)([this.diagramModel.selectOffsetX(),this.diagramModel.selectOffsetY(),this.diagramModel.selectZoomLevel()]).pipe(Object(tap.a)(([x,y,zoom])=>this.setLayerStyles(x,y,zoom)),Object(takeUntil.a)(this.destroyed$)).subscribe()}getNodesLayer(){return this.host.querySelector(".ngdx-nodes-layer")}getLinksLayer(){return this.host.querySelector(".ngdx-links-layer")}createMouseListeners(){const mouseUp$=Object(fromEvent.a)(this.document,"mouseup").pipe(Object(tap.a)(e=>this.onMouseUp(e)),Object(take.a)(1)),mouseMove$=Object(fromEvent.a)(this.document,"mousemove").pipe(Object(tap.a)(e=>this.onMouseMove(e)),Object(takeUntil.a)(mouseUp$));Object(merge.a)(mouseMove$,mouseUp$).subscribe()}};Object(tslib_es6.a)([Object(core.Input)("model"),Object(tslib_es6.b)("design:type","function"==typeof(_a=void 0!==diagram_model_DiagramModel&&diagram_model_DiagramModel)?_a:Object)],diagram_component_NgxDiagramComponent.prototype,"diagramModel",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"allowCanvasZoom",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"allowCanvasTranslation",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"inverseZoom",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"allowLooseLinks",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Number)],diagram_component_NgxDiagramComponent.prototype,"maxZoomOut",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Number)],diagram_component_NgxDiagramComponent.prototype,"maxZoomIn",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"portMagneticRadius",void 0),Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"smartRouting",void 0),Object(tslib_es6.a)([Object(core.Output)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"actionStartedFiring",void 0),Object(tslib_es6.a)([Object(core.Output)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"actionStillFiring",void 0),Object(tslib_es6.a)([Object(core.Output)(),Object(tslib_es6.b)("design:type",Object)],diagram_component_NgxDiagramComponent.prototype,"actionStoppedFiring",void 0),Object(tslib_es6.a)([Object(core.ViewChild)("nodesLayer",{read:core.ViewContainerRef}),Object(tslib_es6.b)("design:type","function"==typeof(_b=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?_b:Object)],diagram_component_NgxDiagramComponent.prototype,"nodesLayer",void 0),Object(tslib_es6.a)([Object(core.ViewChild)("linksLayer",{read:core.ViewContainerRef}),Object(tslib_es6.b)("design:type","function"==typeof(_c=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?_c:Object)],diagram_component_NgxDiagramComponent.prototype,"linksLayer",void 0),Object(tslib_es6.a)([Object(core.ViewChild)("canvas",{read:core.ElementRef}),Object(tslib_es6.b)("design:type","function"==typeof(_d=void 0!==core.ElementRef&&core.ElementRef)?_d:Object)],diagram_component_NgxDiagramComponent.prototype,"canvas",void 0),Object(tslib_es6.a)([OutsideZone,Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_e="undefined"!=typeof MouseEvent&&MouseEvent)?_e:Object]),Object(tslib_es6.b)("design:returntype",void 0)],diagram_component_NgxDiagramComponent.prototype,"onMouseUp",null),Object(tslib_es6.a)([OutsideZone,Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_f="undefined"!=typeof MouseEvent&&MouseEvent)?_f:Object]),Object(tslib_es6.b)("design:returntype",void 0)],diagram_component_NgxDiagramComponent.prototype,"onMouseMove",null),Object(tslib_es6.a)([OutsideZone,Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_g="undefined"!=typeof MouseEvent&&MouseEvent)?_g:Object]),Object(tslib_es6.b)("design:returntype",void 0)],diagram_component_NgxDiagramComponent.prototype,"onMouseDown",null),Object(tslib_es6.a)([OutsideZone,Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(_h="undefined"!=typeof WheelEvent&&WheelEvent)?_h:Object]),Object(tslib_es6.b)("design:returntype",void 0)],diagram_component_NgxDiagramComponent.prototype,"onMouseWheel",null),Object(tslib_es6.a)([OutsideZone,Object(tslib_es6.b)("design:type",Function),Object(tslib_es6.b)("design:paramtypes",[Number,Number,Number]),Object(tslib_es6.b)("design:returntype",void 0)],diagram_component_NgxDiagramComponent.prototype,"setLayerStyles",null),diagram_component_NgxDiagramComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"ngdx-diagram",template:(__webpack_require__(297).default||__webpack_require__(297)).length?__webpack_require__(297).default||__webpack_require__(297):"",styles:[(__webpack_require__(298).default||__webpack_require__(298)).length?__webpack_require__(298).default||__webpack_require__(298):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),Object(tslib_es6.c)(0,Object(core.Inject)(common.b)),Object(tslib_es6.b)("design:paramtypes",[Object,"function"==typeof(_j=void 0!==core.NgZone&&core.NgZone)?_j:Object,"function"==typeof(_k=void 0!==core.Renderer2&&core.Renderer2)?_k:Object,"function"==typeof(_l=void 0!==core.ChangeDetectorRef&&core.ChangeDetectorRef)?_l:Object,"function"==typeof(_m=void 0!==core.ElementRef&&core.ElementRef)?_m:Object])],diagram_component_NgxDiagramComponent);var delay=__webpack_require__(541);class AbstractFactory{constructor(type){this._type=type}get type(){return this._type}}class label_factory_AbstractLabelFactory extends AbstractFactory{}class label_model_LabelModel extends base_model_BaseModel{constructor(type,id,logPrefix="[Label]"){super(type,id,logPrefix),this.coords$=createValueState({x:0,y:0},this.entityPipe("coords")),this.rotation$=createValueState(0,this.entityPipe("rotation"))}serialize(){return Object.assign(Object.assign({},super.serialize()),{type:this.getType(),rotation:this.getRotation(),coords:this.getCoords()})}getRotation(){return this.rotation$.value}getCoords(){return this.coords$.value}destroy(){super.destroy()}setRotation(angle){this.rotation$.set(angle).emit()}selectRotation(){return this.rotation$.value$}setCoords(newCoords){this.coords$.set(Object.assign(Object.assign({},this.coords$.value),newCoords)).emit()}selectCoords(){return this.coords$.value$}}class default_label_model_DefaultLabelModel extends label_model_LabelModel{constructor(label="NO LABEL",type="default",id,logPrefix="[DefaultLabel]"){super(type,id,logPrefix),this.label$=createValueState("",this.entityPipe("label")),this.setLabel(label)}setLabel(label){this.label$.set(label).emit()}getLabel(){return this.label$.value}selectLabel(){return this.label$.value$}}let default_label_component_DefaultLabelComponent=class DefaultLabelComponent extends default_label_model_DefaultLabelModel{constructor(){super("ngdx-default-label")}};default_label_component_DefaultLabelComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"ngdx-default-label",template:(__webpack_require__(299).default||__webpack_require__(299)).length?__webpack_require__(299).default||__webpack_require__(299):"",styles:[(__webpack_require__(300).default||__webpack_require__(300)).length?__webpack_require__(300).default||__webpack_require__(300):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),Object(tslib_es6.b)("design:paramtypes",[])],default_label_component_DefaultLabelComponent);class default_label_factory_DefaultLabelFactory extends label_factory_AbstractLabelFactory{constructor(resolver,renderer){super("default"),this.resolver=resolver,this.renderer=renderer}generateWidget(label,labelHost){const componentRef=labelHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.setAttribute(rootNode,"data-labelid",label.id),label.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),Object.entries(label).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef.instance.setPainted(!0),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(default_label_component_DefaultLabelComponent)}getNewInstance(){return new default_label_model_DefaultLabelModel}}class link_factory_AbstractLinkFactory extends AbstractFactory{}class default_link_model_DefaultLinkModel extends link_model_LinkModel{constructor({type:type="default",id:id,logPrefix:logPrefix="[DefaultLink]"}={}){super(type,id,logPrefix),this.width$=createValueState(3,this.entityPipe("width")),this.color$=createValueState("rgba(255, 255, 255, 0.5)",this.entityPipe("color")),this.curvyness$=createValueState(50,this.entityPipe("curvyness"))}setWidth(width){this.width$.set(width).emit()}setColor(color){this.color$.set(color).emit()}selectWidth(){return this.width$.value$}selectColor(){return this.color$.value$}setCurvyness(curvyness){this.curvyness$.set(curvyness).emit()}get color(){return this.color$.value}get width(){return this.width$.value}get curvyness(){return this.curvyness$.value}}var default_link_component_a,default_link_component_b;let default_link_component_DefaultLinkComponent=class DefaultLinkComponent extends default_link_model_DefaultLinkModel{constructor(cdRef){super({type:"ngdx-default-link"}),this.cdRef=cdRef,this.path$=createValueState(null,this.entityPipe("path")),this.points$=createValueState([],this.entityPipe("points"))}trackByPoints(i,point){return point.id}ngOnInit(){this.diagramEngine.getSmartRouting()&&(this.pathFinding=this.diagramEngine.getPathfinding())}ngAfterViewInit(){const firstPCoords$=this.getFirstPoint().selectCoords(),lastPCoords$=this.getLastPoint().selectCoords();Object(combineLatest.b)([firstPCoords$,lastPCoords$]).pipe(Object(takeUntil.a)(this.onEntityDestroy())).subscribe(([firstPCoords,lastPCoords])=>{const points=[firstPCoords,lastPCoords];if(this.diagramEngine.getSmartRouting()){const directPathCoords=this.pathFinding.calculateDirectPath(firstPCoords,lastPCoords),routingMatrix=this.diagramEngine.getRoutingMatrix(),smartLink=this.pathFinding.calculateLinkStartEndCoords(routingMatrix,directPathCoords);if(smartLink){const{start:start,end:end,pathToStart:pathToStart,pathToEnd:pathToEnd}=smartLink,smartPath=function generateDynamicPath(pathCoords){let path=path_default()();return path=path.moveto(10*pathCoords[0][0],10*pathCoords[0][1]),pathCoords.slice(1).forEach(coords=>{path=path.lineto(10*coords[0],10*coords[1])}),path.print()}(this.pathFinding.calculateDynamicPath(routingMatrix,start,end,pathToStart,pathToEnd));this.path$.set(smartPath).emit()}}else{const xOrY=Math.abs(firstPCoords.x-lastPCoords.x)>Math.abs(firstPCoords.y-lastPCoords.y)?"x":"y";let isStraight=!1;Math.abs(points[0][xOrY]-points[1][xOrY])<50&&(isStraight=!0);const path=generateCurvePath(firstPCoords,lastPCoords,isStraight?0:this.curvyness);this.path$.set(path).emit()}const label=this.getLabel();label&&label.setCoords(this.calcCenterOfPath(firstPCoords,lastPCoords)),this.cdRef.detectChanges()}),this.selectLabel().pipe(Object(filter.a)(Boolean)).subscribe(label=>{this.diagramEngine.generateWidgetForLabel(label,this.labelLayer),this.cdRef.detectChanges()})}calcLabelIncline(firstPoint,secondPoint){const dy=secondPoint.y-firstPoint.y,dx=secondPoint.x-firstPoint.x;if(0===dx)return 0;let inclineAngel=180*Math.atan(dy/dx)/Math.PI;return inclineAngel<0&&(inclineAngel+=180),inclineAngel}calcCenterOfPath(firstPoint,secondPoint){return{x:(firstPoint.x+secondPoint.x)/2+20,y:(firstPoint.y+secondPoint.y)/2+20}}selectPath(){return this.path$.value$}};Object(tslib_es6.a)([Object(core.ViewChild)("labelLayer",{read:core.ViewContainerRef,static:!0}),Object(tslib_es6.b)("design:type","function"==typeof(default_link_component_a=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?default_link_component_a:Object)],default_link_component_DefaultLinkComponent.prototype,"labelLayer",void 0),default_link_component_DefaultLinkComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"ngdx-default-link",template:(__webpack_require__(301).default||__webpack_require__(301)).length?__webpack_require__(301).default||__webpack_require__(301):"",styles:[(__webpack_require__(302).default||__webpack_require__(302)).length?__webpack_require__(302).default||__webpack_require__(302):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(default_link_component_b=void 0!==core.ChangeDetectorRef&&core.ChangeDetectorRef)?default_link_component_b:Object])],default_link_component_DefaultLinkComponent);class default_link_factory_DefaultLinkFactory extends link_factory_AbstractLinkFactory{constructor(resolver,renderer){super("default"),this.resolver=resolver,this.renderer=renderer}generateWidget(diagramEngine,link,linksHost){const componentRef=linksHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.addClass(rootNode,"label"),this.renderer.setAttribute(rootNode,"data-linkid",link.id),link.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),Object.entries(link).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef.instance.diagramEngine=diagramEngine,componentRef.instance.setPainted(!0),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(default_link_component_DefaultLinkComponent)}getNewInstance(){return new default_link_model_DefaultLinkModel}}var default_node_component_a,switchMap=__webpack_require__(181);class default_port_model_DefaultPortModel extends port_model_PortModel{constructor({isInput:isInput=!0,name:name="port",type:type="default",id:id=null,label:label=null,linkType:linkType="default",maximumLinks:maximumLinks=null}={}){super(name,type,id,null,linkType),this.in=isInput,this.label=label||name,this.in?this.setCanCreateLinks(!1):(this.setMaximumLinks(maximumLinks),this.setMagnetic(!1))}link(port){if(super.getCanCreateLinks()){const link=new default_link_model_DefaultLinkModel({type:this.getLinkType()});return link.setSourcePort(this),link.setTargetPort(port),link}return null}createLinkModel(){if(super.getCanCreateLinks())return new default_link_model_DefaultLinkModel({type:this.getLinkType()})}canLinkToPort(port){return!(port instanceof default_port_model_DefaultPortModel)||this.in!==port.in}}class default_node_model_DefaultNodeModel extends node_model_NodeModel{constructor({name:name="Untitled",type:type="default",color:color="rgb(0, 192, 255)",id:id}={}){super(type,id),this.name=name,this.color=color,this.height$=this.selectHeight(),this.width$=this.selectWidth()}addInPort({name:name,type:type="default",id:id,linkType:linkType="default"}){const port=new default_port_model_DefaultPortModel({isInput:!0,name:name,type:type,id:id,label:null,linkType:linkType});return this.addPort(port),port}addOutPort({name:name,type:type="default",id:id,linkType:linkType="default",maximumLinks:maximumLinks=null}){const port=new default_port_model_DefaultPortModel({isInput:!1,name:name,type:type,id:id,label:null,linkType:linkType,maximumLinks:maximumLinks});return this.addPort(port),port}}let default_node_component_DefaultNodeComponent=class DefaultNodeComponent extends default_node_model_DefaultNodeModel{constructor(){super({type:"ngdx-default-node"})}ngOnInit(){this.paintChanges().pipe(Object(filter.a)(paintedE=>paintedE.isPainted),Object(switchMap.a)(()=>this.selectPorts())).subscribe(ports=>{ports.forEach(port=>{port.getPainted()||this.generatePort(port)})})}generatePort(port){const diagramEngine=this.getDiagramEngine();diagramEngine.generateWidgetForPort(port,this.portsLayer),port.paintChanges().subscribe(paintedEvent=>{paintedEvent.isPainted&&port.updateCoords(diagramEngine.getPortCoords(port))})}};Object(tslib_es6.a)([Object(core.ViewChild)("portsLayer",{read:core.ViewContainerRef,static:!0}),Object(tslib_es6.b)("design:type","function"==typeof(default_node_component_a=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?default_node_component_a:Object)],default_node_component_DefaultNodeComponent.prototype,"portsLayer",void 0),default_node_component_DefaultNodeComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"ngdx-default-node",template:(__webpack_require__(303).default||__webpack_require__(303)).length?__webpack_require__(303).default||__webpack_require__(303):"",styles:[(__webpack_require__(304).default||__webpack_require__(304)).length?__webpack_require__(304).default||__webpack_require__(304):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),Object(tslib_es6.b)("design:paramtypes",[])],default_node_component_DefaultNodeComponent);class node_factory_AbstractNodeFactory extends AbstractFactory{}class default_node_factory_DefaultNodeFactory extends node_factory_AbstractNodeFactory{constructor(resolver,renderer){super("default"),this.resolver=resolver,this.renderer=renderer}generateWidget(diagramEngine,node,nodesHost){const componentRef=nodesHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setStyle(rootNode,"position","absolute"),this.renderer.setStyle(rootNode,"display","block"),this.renderer.setAttribute(rootNode,"data-nodeid",node.id),node.selectCoords().subscribe(({x:x,y:y})=>{this.renderer.setStyle(rootNode,"left",x+"px"),this.renderer.setStyle(rootNode,"top",y+"px")}),node.selectionChanges().subscribe(e=>{e.isSelected?this.renderer.addClass(rootNode,"selected"):this.renderer.removeClass(rootNode,"selected")}),node.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),Object.entries(node).forEach(([key,value])=>{componentRef.instance[key]=value}),componentRef.instance.setDiagramEngine(diagramEngine),componentRef.instance.setPainted(!0),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(default_node_component_DefaultNodeComponent)}getNewInstance(initialConfig){return new default_node_model_DefaultNodeModel(initialConfig)}}class port_factory_AbstractPortFactory extends AbstractFactory{}let default_port_component_DefaultPortComponent=class DefaultPortComponent extends default_port_model_DefaultPortModel{constructor(){super()}};default_port_component_DefaultPortComponent=Object(tslib_es6.a)([Object(core.Component)({selector:"ngdx-default-port",template:(__webpack_require__(305).default||__webpack_require__(305)).length?__webpack_require__(305).default||__webpack_require__(305):"",styles:[(__webpack_require__(306).default||__webpack_require__(306)).length?__webpack_require__(306).default||__webpack_require__(306):""],changeDetection:core.ChangeDetectionStrategy.OnPush}),Object(tslib_es6.b)("design:paramtypes",[])],default_port_component_DefaultPortComponent);class default_port_factory_DefaultPortFactory extends port_factory_AbstractPortFactory{constructor(resolver,renderer){super("default"),this.resolver=resolver,this.renderer=renderer}generateWidget(port,portsHost){const componentRef=portsHost.createComponent(this.getRecipe()),rootNode=componentRef.location.nativeElement;return this.renderer.setAttribute(rootNode,"data-portid",port.id),this.renderer.setAttribute(rootNode,"data-name",port.getName()),port.in?this.renderer.addClass(rootNode,"in"):this.renderer.addClass(rootNode,"out"),Object.entries(port).forEach(([key,value])=>{componentRef.instance[key]=value}),port.onEntityDestroy().subscribe(()=>{componentRef.destroy()}),componentRef.instance.setPainted(!0),componentRef}getRecipe(){return this.resolver.resolveComponentFactory(default_port_component_DefaultPortComponent)}getNewInstance(initialConfig){return new default_port_model_DefaultPortModel(Object.assign({isInput:!0,name:"unknown"},initialConfig))}}var template_var_directive_a,template_var_directive_b;class TemplateVarContext{}let TemplateVarDirective=class TemplateVarDirective{constructor(vcRef,templateRef){this.vcRef=vcRef,this.templateRef=templateRef,this.context=new TemplateVarContext}set templateVar(context){this.context.$implicit=this.context.templateVar=context,this.updateView()}updateView(){this.view?this.view.markForCheck():(this.vcRef.clear(),this.view=this.vcRef.createEmbeddedView(this.templateRef,this.context))}};Object(tslib_es6.a)([Object(core.Input)(),Object(tslib_es6.b)("design:type",Object),Object(tslib_es6.b)("design:paramtypes",[Object])],TemplateVarDirective.prototype,"templateVar",null),TemplateVarDirective=Object(tslib_es6.a)([Object(core.Directive)({selector:"[templateVar]"}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(template_var_directive_a=void 0!==core.ViewContainerRef&&core.ViewContainerRef)?template_var_directive_a:Object,"function"==typeof(template_var_directive_b=void 0!==core.TemplateRef&&core.TemplateRef)?template_var_directive_b:Object])],TemplateVarDirective);let NgxDiagramsModule=class NgxDiagramsModule{};var engine_service_a,engine_service_b;NgxDiagramsModule=Object(tslib_es6.a)([Object(core.NgModule)({declarations:[diagram_component_NgxDiagramComponent,TemplateVarDirective],imports:[common.a],exports:[diagram_component_NgxDiagramComponent]})],NgxDiagramsModule);let engine_service_DiagramEngine=class DiagramEngine{constructor(resolver,rendererFactory){this.resolver=resolver,this.rendererFactory=rendererFactory,this.nodeFactories=new Map,this.labelFactories=new Map,this.linkFactories=new Map,this.portFactories=new Map,this.canvas$=createValueState(null),this.canvasMatrix=[],this.routingMatrix=[],this.hAdjustmentFactor=0,this.vAdjustmentFactor=0,this.markMatrixPoint=(matrix,x,y)=>{void 0!==matrix[y]&&void 0!==matrix[y][x]&&(matrix[y][x]=1)},this._renderer=this.rendererFactory.createRenderer(null,null)}createDiagram(){return this.diagramModel=new diagram_model_DiagramModel(this),this.diagramModel}registerDefaultFactories(){this.registerNodeFactory(new default_node_factory_DefaultNodeFactory(this.resolver,this._renderer)),this.registerPortFactory(new default_port_factory_DefaultPortFactory(this.resolver,this._renderer)),this.registerLinkFactory(new default_link_factory_DefaultLinkFactory(this.resolver,this._renderer)),this.registerLabelFactory(new default_label_factory_DefaultLabelFactory(this.resolver,this._renderer))}registerLabelFactory(labelFactory){this.labelFactories.set(labelFactory.type,labelFactory)}getLabelFactories(){return this.labelFactories}getLabelFactory(type){if(this.labelFactories.has(type))return this.labelFactories.get(type);throw new Error(`cannot find factory for node of type: [${type}]`)}getFactoryForLabel(label){return this.getLabelFactory(label.getType())}generateWidgetForLabel(label,labelHost){const labelFactory=this.getFactoryForLabel(label);if(!labelFactory)throw new Error("Cannot find widget factory for node: "+label.getType());return labelFactory.generateWidget(label,labelHost)}registerNodeFactory(nodeFactory){this.nodeFactories.set(nodeFactory.type,nodeFactory)}getNodeFactories(){return this.nodeFactories}getNodeFactory(type){if(this.nodeFactories.has(type))return this.nodeFactories.get(type);throw new Error(`cannot find factory for node of type: [${type}]`)}getFactoryForNode(node){return this.getNodeFactory(node.getType())}generateWidgetForNode(node,nodesHost){const nodeFactory=this.getFactoryForNode(node);if(!nodeFactory)throw new Error("Cannot find widget factory for node: "+node.getType());return nodeFactory.generateWidget(this,node,nodesHost)}registerPortFactory(factory){this.portFactories.set(factory.type,factory)}getPortFactories(){return this.portFactories}getPortFactory(type){if(this.portFactories.has(type))return this.portFactories.get(type);throw new Error(`cannot find factory for port of type: [${type}]`)}getFactoryForPort(port){return this.getPortFactory(port.getType())}generateWidgetForPort(port,portsHost){const portFactory=this.getFactoryForPort(port);if(!portFactory)throw new Error("Cannot find widget factory for port: "+port.getType());return portFactory.generateWidget(port,portsHost)}getLinkFactories(){return this.linkFactories}registerLinkFactory(factory){this.linkFactories.set(factory.type,factory)}getLinkFactory(type){if(this.linkFactories.has(type))return this.linkFactories.get(type);throw new Error(`cannot find factory for link of type: [${type}]`)}getFactoryForLink(link){return this.getLinkFactory(link.getType())}generateWidgetForLink(link,linksHost){const linkFactory=this.getFactoryForLink(link);if(!linkFactory)throw new Error("Cannot find link factory for link: "+link.getType());return linkFactory.generateWidget(this,link,linksHost)}getNodeElement(node){const selector=this.canvas$.value.querySelector(`[data-nodeid="${node.id}"]`);if(null===selector)throw new Error("Cannot find Node element with node id: ["+node.id+"]");return selector}getNodePortElement(port){const selector=this.canvas$.value.querySelector(`[data-nodeid="${port.getParent().id}"] [data-portid="${port.id}"]`);if(null===selector)throw new Error("Cannot find Node Port element with node id: ["+port.getParent().id+"] and port id: ["+port.id+"]");return selector}getPortCenter(port){const sourceElement=this.getNodePortElement(port),sourceRect=sourceElement.getBoundingClientRect(),rel=this.getRelativePoint(sourceRect.left,sourceRect.top);return{x:sourceElement.offsetWidth/2+(rel.x-this.diagramModel.getOffsetX())/(this.diagramModel.getZoomLevel()/100),y:sourceElement.offsetHeight/2+(rel.y-this.diagramModel.getOffsetY())/(this.diagramModel.getZoomLevel()/100)}}getPortCoords(port){const sourceRect=this.getNodePortElement(port).getBoundingClientRect(),canvasRect=this.canvas$.value.getBoundingClientRect();return{x:(sourceRect.x-this.diagramModel.getOffsetX())/(this.diagramModel.getZoomLevel()/100)-canvasRect.left,y:(sourceRect.y-this.diagramModel.getOffsetY())/(this.diagramModel.getZoomLevel()/100)-canvasRect.top,width:sourceRect.width,height:sourceRect.height}}getNodeDimensions(node){if(!this.canvas$.value)return{width:0,height:0};const nodeRect=this.getNodeElement(node).getBoundingClientRect();return{width:nodeRect.width,height:nodeRect.height}}setCanvas(canvas){this.canvas$.set(canvas).emit()}getRelativeMousePoint(event){const point=this.getRelativePoint(event.clientX,event.clientY);return{x:(point.x-this.diagramModel.getOffsetX())/(this.diagramModel.getZoomLevel()/100),y:(point.y-this.diagramModel.getOffsetY())/(this.diagramModel.getZoomLevel()/100)}}getRelativePoint(x,y){const canvasRect=this.canvas$.value.getBoundingClientRect();return{x:x-canvasRect.left,y:y-canvasRect.top}}getDiagramModel(){return this.diagramModel}isModelLocked(model){return!!this.diagramModel.getLocked()||model.getLocked()}zoomToFit(additionalZoomFactor=.005){this.canvas$.value$.pipe(Object(filter.a)(Boolean),Object(take.a)(1),Object(delay.a)(0)).subscribe(canvas=>{const xFactor=canvas.clientWidth/canvas.scrollWidth,yFactor=canvas.clientHeight/canvas.scrollHeight,zoomFactor=xFactor<yFactor?xFactor:yFactor;let newZoomLvl=this.diagramModel.getZoomLevel()*(zoomFactor-additionalZoomFactor);const maxZoomOut=this.diagramModel.getMaxZoomOut();maxZoomOut&&newZoomLvl<maxZoomOut&&(newZoomLvl=maxZoomOut),this.diagramModel.setZoomLevel(newZoomLvl),this.diagramModel.setOffset(0,0)})}setSmartRoutingStatus(status){status&&!this.pathFinding?this.pathFinding=new smart_routing_plugin_PathFinding(this):this.pathFinding=null,this.smartRouting=status}getPathfinding(){return this.pathFinding}calculateCanvasMatrix(){const{width:canvasWidth,hAdjustmentFactor:hAdjustmentFactor,height:canvasHeight,vAdjustmentFactor:vAdjustmentFactor}=this.calculateMatrixDimensions();this.hAdjustmentFactor=hAdjustmentFactor,this.vAdjustmentFactor=vAdjustmentFactor;const matrixWidth=Math.ceil(canvasWidth/10),matrixHeight=Math.ceil(canvasHeight/10);this.canvasMatrix=Array.from({length:matrixHeight},(_,i)=>i+1).map(()=>new Array(matrixWidth).fill(0))}calculateMatrixDimensions(){const allNodesCoords=this.diagramModel.getNodesArray().map(item=>({x:item.getCoords().x,width:item.getWidth(),y:item.getCoords().y,height:item.getHeight()})),allLinks=this.diagramModel.getLinksArray(),allPortsCoords=allLinks.flatMap(link=>[link.getSourcePort(),link.getTargetPort()]).filter(port=>null!==port).map(item=>({x:item.getX(),width:item.getWidth(),y:item.getY(),height:item.getHeight()})),allPointsCoords=allLinks.flatMap(link=>link.getPoints()).map(item=>({x:item.getCoords().x,width:0,y:item.getCoords().y,height:0})),canvas=this.canvas$.value,allElements=allNodesCoords.concat(allPortsCoords,allPointsCoords),minX=10*Math.floor(Math.min(allElements.reduce((a,b)=>a.x<=b.x?a:b).x,0)/10),maxXElement=allElements.reduce((a,b)=>a.x+a.width>=b.x+b.width?a:b),maxX=Math.max(maxXElement.x+maxXElement.width,canvas.offsetWidth),minY=10*Math.floor(Math.min(allElements.reduce((a,b)=>a.y<=b.y?a:b).y,0)/10),maxYElement=allElements.reduce((a,b)=>a.y+a.height>=b.y+b.height?a:b),maxY=Math.max(maxYElement.y+maxYElement.height,canvas.offsetWidth),width=Math.ceil(Math.abs(minX)+maxX),height=Math.ceil(Math.abs(minY)+maxY);return{width:width,hAdjustmentFactor:Math.abs(minX)/10+1,height:height,vAdjustmentFactor:Math.abs(minY)/10+1}}getCanvasMatrix(){return 0===this.canvasMatrix.length&&this.calculateCanvasMatrix(),this.canvasMatrix}translateRoutingX(x,reverse=!1){return x+this.hAdjustmentFactor*(reverse?-1:1)}translateRoutingY(y,reverse=!1){return y+this.vAdjustmentFactor*(reverse?-1:1)}getRoutingMatrix(){return 0===this.routingMatrix.length&&this.calculateRoutingMatrix(),this.routingMatrix}calculateRoutingMatrix(){const matrix=this.getCanvasMatrix().map(item=>item.slice(0));this.markNodes(matrix),this.markPorts(matrix),this.routingMatrix=matrix}getSmartRouting(){return!!this.smartRouting}markNodes(matrix){this.diagramModel.getNodes().forEach(node=>{const startX=Math.floor(node.getCoords().x/10),endX=Math.ceil((node.getCoords().x+node.getWidth())/10),startY=Math.floor(node.getCoords().y/10),endY=Math.ceil((node.getCoords().y+node.getHeight())/10);for(let x=startX-1;x<=endX+1;x++)for(let y=startY-1;y<endY+1;y++)this.markMatrixPoint(matrix,this.translateRoutingX(x),this.translateRoutingY(y))})}markPorts(matrix){this.diagramModel.getLinksArray().flatMap(link=>[link.getSourcePort(),link.getTargetPort()]).filter(port=>null!==port).forEach(port=>{const startX=Math.floor(port.getX()/10),endX=Math.ceil((port.getX()+port.getWidth())/10),startY=Math.floor(port.getY()/10),endY=Math.ceil((port.getY()+port.getHeight())/10);for(let x=startX-1;x<=endX+1;x++)for(let y=startY-1;y<endY+1;y++)this.markMatrixPoint(matrix,this.translateRoutingX(x),this.translateRoutingY(y))})}};engine_service_DiagramEngine=Object(tslib_es6.a)([Object(core.Injectable)({providedIn:NgxDiagramsModule}),Object(tslib_es6.b)("design:paramtypes",["function"==typeof(engine_service_a=void 0!==core.ComponentFactoryResolver&&core.ComponentFactoryResolver)?engine_service_a:Object,"function"==typeof(engine_service_b=void 0!==core.RendererFactory2&&core.RendererFactory2)?engine_service_b:Object])],engine_service_DiagramEngine);let DefaultLinkModule=class DefaultLinkModule{};DefaultLinkModule=Object(tslib_es6.a)([Object(core.NgModule)({declarations:[default_link_component_DefaultLinkComponent],imports:[common.a],exports:[default_link_component_DefaultLinkComponent],entryComponents:[default_link_component_DefaultLinkComponent]})],DefaultLinkModule);let DefaultNodeModule=class DefaultNodeModule{};DefaultNodeModule=Object(tslib_es6.a)([Object(core.NgModule)({declarations:[default_node_component_DefaultNodeComponent],imports:[common.a],exports:[default_node_component_DefaultNodeComponent],entryComponents:[default_node_component_DefaultNodeComponent]})],DefaultNodeModule);let DefaultPortModule=class DefaultPortModule{};DefaultPortModule=Object(tslib_es6.a)([Object(core.NgModule)({declarations:[default_port_component_DefaultPortComponent],imports:[common.a],exports:[default_port_component_DefaultPortComponent],entryComponents:[default_port_component_DefaultPortComponent]})],DefaultPortModule);let DefaultLabelModule=class DefaultLabelModule{};DefaultLabelModule=Object(tslib_es6.a)([Object(core.NgModule)({declarations:[default_label_component_DefaultLabelComponent],imports:[common.a],exports:[default_label_component_DefaultLabelComponent],entryComponents:[default_label_component_DefaultLabelComponent]})],DefaultLabelModule);var dagre=__webpack_require__(440);let dagre_engine_plugin_DagreEngine=class DagreEngine{instantiate(){try{this.g=new dagre.graphlib.Graph({multigraph:!0})}catch(error){console.warn("`dagre` packages isn't installed, please install it before using the DagreEngine plugin")}}redistribute(model,options={}){this.instantiate(),this.g.setGraph(options.graph||{}),this.g.setDefaultEdgeLabel(()=>({}));const processedlinks={};model.getNodes().forEach(node=>{this.g.setNode(node.id,{width:node.getWidth(),height:node.getHeight()})}),model.getLinks().forEach(link=>{link.getSourcePort()&&link.getTargetPort()&&(processedlinks[link.id]=!0,this.g.setEdge({v:link.getSourcePort().getNode().id,w:link.getTargetPort().getNode().id,name:link.id}))}),dagre.layout(this.g,options.layout),this.g.nodes().forEach(v=>{const{x:x,y:y}=this.g.node(v);model.getNode(v).setCoords({x:x,y:y})}),options.includeLinks&&this.g.edges().forEach(e=>{const edge=this.g.edge(e),link=model.getLink(e.name),points=[link.getFirstPoint()];for(let i=1;i<edge.points.length-2;i++)points.push(new point_model_PointModel(link,{x:edge.points[i].x,y:edge.points[i].y}));link.setPoints(points.concat(link.getLastPoint()))})}};dagre_engine_plugin_DagreEngine=Object(tslib_es6.a)([Object(core.Injectable)()],dagre_engine_plugin_DagreEngine)},539:function(module,exports){function webpackEmptyAsyncContext(req){return Promise.resolve().then((function(){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=function(){return[]},webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,module.exports=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id=539},60:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_exports__.default=".demo-diagram {\n  display: flex;\n  height: 100%;\n  min-height: 100vh;\n  background-color: #3c3c3c;\n  background-image: linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent);\n  background-size: 50px 50px;\n}\n\n.action-bar {\n  position: relative;\n  width: 100%;\n  height: 40px;\n  z-index: 2000;\n  background-color: white;\n  display: flex;\n  align-items: center;\n}\n\n.action-bar * {\n  margin: 0 10px;\n}"},640:function(module){module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"Coords","id":"interface-Coords-c3272ec5e6b06eb4f79a295fb8cd5bbf","file":"libs/ngx-diagrams/src/lib/interfaces/coords.interface.ts","type":"interface","sourceCode":"export interface Coords {\\n  x: number;\\n  y: number;\\n}\\n","properties":[{"name":"x","type":"number","optional":false,"description":"","line":2},{"name":"y","type":"number","optional":false,"description":"","line":3}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"DagreEngineOptions","id":"interface-DagreEngineOptions-12e90174452d08b72a5dc441ada0705c","file":"libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport * as dagre from \'dagre\';\\nimport { EdgeConfig, GraphLabel, NodeConfig } from \'dagre\';\\nimport { DiagramModel, PointModel } from \'../models\';\\n\\nexport interface DagreEngineOptions {\\n  graph?: GraphLabel;\\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\\n  /**\\n   * Will also layout links\\n   */\\n  includeLinks?: boolean;\\n}\\n\\n@Injectable()\\nexport class DagreEngine {\\n  g: dagre.graphlib.Graph;\\n\\n  instantiate() {\\n    try {\\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\\n    } catch (error) {\\n      console.warn(\\"`dagre` packages isn\'t installed, please install it before using the DagreEngine plugin\\");\\n    }\\n  }\\n\\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\\n    this.instantiate();\\n\\n    this.g.setGraph(options.graph || {});\\n\\n    this.g.setDefaultEdgeLabel(() => {\\n      return {};\\n    });\\n\\n    const processedlinks: { [id: string]: boolean } = {};\\n\\n    // set nodes\\n    model.getNodes().forEach((node) => {\\n      this.g.setNode(node.id, {\\n        width: node.getWidth(),\\n        height: node.getHeight()\\n      });\\n    });\\n\\n    model.getLinks().forEach((link) => {\\n      // set edges\\n      if (link.getSourcePort() && link.getTargetPort()) {\\n        processedlinks[link.id] = true;\\n        this.g.setEdge({\\n          v: link.getSourcePort().getNode().id,\\n          w: link.getTargetPort().getNode().id,\\n          name: link.id\\n        });\\n      }\\n    });\\n\\n    // layout the graph\\n    dagre.layout(this.g, options.layout);\\n\\n    this.g.nodes().forEach((v) => {\\n      const { x, y } = this.g.node(v);\\n      model.getNode(v).setCoords({ x, y });\\n    });\\n\\n    // also include links?\\n    if (options.includeLinks) {\\n      this.g.edges().forEach((e) => {\\n        const edge = this.g.edge(e);\\n        const link = model.getLink(e.name);\\n\\n        const points = [link.getFirstPoint()];\\n        for (let i = 1; i < edge.points.length - 2; i++) {\\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\\n        }\\n        link.setPoints(points.concat(link.getLastPoint()));\\n      });\\n    }\\n  }\\n}\\n","properties":[{"name":"graph","type":"GraphLabel","optional":true,"description":"","line":7},{"name":"includeLinks","type":"boolean","optional":true,"description":"<p>Will also layout links</p>\\n","line":12},{"name":"layout","type":"","optional":true,"description":"","line":8}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"DefaultPortModelConfig","id":"interface-DefaultPortModelConfig-b5cb8b1a9da9dbe7b1256d26c00bcd6d","file":"libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts","type":"interface","sourceCode":"import { LinkModel } from \'../../models/link.model\';\\nimport { PortModel } from \'../../models/port.model\';\\nimport { HashMap } from \'../../utils/types\';\\nimport { DefaultLinkModel } from \'./default-link.model\';\\n\\nexport interface DefaultPortModelConfig {\\n  id?: string;\\n  isInput?: boolean;\\n  name?: string;\\n  type?: string;\\n  label?: string;\\n  linkType?: string;\\n  maximumLinks?: number;\\n}\\n\\nexport class DefaultPortModel extends PortModel {\\n  in: boolean;\\n  label: string;\\n  links: HashMap<any>;\\n\\n  constructor({\\n    isInput = true,\\n    name = \'port\',\\n    type = \'default\',\\n    id = null,\\n    label = null,\\n    linkType = \'default\',\\n    maximumLinks = null\\n  }: DefaultPortModelConfig = {}) {\\n    super(name, type, id, null, linkType);\\n    this.in = isInput;\\n    this.label = label || name;\\n\\n    if (this.in) {\\n      this.setCanCreateLinks(false);\\n    } else {\\n      this.setMaximumLinks(maximumLinks);\\n      this.setMagnetic(false);\\n    }\\n  }\\n\\n  link(port: PortModel): LinkModel {\\n    if (super.getCanCreateLinks()) {\\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\\n      link.setSourcePort(this);\\n      link.setTargetPort(port);\\n      return link;\\n    }\\n\\n    return null;\\n  }\\n\\n  createLinkModel() {\\n    if (super.getCanCreateLinks()) {\\n      return new DefaultLinkModel({ type: this.getLinkType() });\\n    }\\n  }\\n\\n  canLinkToPort(port: PortModel): boolean {\\n    if (port instanceof DefaultPortModel) {\\n      return this.in !== port.in;\\n    }\\n    return true;\\n  }\\n}\\n","properties":[{"name":"id","type":"string","optional":true,"description":"","line":7},{"name":"isInput","type":"boolean","optional":true,"description":"","line":8},{"name":"label","type":"string","optional":true,"description":"","line":11},{"name":"linkType","type":"string","optional":true,"description":"","line":12},{"name":"maximumLinks","type":"number","optional":true,"description":"","line":13},{"name":"name","type":"string","optional":true,"description":"","line":9},{"name":"type","type":"string","optional":true,"description":"","line":10}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"Dimensions","id":"interface-Dimensions-c6bff04663b5d0b3c8fb8fb1e31110f9","file":"libs/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts","type":"interface","sourceCode":"export interface Dimensions {\\n  width: number;\\n  height: number;\\n}\\n","properties":[{"name":"height","type":"number","optional":false,"description":"","line":3},{"name":"width","type":"number","optional":false,"description":"","line":2}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"HashMap","id":"interface-HashMap-aff15b921239f65d51bf48ca571cb1e5","file":"libs/ngx-diagrams/src/lib/utils/types.ts","type":"interface","sourceCode":"import { ID } from \'./tool-kit.util\';\\n\\nexport interface HashMap<T> {\\n  [key: string]: T;\\n}\\n\\nexport type Entries<T, K = string> = (readonly [K, T])[];\\n\\nexport type EntityMap<T> = Map<ID, T>;\\n","properties":[],"indexSignatures":[{"id":"index-declaration-aff15b921239f65d51bf48ca571cb1e5","args":[{"name":"key","type":"string"}],"returnType":"T","line":3}],"kind":159,"methods":[]},{"name":"SelectionModel","id":"interface-SelectionModel-67c9a8373c2e222bde8fd0bcaf1c142f","file":"libs/ngx-diagrams/src/lib/models/move-selection.model.ts","type":"interface","sourceCode":"import { BaseModel } from \'./base.model\';\\nimport { PortModel } from \'./port.model\';\\n\\nexport interface SelectionModel {\\n  model: BaseModel;\\n  initialX: number;\\n  initialY: number;\\n  magnet?: PortModel;\\n}\\n","properties":[{"name":"initialX","type":"number","optional":false,"description":"","line":6},{"name":"initialY","type":"number","optional":false,"description":"","line":7},{"name":"magnet","type":"PortModel","optional":true,"description":"","line":8},{"name":"model","type":"BaseModel","optional":false,"description":"","line":5}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"SelectOptions","id":"interface-SelectOptions-df9707653f849184dd6107a5cfa72818","file":"libs/ngx-diagrams/src/lib/interfaces/select-options.interface.ts","type":"interface","sourceCode":"export interface SelectOptions<E> {\\n  // asObject?: boolean;\\n  filter?: ((entity: E) => boolean) | undefined;\\n  // limitTo?: number;\\n}\\n","properties":[{"name":"filter","type":" | undefined","optional":true,"description":"","line":3}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"SerializedBaseModel","id":"interface-SerializedBaseModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"id","type":"string","optional":false,"description":"","line":5},{"name":"locked","type":"boolean","optional":false,"description":"","line":4}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"SerializedDiagramModel","id":"interface-SerializedDiagramModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"links","type":"SerializedLinkModel[]","optional":false,"description":"","line":10},{"name":"nodes","type":"SerializedNodeModel[]","optional":false,"description":"","line":9}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"SerializedLabelModel","id":"interface-SerializedLabelModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"coords","type":"Coords","optional":false,"description":"","line":59},{"name":"rotation","type":"number","optional":false,"description":"","line":58},{"name":"type","type":"string","optional":false,"description":"","line":57}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"SerializedLinkModel","id":"interface-SerializedLinkModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"extras","type":"any","optional":false,"description":"","line":32},{"name":"label","type":"SerializedLabelModel","optional":true,"description":"","line":34},{"name":"name","type":"string","optional":true,"description":"","line":29},{"name":"points","type":"SerializedPointModel[]","optional":false,"description":"","line":33},{"name":"sourcePort","type":"string","optional":false,"description":"","line":30},{"name":"targetPort","type":"string","optional":false,"description":"","line":31},{"name":"type","type":"string","optional":false,"description":"","line":35}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"SerializedNodeModel","id":"interface-SerializedNodeModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"extras","type":"literal type","optional":false,"description":"","line":17},{"name":"height","type":"number","optional":false,"description":"","line":21},{"name":"id","type":"string","optional":false,"description":"","line":23},{"name":"locked","type":"boolean","optional":false,"description":"","line":24},{"name":"nodeType","type":"string","optional":false,"description":"","line":16},{"name":"ports","type":"SerializedPortModel[]","optional":false,"description":"","line":25},{"name":"type","type":"string","optional":false,"description":"","line":22},{"name":"width","type":"number","optional":false,"description":"","line":20},{"name":"x","type":"number","optional":false,"description":"","line":14},{"name":"y","type":"number","optional":false,"description":"","line":15}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"SerializedPointModel","id":"interface-SerializedPointModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"coords","type":"Coords","optional":false,"description":"","line":52},{"name":"type","type":"string","optional":false,"description":"","line":53}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"SerializedPortModel","id":"interface-SerializedPortModel-b1ce629a5190ec1ca1bb3d8b70d2361e","file":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","sourceCode":"import { Coords } from \'./\';\\n\\nexport interface SerializedBaseModel {\\n  locked: boolean;\\n  id: string;\\n}\\n\\nexport interface SerializedDiagramModel extends SerializedBaseModel {\\n  nodes: SerializedNodeModel[];\\n  links: SerializedLinkModel[];\\n}\\n\\nexport interface SerializedNodeModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  nodeType: string;\\n  extras: {\\n    [s: string]: any;\\n  };\\n  width: number;\\n  height: number;\\n  type: string;\\n  id: string;\\n  locked: boolean;\\n  ports: SerializedPortModel[];\\n}\\n\\nexport interface SerializedLinkModel extends SerializedBaseModel {\\n  name?: string;\\n  sourcePort: string;\\n  targetPort: string;\\n  extras: any;\\n  points: SerializedPointModel[];\\n  label?: SerializedLabelModel;\\n  type: string;\\n}\\n\\nexport interface SerializedPortModel extends SerializedBaseModel {\\n  x: number;\\n  y: number;\\n  name: string;\\n  linkType: string;\\n  maximumLinks: number;\\n  type: string;\\n  magnetic: boolean;\\n  height: number;\\n  width: number;\\n  canCreateLinks: boolean;\\n}\\n\\nexport interface SerializedPointModel extends SerializedBaseModel {\\n  coords: Coords;\\n  type: string;\\n}\\n\\nexport interface SerializedLabelModel extends SerializedBaseModel {\\n  type: string;\\n  rotation: number;\\n  coords: Coords;\\n}\\n","properties":[{"name":"canCreateLinks","type":"boolean","optional":false,"description":"","line":48},{"name":"height","type":"number","optional":false,"description":"","line":46},{"name":"linkType","type":"string","optional":false,"description":"","line":42},{"name":"magnetic","type":"boolean","optional":false,"description":"","line":45},{"name":"maximumLinks","type":"number","optional":false,"description":"","line":43},{"name":"name","type":"string","optional":false,"description":"","line":41},{"name":"type","type":"string","optional":false,"description":"","line":44},{"name":"width","type":"number","optional":false,"description":"","line":47},{"name":"x","type":"number","optional":false,"description":"","line":39},{"name":"y","type":"number","optional":false,"description":"","line":40}],"indexSignatures":[],"kind":150,"methods":[],"extends":"SerializedBaseModel"},{"name":"ZonedClass","id":"interface-ZonedClass-95a8ba087560debc8f9321814c92650b","file":"libs/ngx-diagrams/src/lib/utils/decorators.ts","type":"interface","sourceCode":"import { NgZone } from \'@angular/core\';\\n\\nexport interface ZonedClass {\\n  ngZone: NgZone;\\n}\\n\\nexport function OutsideZone<T extends ZonedClass>(targetClass: T, functionName: string, descriptor) {\\n  const source = descriptor.value;\\n  descriptor.value = function (...data) {\\n    if (!this.ngZone) {\\n      throw new Error(\\"Class with \'OutsideZone\' decorator should have \'ngZone\' class property with \'NgZone\' class.\\");\\n    }\\n    return this.ngZone.runOutsideAngular(() => source.call(this, ...data));\\n  };\\n  return descriptor;\\n}\\n","properties":[{"name":"ngZone","type":"NgZone","optional":false,"description":"","line":4}],"indexSignatures":[],"kind":150,"methods":[]}],"injectables":[{"name":"DagreEngine","id":"injectable-DagreEngine-12e90174452d08b72a5dc441ada0705c","file":"libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts","properties":[{"name":"g","type":"dagre.graphlib.Graph","optional":false,"description":"","line":17}],"methods":[{"name":"instantiate","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":19},{"name":"redistribute","args":[{"name":"model","type":"DiagramModel"},{"name":"options","type":"DagreEngineOptions","defaultValue":"{}"}],"optional":false,"returnType":"void","typeParameters":[],"line":27,"jsdoctags":[{"name":"model","type":"DiagramModel","tagName":{"text":"param"}},{"name":"options","type":"DagreEngineOptions","defaultValue":"{}","tagName":{"text":"param"}}]}],"description":"","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport * as dagre from \'dagre\';\\nimport { EdgeConfig, GraphLabel, NodeConfig } from \'dagre\';\\nimport { DiagramModel, PointModel } from \'../models\';\\n\\nexport interface DagreEngineOptions {\\n  graph?: GraphLabel;\\n  layout?: GraphLabel & NodeConfig & EdgeConfig;\\n  /**\\n   * Will also layout links\\n   */\\n  includeLinks?: boolean;\\n}\\n\\n@Injectable()\\nexport class DagreEngine {\\n  g: dagre.graphlib.Graph;\\n\\n  instantiate() {\\n    try {\\n      this.g = new dagre.graphlib.Graph({ multigraph: true });\\n    } catch (error) {\\n      console.warn(\\"`dagre` packages isn\'t installed, please install it before using the DagreEngine plugin\\");\\n    }\\n  }\\n\\n  redistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\\n    this.instantiate();\\n\\n    this.g.setGraph(options.graph || {});\\n\\n    this.g.setDefaultEdgeLabel(() => {\\n      return {};\\n    });\\n\\n    const processedlinks: { [id: string]: boolean } = {};\\n\\n    // set nodes\\n    model.getNodes().forEach((node) => {\\n      this.g.setNode(node.id, {\\n        width: node.getWidth(),\\n        height: node.getHeight()\\n      });\\n    });\\n\\n    model.getLinks().forEach((link) => {\\n      // set edges\\n      if (link.getSourcePort() && link.getTargetPort()) {\\n        processedlinks[link.id] = true;\\n        this.g.setEdge({\\n          v: link.getSourcePort().getNode().id,\\n          w: link.getTargetPort().getNode().id,\\n          name: link.id\\n        });\\n      }\\n    });\\n\\n    // layout the graph\\n    dagre.layout(this.g, options.layout);\\n\\n    this.g.nodes().forEach((v) => {\\n      const { x, y } = this.g.node(v);\\n      model.getNode(v).setCoords({ x, y });\\n    });\\n\\n    // also include links?\\n    if (options.includeLinks) {\\n      this.g.edges().forEach((e) => {\\n        const edge = this.g.edge(e);\\n        const link = model.getLink(e.name);\\n\\n        const points = [link.getFirstPoint()];\\n        for (let i = 1; i < edge.points.length - 2; i++) {\\n          points.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\\n        }\\n        link.setPoints(points.concat(link.getLastPoint()));\\n      });\\n    }\\n  }\\n}\\n","type":"injectable"},{"name":"DiagramEngine","id":"injectable-DiagramEngine-0b989385a7e1621fe71ef8ac5c92ceb7","file":"libs/ngx-diagrams/src/lib/services/engine.service.ts","properties":[{"name":"_renderer","type":"Renderer2","optional":false,"description":"","line":31,"modifierKind":[113]},{"name":"canvas$","defaultValue":"createValueState<Element>(null)","type":"","optional":false,"description":"","line":36,"modifierKind":[113]},{"name":"canvasMatrix","defaultValue":"[]","type":"number[][]","optional":false,"description":"","line":43},{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":50},{"name":"hAdjustmentFactor","defaultValue":"0","type":"number","optional":false,"description":"","line":47},{"name":"labelFactories","defaultValue":"new Map<string, AbstractLabelFactory>()","type":"","optional":false,"description":"","line":33,"modifierKind":[113]},{"name":"linkFactories","defaultValue":"new Map<string, AbstractLinkFactory>()","type":"","optional":false,"description":"","line":34,"modifierKind":[113]},{"name":"markMatrixPoint","defaultValue":"() => {...}","type":"","optional":false,"description":"","line":548},{"name":"nodeFactories","defaultValue":"new Map<string, AbstractNodeFactory>()","type":"","optional":false,"description":"","line":32,"modifierKind":[113]},{"name":"pathFinding","type":"PathFinding","optional":false,"description":"","line":40},{"name":"portFactories","defaultValue":"new Map<string, AbstractPortFactory>()","type":"","optional":false,"description":"","line":35,"modifierKind":[113]},{"name":"routingMatrix","defaultValue":"[]","type":"number[][]","optional":false,"description":"","line":44},{"name":"smartRouting","type":"boolean","optional":false,"description":"","line":39},{"name":"vAdjustmentFactor","defaultValue":"0","type":"number","optional":false,"description":"","line":48}],"methods":[{"name":"calculateCanvasMatrix","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":329},{"name":"calculateMatrixDimensions","args":[],"optional":false,"returnType":"literal type","typeParameters":[],"line":352,"description":"<p>Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\\nto find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.</p>\\n"},{"name":"calculateRoutingMatrix","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":490},{"name":"createDiagram","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":56},{"name":"generateWidgetForLabel","args":[{"name":"label","type":"LabelModel"},{"name":"labelHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef | null","typeParameters":[],"line":89,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}},{"name":"labelHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"generateWidgetForLink","args":[{"name":"link","type":"LinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef | null","typeParameters":[],"line":173,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"generateWidgetForNode","args":[{"name":"node","type":"NodeModel"},{"name":"nodesHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef | null","typeParameters":[],"line":117,"jsdoctags":[{"name":"node","type":"NodeModel","tagName":{"text":"param"}},{"name":"nodesHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"generateWidgetForPort","args":[{"name":"port","type":"PortModel"},{"name":"portsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef | null","typeParameters":[],"line":145,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}},{"name":"portsHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getCanvasMatrix","args":[],"optional":false,"returnType":"[][]","typeParameters":[],"line":448,"description":"<p>A representation of the canvas in the following format:</p>\\n<p>+-----------------+\\n| 0 0 0 0 0 0 0 0 |\\n| 0 0 0 0 0 0 0 0 |\\n| 0 0 0 0 0 0 0 0 |\\n| 0 0 0 0 0 0 0 0 |\\n| 0 0 0 0 0 0 0 0 |\\n+-----------------+</p>\\n<p>In which all walkable points are marked by zeros.\\nIt uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.</p>\\n"},{"name":"getDiagramModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":278},{"name":"getFactoryForLabel","args":[{"name":"label","type":"LabelModel"}],"optional":false,"returnType":"AbstractLabelFactory | null","typeParameters":[],"line":85,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}}]},{"name":"getFactoryForLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"AbstractLinkFactory | null","typeParameters":[],"line":169,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}}]},{"name":"getFactoryForNode","args":[{"name":"node","type":"NodeModel"}],"optional":false,"returnType":"AbstractNodeFactory | null","typeParameters":[],"line":113,"jsdoctags":[{"name":"node","type":"NodeModel","tagName":{"text":"param"}}]},{"name":"getFactoryForPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"AbstractPortFactory | null","typeParameters":[],"line":141,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getLabelFactories","args":[],"optional":false,"returnType":"EntityMap<AbstractLabelFactory>","typeParameters":[],"line":74},{"name":"getLabelFactory","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"AbstractLabelFactory","typeParameters":[],"line":78,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},{"name":"getLinkFactories","args":[],"optional":false,"returnType":"EntityMap<AbstractLinkFactory>","typeParameters":[],"line":154},{"name":"getLinkFactory","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"AbstractLinkFactory","typeParameters":[],"line":162,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},{"name":"getNodeDimensions","args":[{"name":"node","type":"NodeModel"}],"optional":false,"returnType":"literal type","typeParameters":[],"line":244,"description":"<p>Determine the width and height of the node passed in.\\nIt currently assumes nodes have a rectangular shape, can be overriden for customised shapes.</p>\\n","jsdoctags":[{"name":"node","type":"NodeModel","tagName":{"text":"param"}}]},{"name":"getNodeElement","args":[{"name":"node","type":"NodeModel"}],"optional":false,"returnType":"HTMLElement","typeParameters":[],"line":182,"jsdoctags":[{"name":"node","type":"NodeModel","tagName":{"text":"param"}}]},{"name":"getNodeFactories","args":[],"optional":false,"returnType":"EntityMap<AbstractNodeFactory>","typeParameters":[],"line":102},{"name":"getNodeFactory","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"AbstractNodeFactory","typeParameters":[],"line":106,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},{"name":"getNodePortElement","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"HTMLElement","typeParameters":[],"line":190,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getPathfinding","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":325},{"name":"getPortCenter","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"{ x: number; y: number; }","typeParameters":[],"line":202,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getPortCoords","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"literal type","typeParameters":[],"line":220,"description":"<p>Calculate rectangular coordinates of the port passed in.</p>\\n","jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getPortFactories","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":130},{"name":"getPortFactory","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"AbstractPortFactory","typeParameters":[],"line":134,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},{"name":"getRelativeMousePoint","args":[{"name":"event","type":"MouseEvent"}],"optional":false,"returnType":"literal type","typeParameters":[],"line":265,"jsdoctags":[{"name":"event","type":"MouseEvent","tagName":{"text":"param"}}]},{"name":"getRelativePoint","args":[{"name":"x","type":"number"},{"name":"y","type":"number"}],"optional":false,"returnType":"{ x: number; y: number; }","typeParameters":[],"line":273,"jsdoctags":[{"name":"x","type":"number","tagName":{"text":"param"}},{"name":"y","type":"number","tagName":{"text":"param"}}]},{"name":"getRoutingMatrix","args":[],"optional":false,"returnType":"[][]","typeParameters":[],"line":482,"description":"<p>A representation of the canvas in the following format:</p>\\n<p>+-----------------+\\n| 0 0 1 1 0 0 0 0 |\\n| 0 0 1 1 0 0 1 1 |\\n| 0 0 0 0 0 0 1 1 |\\n| 1 1 0 0 0 0 0 0 |\\n| 1 1 0 0 0 0 0 0 |\\n+-----------------+</p>\\n<p>In which all points blocked by a node (and its ports) are\\nmarked as 1; points were there is nothing (ie, free) receive 0.</p>\\n"},{"name":"getSmartRouting","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":502},{"name":"isModelLocked","args":[{"name":"model","type":"BaseEntity"}],"optional":false,"returnType":"any","typeParameters":[],"line":282,"jsdoctags":[{"name":"model","type":"BaseEntity","tagName":{"text":"param"}}]},{"name":"markNodes","args":[{"name":"matrix","type":"number[][]"}],"optional":false,"returnType":"void","typeParameters":[],"line":509,"description":"<p>Updates (by reference) where nodes will be drawn on the matrix passed in.</p>\\n","jsdoctags":[{"name":"matrix","type":"number[][]","tagName":{"text":"param"}}]},{"name":"markPorts","args":[{"name":"matrix","type":"number[][]"}],"optional":false,"returnType":"void","typeParameters":[],"line":527,"description":"<p>Updates (by reference) where ports will be drawn on the matrix passed in.</p>\\n","jsdoctags":[{"name":"matrix","type":"number[][]","tagName":{"text":"param"}}]},{"name":"registerDefaultFactories","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":61},{"name":"registerLabelFactory","args":[{"name":"labelFactory","type":"AbstractLabelFactory"}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"jsdoctags":[{"name":"labelFactory","type":"AbstractLabelFactory","tagName":{"text":"param"}}]},{"name":"registerLinkFactory","args":[{"name":"factory","type":"AbstractLinkFactory"}],"optional":false,"returnType":"void","typeParameters":[],"line":158,"jsdoctags":[{"name":"factory","type":"AbstractLinkFactory","tagName":{"text":"param"}}]},{"name":"registerNodeFactory","args":[{"name":"nodeFactory","type":"AbstractNodeFactory"}],"optional":false,"returnType":"void","typeParameters":[],"line":98,"jsdoctags":[{"name":"nodeFactory","type":"AbstractNodeFactory","tagName":{"text":"param"}}]},{"name":"registerPortFactory","args":[{"name":"factory","type":"AbstractPortFactory"}],"optional":false,"returnType":"void","typeParameters":[],"line":126,"jsdoctags":[{"name":"factory","type":"AbstractPortFactory","tagName":{"text":"param"}}]},{"name":"setCanvas","args":[{"name":"canvas","type":"Element"}],"optional":false,"returnType":"void","typeParameters":[],"line":261,"jsdoctags":[{"name":"canvas","type":"Element","tagName":{"text":"param"}}]},{"name":"setSmartRoutingStatus","args":[{"name":"status","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":315,"jsdoctags":[{"name":"status","type":"boolean","tagName":{"text":"param"}}]},{"name":"translateRoutingX","args":[{"name":"x","type":"number"},{"name":"reverse","type":"","defaultValue":"false"}],"optional":false,"returnType":"number","typeParameters":[],"line":461,"description":"<p>The routing matrix does not have negative indexes, but elements could be negatively positioned.\\nWe use the functions below to translate back and forth between these coordinates, relying on the\\ncalculated values of hAdjustmentFactor and vAdjustmentFactor.</p>\\n","jsdoctags":[{"name":"x","type":"number","tagName":{"text":"param"}},{"name":"reverse","type":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"translateRoutingY","args":[{"name":"y","type":"number"},{"name":"reverse","type":"","defaultValue":"false"}],"optional":false,"returnType":"number","typeParameters":[],"line":464,"jsdoctags":[{"name":"y","type":"number","tagName":{"text":"param"}},{"name":"reverse","type":"","defaultValue":"false","tagName":{"text":"param"}}]},{"name":"zoomToFit","args":[{"name":"additionalZoomFactor","type":"number","defaultValue":"0.005"}],"optional":false,"returnType":"void","typeParameters":[],"line":294,"description":"<p>fit the canvas zoom levels to the elements contained.</p>\\n","jsdoctags":[{"name":{"pos":9778,"end":9798,"flags":0,"escapedText":"additionalZoomFactor"},"type":"number","defaultValue":"0.005","tagName":{"pos":9772,"end":9777,"flags":0,"escapedText":"param"},"comment":"<p>allow for further zooming out to make sure edges doesn&#39;t cut</p>\\n"}]}],"description":"","sourceCode":"import {\\n  ComponentFactoryResolver,\\n  ComponentRef,\\n  Injectable,\\n  Renderer2,\\n  RendererFactory2,\\n  ViewContainerRef\\n} from \'@angular/core\';\\nimport { delay, filter, take } from \'rxjs/operators\';\\nimport { BaseEntity } from \'../base.entity\';\\nimport { DefaultLabelFactory } from \'../defaults/factories/default-label.factory\';\\nimport { DefaultLinkFactory } from \'../defaults/factories/default-link.factory\';\\nimport { DefaultNodeFactory } from \'../defaults/factories/default-node.factory\';\\nimport { DefaultPortFactory } from \'../defaults/factories/default-port.factory\';\\nimport { AbstractLabelFactory } from \'../factories/label.factory\';\\nimport { AbstractLinkFactory } from \'../factories/link.factory\';\\nimport { AbstractNodeFactory } from \'../factories/node.factory\';\\nimport { AbstractPortFactory } from \'../factories/port.factory\';\\nimport { DiagramModel } from \'../models/diagram.model\';\\nimport { LabelModel } from \'../models/label.model\';\\nimport { LinkModel } from \'../models/link.model\';\\nimport { NodeModel } from \'../models/node.model\';\\nimport { PortModel } from \'../models/port.model\';\\nimport { NgxDiagramsModule } from \'../ngx-diagrams.module\';\\nimport { PathFinding, ROUTING_SCALING_FACTOR } from \'../plugins/smart-routing.plugin\';\\nimport { createValueState } from \'../state/state\';\\nimport { EntityMap } from \'../utils\';\\n\\n@Injectable({ providedIn: NgxDiagramsModule })\\nexport class DiagramEngine {\\n  protected _renderer: Renderer2;\\n  protected nodeFactories = new Map<string, AbstractNodeFactory>();\\n  protected labelFactories = new Map<string, AbstractLabelFactory>();\\n  protected linkFactories = new Map<string, AbstractLinkFactory>();\\n  protected portFactories = new Map<string, AbstractPortFactory>();\\n  protected canvas$ = createValueState<Element>(null);\\n\\n  // smart routing related properties\\n  smartRouting: boolean;\\n  pathFinding: PathFinding;\\n\\n  // calculated only when smart routing is active\\n  canvasMatrix: number[][] = [];\\n  routingMatrix: number[][] = [];\\n\\n  // used when at least one element has negative coordinates\\n  hAdjustmentFactor = 0;\\n  vAdjustmentFactor = 0;\\n\\n  diagramModel: DiagramModel;\\n\\n  constructor(protected resolver: ComponentFactoryResolver, protected rendererFactory: RendererFactory2) {\\n    this._renderer = this.rendererFactory.createRenderer(null, null);\\n  }\\n\\n  createDiagram() {\\n    this.diagramModel = new DiagramModel(this);\\n    return this.diagramModel;\\n  }\\n\\n  registerDefaultFactories() {\\n    this.registerNodeFactory(new DefaultNodeFactory(this.resolver, this._renderer));\\n    this.registerPortFactory(new DefaultPortFactory(this.resolver, this._renderer));\\n    this.registerLinkFactory(new DefaultLinkFactory(this.resolver, this._renderer));\\n    this.registerLabelFactory(new DefaultLabelFactory(this.resolver, this._renderer));\\n  }\\n\\n  //#region Factories\\n  // LABELS\\n  registerLabelFactory(labelFactory: AbstractLabelFactory) {\\n    this.labelFactories.set(labelFactory.type, labelFactory);\\n  }\\n\\n  getLabelFactories(): EntityMap<AbstractLabelFactory> {\\n    return this.labelFactories;\\n  }\\n\\n  getLabelFactory(type: string): AbstractLabelFactory {\\n    if (this.labelFactories.has(type)) {\\n      return this.labelFactories.get(type);\\n    }\\n    throw new Error(`cannot find factory for node of type: [${type}]`);\\n  }\\n\\n  getFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\\n    return this.getLabelFactory(label.getType());\\n  }\\n\\n  generateWidgetForLabel(label: LabelModel, labelHost: ViewContainerRef): ComponentRef<LabelModel> | null {\\n    const labelFactory = this.getFactoryForLabel(label);\\n    if (!labelFactory) {\\n      throw new Error(`Cannot find widget factory for node: ${label.getType()}`);\\n    }\\n    return labelFactory.generateWidget(label, labelHost);\\n  }\\n\\n  // NODES\\n  registerNodeFactory(nodeFactory: AbstractNodeFactory) {\\n    this.nodeFactories.set(nodeFactory.type, nodeFactory);\\n  }\\n\\n  getNodeFactories(): EntityMap<AbstractNodeFactory> {\\n    return this.nodeFactories;\\n  }\\n\\n  getNodeFactory(type: string): AbstractNodeFactory {\\n    if (this.nodeFactories.has(type)) {\\n      return this.nodeFactories.get(type);\\n    }\\n    throw new Error(`cannot find factory for node of type: [${type}]`);\\n  }\\n\\n  getFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\\n    return this.getNodeFactory(node.getType());\\n  }\\n\\n  generateWidgetForNode(node: NodeModel, nodesHost: ViewContainerRef): ComponentRef<NodeModel> | null {\\n    const nodeFactory = this.getFactoryForNode(node);\\n    if (!nodeFactory) {\\n      throw new Error(`Cannot find widget factory for node: ${node.getType()}`);\\n    }\\n    return nodeFactory.generateWidget(this, node, nodesHost);\\n  }\\n\\n  // PORTS\\n  registerPortFactory(factory: AbstractPortFactory) {\\n    this.portFactories.set(factory.type, factory);\\n  }\\n\\n  getPortFactories() {\\n    return this.portFactories;\\n  }\\n\\n  getPortFactory(type: string): AbstractPortFactory {\\n    if (this.portFactories.has(type)) {\\n      return this.portFactories.get(type);\\n    }\\n    throw new Error(`cannot find factory for port of type: [${type}]`);\\n  }\\n\\n  getFactoryForPort(port: PortModel): AbstractPortFactory | null {\\n    return this.getPortFactory(port.getType());\\n  }\\n\\n  generateWidgetForPort(port: PortModel, portsHost: ViewContainerRef): ComponentRef<PortModel> | null {\\n    const portFactory = this.getFactoryForPort(port);\\n    if (!portFactory) {\\n      throw new Error(`Cannot find widget factory for port: ${port.getType()}`);\\n    }\\n    return portFactory.generateWidget(port, portsHost);\\n  }\\n\\n  // LINKS\\n  getLinkFactories(): EntityMap<AbstractLinkFactory> {\\n    return this.linkFactories;\\n  }\\n\\n  registerLinkFactory(factory: AbstractLinkFactory) {\\n    this.linkFactories.set(factory.type, factory);\\n  }\\n\\n  getLinkFactory(type: string): AbstractLinkFactory {\\n    if (this.linkFactories.has(type)) {\\n      return this.linkFactories.get(type);\\n    }\\n    throw new Error(`cannot find factory for link of type: [${type}]`);\\n  }\\n\\n  getFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\\n    return this.getLinkFactory(link.getType());\\n  }\\n\\n  generateWidgetForLink(link: LinkModel, linksHost: ViewContainerRef): ComponentRef<LinkModel> | null {\\n    const linkFactory = this.getFactoryForLink(link);\\n    if (!linkFactory) {\\n      throw new Error(`Cannot find link factory for link: ${link.getType()}`);\\n    }\\n    return linkFactory.generateWidget(this, link, linksHost);\\n  }\\n  //#endregion\\n\\n  getNodeElement(node: NodeModel): HTMLElement {\\n    const selector = this.canvas$.value.querySelector(`[data-nodeid=\\"${node.id}\\"]`);\\n    if (selector === null) {\\n      throw new Error(\'Cannot find Node element with node id: [\' + node.id + \']\');\\n    }\\n    return selector as HTMLElement;\\n  }\\n\\n  getNodePortElement(port: PortModel): HTMLElement {\\n    const selector = this.canvas$.value.querySelector(\\n      `[data-nodeid=\\"${port.getParent().id}\\"] [data-portid=\\"${port.id}\\"]`\\n    );\\n    if (selector === null) {\\n      throw new Error(\\n        \'Cannot find Node Port element with node id: [\' + port.getParent().id + \'] and port id: [\' + port.id + \']\'\\n      );\\n    }\\n    return selector as HTMLElement;\\n  }\\n\\n  getPortCenter(port: PortModel) {\\n    const sourceElement = this.getNodePortElement(port);\\n    const sourceRect = sourceElement.getBoundingClientRect();\\n    const rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\\n\\n    return {\\n      x:\\n        sourceElement.offsetWidth / 2 +\\n        (rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\\n      y:\\n        sourceElement.offsetHeight / 2 +\\n        (rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\\n    };\\n  }\\n\\n  /**\\n   * Calculate rectangular coordinates of the port passed in.\\n   */\\n  getPortCoords(\\n    port: PortModel\\n  ): {\\n    x: number;\\n    y: number;\\n    width: number;\\n    height: number;\\n  } {\\n    const sourceElement = this.getNodePortElement(port);\\n    const sourceRect = sourceElement.getBoundingClientRect() as DOMRect;\\n    const canvasRect = this.canvas$.value.getBoundingClientRect() as ClientRect;\\n\\n    return {\\n      x: (sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.left,\\n      y: (sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.top,\\n      width: sourceRect.width,\\n      height: sourceRect.height\\n    };\\n  }\\n\\n  /**\\n   * Determine the width and height of the node passed in.\\n   * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\\n   */\\n  getNodeDimensions(node: NodeModel): { width: number; height: number } {\\n    if (!this.canvas$.value) {\\n      return {\\n        width: 0,\\n        height: 0\\n      };\\n    }\\n\\n    const nodeElement = this.getNodeElement(node);\\n    const nodeRect = nodeElement.getBoundingClientRect();\\n\\n    return {\\n      width: nodeRect.width,\\n      height: nodeRect.height\\n    };\\n  }\\n\\n  setCanvas(canvas: Element) {\\n    this.canvas$.set(canvas).emit();\\n  }\\n\\n  getRelativeMousePoint(event: MouseEvent): { x: number; y: number } {\\n    const point = this.getRelativePoint(event.clientX, event.clientY);\\n    return {\\n      x: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\\n      y: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\\n    };\\n  }\\n\\n  getRelativePoint(x: number, y: number) {\\n    const canvasRect = this.canvas$.value.getBoundingClientRect();\\n    return { x: x - canvasRect.left, y: y - canvasRect.top };\\n  }\\n\\n  getDiagramModel() {\\n    return this.diagramModel;\\n  }\\n\\n  isModelLocked(model: BaseEntity) {\\n    if (this.diagramModel.getLocked()) {\\n      return true;\\n    }\\n\\n    return model.getLocked();\\n  }\\n\\n  /**\\n   * fit the canvas zoom levels to the elements contained.\\n   * @param additionalZoomFactor allow for further zooming out to make sure edges doesn\'t cut\\n   */\\n  zoomToFit(additionalZoomFactor = 0.005) {\\n    this.canvas$.value$.pipe(filter(Boolean), take(1), delay(0)).subscribe((canvas: HTMLElement) => {\\n      const xFactor = canvas.clientWidth / canvas.scrollWidth;\\n      const yFactor = canvas.clientHeight / canvas.scrollHeight;\\n      const zoomFactor = xFactor < yFactor ? xFactor : yFactor;\\n\\n      let newZoomLvl = this.diagramModel.getZoomLevel() * (zoomFactor - additionalZoomFactor);\\n      const maxZoomOut = this.diagramModel.getMaxZoomOut();\\n\\n      if (maxZoomOut && newZoomLvl < maxZoomOut) {\\n        newZoomLvl = maxZoomOut;\\n      }\\n\\n      this.diagramModel.setZoomLevel(newZoomLvl);\\n\\n      // TODO: either block the canvas movement on 0,0 or detect the top left furthest element and set the offest to its edges\\n      this.diagramModel.setOffset(0, 0);\\n    });\\n  }\\n\\n  // SMART ROUTING\\n  setSmartRoutingStatus(status: boolean) {\\n    if (status && !this.pathFinding) {\\n      this.pathFinding = new PathFinding(this);\\n    } else {\\n      this.pathFinding = null;\\n    }\\n\\n    this.smartRouting = status;\\n  }\\n\\n  getPathfinding() {\\n    return this.pathFinding;\\n  }\\n\\n  calculateCanvasMatrix() {\\n    const {\\n      width: canvasWidth,\\n      hAdjustmentFactor,\\n      height: canvasHeight,\\n      vAdjustmentFactor\\n    } = this.calculateMatrixDimensions();\\n\\n    this.hAdjustmentFactor = hAdjustmentFactor;\\n    this.vAdjustmentFactor = vAdjustmentFactor;\\n\\n    const matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\\n    const matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\\n\\n    this.canvasMatrix = Array.from({ length: matrixHeight }, (_, i) => i + 1).map(() => {\\n      return new Array(matrixWidth).fill(0);\\n    });\\n  }\\n\\n  /**\\n   * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\\n   * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\\n   */\\n  calculateMatrixDimensions(): {\\n    width: number;\\n    hAdjustmentFactor: number;\\n    height: number;\\n    vAdjustmentFactor: number;\\n  } {\\n    const allNodesCoords = this.diagramModel.getNodesArray().map((item) => ({\\n      x: item.getCoords().x,\\n      width: item.getWidth(),\\n      y: item.getCoords().y,\\n      height: item.getHeight()\\n    }));\\n\\n    const allLinks = this.diagramModel.getLinksArray();\\n\\n    const allPortsCoords = allLinks\\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()])\\n      .filter((port) => port !== null)\\n      .map((item) => ({\\n        x: item.getX(),\\n        width: item.getWidth(),\\n        y: item.getY(),\\n        height: item.getHeight()\\n      }));\\n\\n    const allPointsCoords = allLinks\\n      .flatMap((link) => link.getPoints())\\n      .map((item) => ({\\n        // points don\'t have width/height, so let\'s just use 0\\n        x: item.getCoords().x,\\n        width: 0,\\n        y: item.getCoords().y,\\n        height: 0\\n      }));\\n\\n    const canvas = this.canvas$.value as HTMLDivElement;\\n\\n    const allElements = allNodesCoords.concat(allPortsCoords, allPointsCoords);\\n\\n    const minX =\\n      Math.floor(\\n        Math.min(\\n          allElements.reduce((a, b) => {\\n            return a.x <= b.x ? a : b;\\n          }).x,\\n          0\\n        ) / ROUTING_SCALING_FACTOR\\n      ) * ROUTING_SCALING_FACTOR;\\n\\n    const maxXElement = allElements.reduce((a, b) => {\\n      return a.x + a.width >= b.x + b.width ? a : b;\\n    });\\n\\n    const maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\\n\\n    const minY =\\n      Math.floor(\\n        Math.min(\\n          allElements.reduce((a, b) => {\\n            return a.y <= b.y ? a : b;\\n          }).y,\\n          0\\n        ) / ROUTING_SCALING_FACTOR\\n      ) * ROUTING_SCALING_FACTOR;\\n\\n    const maxYElement = allElements.reduce((a, b) => {\\n      return a.y + a.height >= b.y + b.height ? a : b;\\n    });\\n\\n    const maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetWidth);\\n\\n    const width = Math.ceil(Math.abs(minX) + maxX);\\n    const height = Math.ceil(Math.abs(minY) + maxY);\\n\\n    return {\\n      width,\\n      hAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\\n      height,\\n      vAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\\n    };\\n  }\\n\\n  /**\\n   * A representation of the canvas in the following format:\\n   *\\n   * +-----------------+\\n   * | 0 0 0 0 0 0 0 0 |\\n   * | 0 0 0 0 0 0 0 0 |\\n   * | 0 0 0 0 0 0 0 0 |\\n   * | 0 0 0 0 0 0 0 0 |\\n   * | 0 0 0 0 0 0 0 0 |\\n   * +-----------------+\\n   *\\n   * In which all walkable points are marked by zeros.\\n   * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\\n   */\\n  getCanvasMatrix(): number[][] {\\n    if (this.canvasMatrix.length === 0) {\\n      this.calculateCanvasMatrix();\\n    }\\n\\n    return this.canvasMatrix;\\n  }\\n\\n  /**\\n   * The routing matrix does not have negative indexes, but elements could be negatively positioned.\\n   * We use the functions below to translate back and forth between these coordinates, relying on the\\n   * calculated values of hAdjustmentFactor and vAdjustmentFactor.\\n   */\\n  translateRoutingX(x: number, reverse = false) {\\n    return x + this.hAdjustmentFactor * (reverse ? -1 : 1);\\n  }\\n  translateRoutingY(y: number, reverse = false) {\\n    return y + this.vAdjustmentFactor * (reverse ? -1 : 1);\\n  }\\n\\n  /**\\n   * A representation of the canvas in the following format:\\n   *\\n   * +-----------------+\\n   * | 0 0 1 1 0 0 0 0 |\\n   * | 0 0 1 1 0 0 1 1 |\\n   * | 0 0 0 0 0 0 1 1 |\\n   * | 1 1 0 0 0 0 0 0 |\\n   * | 1 1 0 0 0 0 0 0 |\\n   * +-----------------+\\n   *\\n   * In which all points blocked by a node (and its ports) are\\n   * marked as 1; points were there is nothing (ie, free) receive 0.\\n   */\\n  getRoutingMatrix(): number[][] {\\n    if (this.routingMatrix.length === 0) {\\n      this.calculateRoutingMatrix();\\n    }\\n\\n    return this.routingMatrix;\\n  }\\n\\n  calculateRoutingMatrix(): void {\\n    const matrix = this.getCanvasMatrix().map((item) => item.slice(0));\\n\\n    // nodes need to be marked as blocked points\\n    this.markNodes(matrix);\\n\\n    // same thing for ports\\n    this.markPorts(matrix);\\n\\n    this.routingMatrix = matrix;\\n  }\\n\\n  getSmartRouting() {\\n    return !!this.smartRouting;\\n  }\\n\\n  /**\\n   * Updates (by reference) where nodes will be drawn on the matrix passed in.\\n   */\\n  markNodes(matrix: number[][]): void {\\n    this.diagramModel.getNodes().forEach((node) => {\\n      const startX = Math.floor(node.getCoords().x / ROUTING_SCALING_FACTOR);\\n      const endX = Math.ceil((node.getCoords().x + node.getWidth()) / ROUTING_SCALING_FACTOR);\\n      const startY = Math.floor(node.getCoords().y / ROUTING_SCALING_FACTOR);\\n      const endY = Math.ceil((node.getCoords().y + node.getHeight()) / ROUTING_SCALING_FACTOR);\\n\\n      for (let x = startX - 1; x <= endX + 1; x++) {\\n        for (let y = startY - 1; y < endY + 1; y++) {\\n          this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\\n        }\\n      }\\n    });\\n  }\\n\\n  /**\\n   * Updates (by reference) where ports will be drawn on the matrix passed in.\\n   */\\n  markPorts(matrix: number[][]): void {\\n    const allElements = this.diagramModel\\n      .getLinksArray()\\n      .flatMap((link) => [link.getSourcePort(), link.getTargetPort()]);\\n\\n    allElements\\n      .filter((port) => port !== null)\\n      .forEach((port) => {\\n        const startX = Math.floor(port.getX() / ROUTING_SCALING_FACTOR);\\n        const endX = Math.ceil((port.getX() + port.getWidth()) / ROUTING_SCALING_FACTOR);\\n        const startY = Math.floor(port.getY() / ROUTING_SCALING_FACTOR);\\n        const endY = Math.ceil((port.getY() + port.getHeight()) / ROUTING_SCALING_FACTOR);\\n\\n        for (let x = startX - 1; x <= endX + 1; x++) {\\n          for (let y = startY - 1; y < endY + 1; y++) {\\n            this.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\\n          }\\n        }\\n      });\\n  }\\n\\n  markMatrixPoint = (matrix: number[][], x: number, y: number) => {\\n    if (matrix[y] !== undefined && matrix[y][x] !== undefined) {\\n      matrix[y][x] = 1;\\n    }\\n  };\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"rendererFactory","type":"RendererFactory2"}],"line":50,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"rendererFactory","type":"RendererFactory2","tagName":{"text":"param"}}]},"type":"injectable"}],"classes":[{"name":"AbstractFactory","id":"class-AbstractFactory-09f28dcdb8815ba1d35fb4b0dde046b4","file":"libs/ngx-diagrams/src/lib/factories/base.factory.ts","type":"class","sourceCode":"import { BaseModel } from \'../models/base.model\';\\n\\nexport abstract class AbstractFactory<T extends BaseModel> {\\n  protected _type: string;\\n\\n  constructor(type: string) {\\n    this._type = type;\\n  }\\n\\n  get type(): string {\\n    return this._type;\\n  }\\n\\n  abstract getNewInstance(initialConfig?: any): T;\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"type","type":"string"}],"line":4,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113]}],"methods":[{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}]}],"indexSignatures":[],"accessors":{"type":{"name":"type","getSignature":{"name":"type","type":"string","returnType":"string","line":10}}},"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AbstractLabelFactory","id":"class-AbstractLabelFactory-1619017ea494f7d087cd8b162c2de685","file":"libs/ngx-diagrams/src/lib/factories/label.factory.ts","type":"class","sourceCode":"import { AbstractFactory } from \'./base.factory\';\\nimport { ViewContainerRef, ComponentRef } from \'@angular/core\';\\nimport { LabelModel } from \'../models/label.model\';\\n\\nexport abstract class AbstractLabelFactory<\\n  T extends LabelModel = LabelModel\\n> extends AbstractFactory<T> {\\n  abstract generateWidget(\\n    label: LabelModel,\\n    labelsHost: ViewContainerRef\\n  ): ComponentRef<T>;\\n}\\n","properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"label","type":"LabelModel"},{"name":"labelsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}},{"name":"labelsHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AbstractLinkFactory","id":"class-AbstractLinkFactory-2a784b96dc70a81497967eccd9e21663","file":"libs/ngx-diagrams/src/lib/factories/link.factory.ts","type":"class","sourceCode":"import { LinkModel } from \'../models/link.model\';\\nimport { AbstractFactory } from \'./base.factory\';\\nimport { ViewContainerRef, ComponentRef } from \'@angular/core\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\n\\nexport abstract class AbstractLinkFactory<\\n  T extends LinkModel = LinkModel\\n> extends AbstractFactory<T> {\\n  abstract generateWidget(\\n    diagramEngine: DiagramEngine,\\n    link: LinkModel,\\n    linksHost: ViewContainerRef\\n  ): ComponentRef<T>;\\n}\\n","properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"link","type":"LinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AbstractNodeFactory","id":"class-AbstractNodeFactory-7301f8f7f0a76041aeeafae34d53448f","file":"libs/ngx-diagrams/src/lib/factories/node.factory.ts","type":"class","sourceCode":"import { NodeModel } from \'../models/node.model\';\\nimport { AbstractFactory } from \'./base.factory\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\nimport { ViewContainerRef, ComponentRef } from \'@angular/core\';\\n\\nexport abstract class AbstractNodeFactory<\\n  T extends NodeModel = NodeModel\\n> extends AbstractFactory<T> {\\n  abstract generateWidget(\\n    diagramEngine: DiagramEngine,\\n    node: NodeModel,\\n    nodeHost: ViewContainerRef\\n  ): ComponentRef<T>;\\n}\\n","properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"node","type":"NodeModel"},{"name":"nodeHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"node","type":"NodeModel","tagName":{"text":"param"}},{"name":"nodeHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AbstractPortFactory","id":"class-AbstractPortFactory-e0fbb1190cac9edb994b24edd4af747a","file":"libs/ngx-diagrams/src/lib/factories/port.factory.ts","type":"class","sourceCode":"import { PortModel } from \'../models/port.model\';\\nimport { AbstractFactory } from \'./base.factory\';\\nimport { ViewContainerRef, ComponentRef } from \'@angular/core\';\\n\\nexport abstract class AbstractPortFactory<\\n  T extends PortModel = PortModel\\n> extends AbstractFactory<T> {\\n  abstract generateWidget(\\n    port: PortModel,\\n    portHost: ViewContainerRef\\n  ): ComponentRef<T>;\\n}\\n","properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"port","type":"PortModel"},{"name":"portHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}},{"name":"portHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"BaseAction","id":"class-BaseAction-a7b323858d4741fcd6169bed7f82248d","file":"libs/ngx-diagrams/src/lib/actions/base.action.ts","type":"class","sourceCode":"export class BaseAction {\\n  mouseX: number;\\n  mouseY: number;\\n  ms: number;\\n\\n  constructor(mouseX: number, mouseY: number) {\\n    this.mouseX = mouseX;\\n    this.mouseY = mouseY;\\n    this.ms = new Date().getTime();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"}],"line":4,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}}]},"properties":[{"name":"mouseX","type":"number","optional":false,"description":"","line":2},{"name":"mouseY","type":"number","optional":false,"description":"","line":3},{"name":"ms","type":"number","optional":false,"description":"","line":4}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"BaseEntity","id":"class-BaseEntity-bffff06c3008d71577c6933926aeaee9","file":"libs/ngx-diagrams/src/lib/base.entity.ts","type":"class","sourceCode":"import { MonoTypeOperatorFunction, Observable, Subject } from \'rxjs\';\\nimport { map } from \'rxjs/operators\';\\nimport { BaseEvent, LockEvent } from \'./interfaces/event.interface\';\\nimport { createValueState } from \'./state/state\';\\nimport {\\n  entityProperty as _entityProperty,\\n  ID,\\n  log as _log,\\n  LOG_LEVEL,\\n  UID,\\n  withLog as _withLog\\n} from \'./utils/tool-kit.util\';\\nimport { HashMap } from \'./utils/types\';\\n\\nexport type BaseEntityType = \'node\' | \'link\' | \'port\' | \'point\';\\n\\nexport class BaseEntity {\\n  protected _id: ID;\\n\\n  protected destroyed$ = new Subject<void>();\\n  protected locked$ = createValueState(false, this.entityPipe(\'locked\'));\\n\\n  protected readonly _logPrefix: string;\\n\\n  constructor(id?: ID, logPrefix = \'\') {\\n    this._id = id || UID();\\n    this._logPrefix = `${logPrefix}`;\\n  }\\n\\n  get id(): ID {\\n    return this._id;\\n  }\\n\\n  set id(id: ID) {\\n    this._id = id;\\n  }\\n\\n  log(message: string, ...args: any): void {\\n    _log(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\\n  }\\n\\n  withLog(message: string, ...args: any): any {\\n    return _withLog(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\\n  }\\n\\n  entityPipe<T>(logMessage = \'\'): MonoTypeOperatorFunction<T> {\\n    return _entityProperty<T>(this.onEntityDestroy(), 0, `${this._logPrefix}: ${logMessage}`);\\n  }\\n\\n  getLocked(): boolean {\\n    return this.locked$.value;\\n  }\\n\\n  setLocked(locked = true) {\\n    this.locked$.set(locked).emit();\\n  }\\n\\n  // eslint-disable-next-line\\n  doClone(lookupTable: HashMap<any> = {}, clone: any) {\\n    /*noop*/\\n  }\\n\\n  clone(lookupTable: HashMap<any> = {}) {\\n    // try and use an existing clone first\\n    if (lookupTable[this.id]) {\\n      return lookupTable[this.id];\\n    }\\n    const clone = { ...this };\\n    clone.id = UID();\\n    // clone.clearListeners();\\n    lookupTable[this.id] = clone;\\n\\n    this.doClone(lookupTable, clone);\\n    return clone;\\n  }\\n\\n  serialize() {\\n    return {\\n      id: this.id,\\n      locked: this.getLocked()\\n    };\\n  }\\n\\n  lockChanges(): Observable<LockEvent> {\\n    return this.locked$.select((locked) => new LockEvent(this, locked));\\n  }\\n\\n  destroy() {\\n    this.log(\'entity destroyed\');\\n    this.destroyed$.next();\\n    this.destroyed$.complete();\\n  }\\n\\n  onEntityDestroy(): Observable<BaseEvent<BaseEntity>> {\\n    return this.destroyed$.pipe(map((opts) => new BaseEvent(this, opts)));\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"id","type":"ID","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'\'"}],"line":23,"jsdoctags":[{"name":"id","type":"ID","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}]},"properties":[{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113]},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132]},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113]},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113]}],"methods":[{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}]},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}]},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}]},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}]},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}]}],"indexSignatures":[],"accessors":{"id":{"name":"id","setSignature":{"name":"id","type":"void","args":[{"name":"id","type":""}],"returnType":"void","line":34,"jsdoctags":[{"name":"id","type":"","tagName":{"text":"param"}}]},"getSignature":{"name":"id","type":"","returnType":"ID","line":30}}},"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"BaseEvent","id":"class-BaseEvent-0891b2f46b0f06f06af1483c5bb51095","file":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","sourceCode":"import { BaseEntity } from \'../base.entity\';\\nimport { ID, UID } from \'../utils/tool-kit.util\';\\n\\n// region events\\nexport class BaseEvent<T extends BaseEntity> {\\n  entity: T;\\n  entityId: ID;\\n  stopPropagation: () => any;\\n  firing: boolean;\\n  id: ID;\\n  propogate: boolean;\\n\\n  constructor(entity: T, options?: any) {\\n    this.id = UID();\\n    this.entity = entity;\\n    this.entityId = entity.id;\\n    this.firing = true;\\n    this.stopPropagation = () => (this.firing = false);\\n    this.propogate = options ? options.propagate : null;\\n  }\\n}\\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\\n  locked: boolean;\\n\\n  constructor(entity: T, locked = false) {\\n    super(entity);\\n    this.locked = locked;\\n  }\\n}\\nexport class ParentChangeEvent<\\n  P extends BaseEntity = BaseEntity,\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  parent: P;\\n\\n  constructor(entity: T, parent: P) {\\n    super(entity);\\n    this.parent = parent;\\n  }\\n}\\nexport class SelectionEvent<\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  isSelected: boolean;\\n\\n  constructor(entity: T, selected: boolean) {\\n    super(entity);\\n    this.isSelected = selected;\\n  }\\n}\\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\\n  T\\n> {\\n  isPainted: boolean;\\n\\n  constructor(entity: T, painted = false) {\\n    super(entity);\\n    this.isPainted = painted;\\n  }\\n}\\n// endregion\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"entity","type":"T"},{"name":"options","type":"any","optional":true}],"line":11,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}},{"name":"options","type":"any","optional":true,"tagName":{"text":"param"}}]},"properties":[{"name":"entity","type":"T","optional":false,"description":"","line":6},{"name":"entityId","type":"ID","optional":false,"description":"","line":7},{"name":"firing","type":"boolean","optional":false,"description":"","line":9},{"name":"id","type":"ID","optional":false,"description":"","line":10},{"name":"propogate","type":"boolean","optional":false,"description":"","line":11},{"name":"stopPropagation","type":"function","optional":false,"description":"","line":8}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"BaseModel","id":"class-BaseModel-5d301d36984037db077f2f691d4e5031","file":"libs/ngx-diagrams/src/lib/models/base.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { BaseEntity } from \'../base.entity\';\\nimport { PaintedEvent, ParentChangeEvent, SelectionEvent } from \'../interfaces/event.interface\';\\nimport { createValueState } from \'../state/state\';\\n\\nexport class BaseModel<E extends BaseEntity = BaseEntity> extends BaseEntity {\\n  protected readonly _type: string;\\n\\n  protected parent$ = createValueState<E>(null, this.entityPipe(\'ParentsChange\'));\\n  protected selected$ = createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'));\\n  protected hovered$ = createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'));\\n  protected painted$ = createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'));\\n\\n  constructor(type?: string, id?: string, logPrefix = \'[Base]\') {\\n    super(id, logPrefix);\\n    this._type = type;\\n  }\\n\\n  serialize() {\\n    return {\\n      ...super.serialize(),\\n      type: this.getType()\\n    };\\n  }\\n\\n  getParent(): E {\\n    return this.parent$.value;\\n  }\\n\\n  setParent(parent: E): void {\\n    this.parent$.set(parent).emit();\\n  }\\n\\n  parentChanges(): Observable<ParentChangeEvent<E>> {\\n    return this.parent$.select((p) => new ParentChangeEvent(this, p));\\n  }\\n\\n  getPainted(): boolean {\\n    return this.painted$.value;\\n  }\\n\\n  setPainted(painted = true): void {\\n    this.painted$.set(painted).emit();\\n  }\\n\\n  getHovered(): boolean {\\n    return this.hovered$.value;\\n  }\\n\\n  setHovered(painted = true): void {\\n    this.hovered$.set(painted).emit();\\n  }\\n\\n  selectHovered(): Observable<boolean> {\\n    return this.hovered$.value$;\\n  }\\n\\n  paintChanges(): Observable<PaintedEvent> {\\n    return this.painted$.select((p) => new PaintedEvent(this, p));\\n  }\\n\\n  getType(): string {\\n    return this._type;\\n  }\\n\\n  getSelected(): boolean {\\n    return this.selected$.value;\\n  }\\n\\n  selectSelected(): Observable<boolean> {\\n    return this.selected$.select();\\n  }\\n\\n  setSelected(selected = true): void {\\n    this.selected$.set(selected).emit();\\n  }\\n\\n  selectionChanges(): Observable<SelectionEvent> {\\n    return this.selected$.select((selected) => new SelectionEvent(this, selected));\\n  }\\n\\n  getSelectedEntities(): BaseModel[] {\\n    return this.getSelected() ? [this] : [];\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"type","type":"string","optional":true},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[Base]\'"}],"line":12,"jsdoctags":[{"name":"type","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Base]\'","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132]},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113]},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113]},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113]},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113]},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}]},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseEntity","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"CustomLabelFactory","id":"class-CustomLabelFactory-2f826698810ea3813f2e78f99631a9c6","file":"libs/ngx-diagrams/stories/label/custom/custom.factory.ts","type":"class","sourceCode":"import {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactoryResolver,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { AbstractLabelFactory, DefaultLabelModel } from \'ngx-diagrams\';\\nimport { CustomLabelComponent } from \'./custom-label.component\';\\n\\nexport class CustomLabelFactory extends AbstractLabelFactory<\\n  DefaultLabelModel\\n> {\\n  constructor(\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {\\n    super(\'custom-label\');\\n  }\\n\\n  generateWidget(\\n    label: CustomLabelComponent,\\n    labelHost: ViewContainerRef\\n  ): ComponentRef<CustomLabelComponent> {\\n    const componentRef = labelHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for link\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-labelid\', label.id);\\n\\n    // on destroy make sure to destroy the componentRef\\n    label.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(label).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<CustomLabelComponent> {\\n    return this.resolver.resolveComponentFactory(CustomLabelComponent);\\n  }\\n\\n  getNewInstance() {\\n    return new DefaultLabelModel();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":13,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"label","type":"CustomLabelComponent"},{"name":"labelHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<CustomLabelComponent>","typeParameters":[],"line":21,"jsdoctags":[{"name":"label","type":"CustomLabelComponent","tagName":{"text":"param"}},{"name":"labelHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<CustomLabelComponent>","typeParameters":[],"line":49},{"name":"generateWidget","args":[{"name":"label","type":"LabelModel"},{"name":"labelsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}},{"name":"labelsHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractLabelFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"CustomLinkFactory","id":"class-CustomLinkFactory-b82d353d878df477111c6cd67f6b2a18","file":"libs/ngx-diagrams/stories/link/custom/custom.factory.ts","type":"class","sourceCode":"import {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactoryResolver,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport {\\n  AbstractLinkFactory,\\n  DefaultLinkModel,\\n  DiagramEngine,\\n} from \'ngx-diagrams\';\\nimport { CustomLinkComponent } from \'./custom-link.component\';\\n\\nexport class CustomLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\\n  constructor(\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {\\n    super(\'custom-link\');\\n  }\\n\\n  generateWidget(\\n    diagramEngine: DiagramEngine,\\n    link: DefaultLinkModel,\\n    linksHost: ViewContainerRef\\n  ): ComponentRef<CustomLinkComponent> {\\n    const componentRef = linksHost.createComponent(this.getRecipe());\\n    link.setWidth(1);\\n    link.setColor(\'pink\');\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for link\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-linkid\', link.id);\\n\\n    // on destroy make sure to destroy the componentRef\\n    link.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(link).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    componentRef.instance.diagramEngine = diagramEngine;\\n    componentRef.instance.setPainted(true);\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<CustomLinkComponent> {\\n    return this.resolver.resolveComponentFactory(CustomLinkComponent);\\n  }\\n\\n  getNewInstance() {\\n    return new DefaultLinkModel({ type: \'custom-link\' });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":15,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"link","type":"DefaultLinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<CustomLinkComponent>","typeParameters":[],"line":23,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"link","type":"DefaultLinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":59},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<CustomLinkComponent>","typeParameters":[],"line":55},{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"link","type":"LinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractLinkFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"CustomNodeFactory","id":"class-CustomNodeFactory-d6b13b8289a83ba43b79deb34e7a4d44","file":"libs/ngx-diagrams/stories/node/custom/custom.factory.ts","type":"class","sourceCode":"import {\\n  ComponentFactoryResolver,\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport {\\n  AbstractNodeFactory,\\n  DefaultNodeModel,\\n  DiagramEngine,\\n} from \'ngx-diagrams\';\\nimport { CustomNodeComponent } from \'./custom.component\';\\n\\nexport class CustomNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\\n  constructor(\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {\\n    super(\'custom-node\');\\n  }\\n\\n  generateWidget(\\n    diagramEngine: DiagramEngine,\\n    node: DefaultNodeModel,\\n    nodesHost: ViewContainerRef\\n  ): ComponentRef<CustomNodeComponent> {\\n    const componentRef = nodesHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for node\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n    this.renderer.setStyle(rootNode, \'display\', \'block\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-nodeid\', node.id);\\n\\n    // subscribe to node coordinates\\n    node.selectCoords().subscribe(({ x, y }) => {\\n      this.renderer.setStyle(rootNode, \'left\', `${x}px`);\\n      this.renderer.setStyle(rootNode, \'top\', `${y}px`);\\n    });\\n\\n    node.selectionChanges().subscribe((e) => {\\n      e.isSelected\\n        ? this.renderer.addClass(rootNode, \'selected\')\\n        : this.renderer.removeClass(rootNode, \'selected\');\\n    });\\n\\n    node.onEntityDestroy().subscribe((e) => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(node).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    componentRef.instance.setDiagramEngine(diagramEngine);\\n\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<CustomNodeComponent> {\\n    return this.resolver.resolveComponentFactory(CustomNodeComponent);\\n  }\\n\\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\\n    return new DefaultNodeModel(...initialConfig);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":15,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"node","type":"DefaultNodeModel"},{"name":"nodesHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<CustomNodeComponent>","typeParameters":[],"line":23,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"node","type":"DefaultNodeModel","tagName":{"text":"param"}},{"name":"nodesHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"DefaultNodeModel","typeParameters":[],"line":70,"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}]},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<CustomNodeComponent>","typeParameters":[],"line":66},{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"node","type":"NodeModel"},{"name":"nodeHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"node","type":"NodeModel","tagName":{"text":"param"}},{"name":"nodeHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractNodeFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"CustomPortFactory","id":"class-CustomPortFactory-2a54d5185a68486bf444f625892abc4b","file":"libs/ngx-diagrams/stories/port/custom/custom.factory.ts","type":"class","sourceCode":"import {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactory,\\n  ComponentFactoryResolver,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { AbstractPortFactory, DefaultPortModel } from \'ngx-diagrams\';\\nimport { Observable } from \'rxjs\';\\nimport { map, takeUntil } from \'rxjs/operators\';\\nimport { CustomPortComponent } from \'./custom.component\';\\n\\nexport class CustomPortFactory extends AbstractPortFactory<\\n  CustomPortComponent\\n> {\\n  constructor(\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {\\n    super(\'custom-port\');\\n  }\\n\\n  generateWidget(\\n    port: DefaultPortModel,\\n    portsHost: ViewContainerRef\\n  ): ComponentRef<CustomPortComponent> {\\n    const componentRef = portsHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-portid\', port.id);\\n    this.renderer.setAttribute(rootNode, \'data-name\', port.getName());\\n\\n    port.in\\n      ? this.renderer.addClass(rootNode, \'in\')\\n      : this.renderer.addClass(rootNode, \'out\');\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(port).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    // this method will add classes to all ports that have links\\n    this.isConnected(port).subscribe((connected) => {\\n      connected\\n        ? this.renderer.addClass(rootNode, \'connected\')\\n        : this.renderer.removeClass(rootNode, \'connected\');\\n    });\\n\\n    port.onEntityDestroy().subscribe((e) => {\\n      componentRef.destroy();\\n    });\\n\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<CustomPortComponent> {\\n    return this.resolver.resolveComponentFactory(CustomPortComponent);\\n  }\\n\\n  getNewInstance(initialConfig?: any): DefaultPortModel {\\n    return new DefaultPortModel({\\n      isInput: true,\\n      name: \'unknown\',\\n      ...initialConfig,\\n    });\\n  }\\n\\n  isConnected(port: DefaultPortModel): Observable<boolean> {\\n    return port.selectLinks().pipe(\\n      takeUntil(port.onEntityDestroy()),\\n      map((links) => Object.keys(links).length > 0)\\n    );\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":15,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractPortFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"port","type":"DefaultPortModel"},{"name":"portsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<CustomPortComponent>","typeParameters":[],"line":23,"jsdoctags":[{"name":"port","type":"DefaultPortModel","tagName":{"text":"param"}},{"name":"portsHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"DefaultPortModel","typeParameters":[],"line":63,"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}]},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<CustomPortComponent>","typeParameters":[],"line":59},{"name":"isConnected","args":[{"name":"port","type":"DefaultPortModel"}],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":71,"jsdoctags":[{"name":"port","type":"DefaultPortModel","tagName":{"text":"param"}}]},{"name":"generateWidget","args":[{"name":"port","type":"PortModel"},{"name":"portHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}},{"name":"portHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractPortFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractPortFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractPortFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultLabelFactory","id":"class-DefaultLabelFactory-96e861f314d18a41443c25a77fa4c3e7","file":"libs/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts","type":"class","sourceCode":"import {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactoryResolver,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { AbstractLabelFactory } from \'../../factories/label.factory\';\\nimport { DefaultLabelComponent } from \'../components/default-label/default-label.component\';\\nimport { DefaultLabelModel } from \'../models/default-label.model\';\\n\\nexport class DefaultLabelFactory extends AbstractLabelFactory<\\n  DefaultLabelModel\\n> {\\n  constructor(\\n    protected resolver: ComponentFactoryResolver,\\n    protected renderer: Renderer2\\n  ) {\\n    super(\'default\');\\n  }\\n\\n  generateWidget(\\n    label: DefaultLabelComponent,\\n    labelHost: ViewContainerRef\\n  ): ComponentRef<DefaultLabelComponent> {\\n    const componentRef = labelHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for link\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-labelid\', label.id);\\n\\n    // on destroy make sure to destroy the componentRef\\n    label.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(label).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    componentRef.instance.setPainted(true);\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<DefaultLabelComponent> {\\n    return this.resolver.resolveComponentFactory(DefaultLabelComponent);\\n  }\\n\\n  getNewInstance() {\\n    return new DefaultLabelModel();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":14,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"label","type":"DefaultLabelComponent"},{"name":"labelHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<DefaultLabelComponent>","typeParameters":[],"line":22,"jsdoctags":[{"name":"label","type":"DefaultLabelComponent","tagName":{"text":"param"}},{"name":"labelHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":55},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<DefaultLabelComponent>","typeParameters":[],"line":51},{"name":"generateWidget","args":[{"name":"label","type":"LabelModel"},{"name":"labelsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}},{"name":"labelsHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLabelFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractLabelFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultLabelModel","id":"class-DefaultLabelModel-b4750b0902464b7f474059201f599717","file":"libs/ngx-diagrams/src/lib/defaults/models/default-label.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { LabelModel } from \'../../models/label.model\';\\nimport { createValueState } from \'../../state/state\';\\n\\nexport class DefaultLabelModel extends LabelModel {\\n  protected label$ = createValueState<string>(\'\', this.entityPipe(\'label\'));\\n\\n  constructor(label = \'NO LABEL\', type = \'default\', id?: string, logPrefix = \'[DefaultLabel]\') {\\n    super(type, id, logPrefix);\\n    this.setLabel(label);\\n  }\\n\\n  setLabel(label: string) {\\n    this.label$.set(label).emit();\\n  }\\n\\n  getLabel(): string {\\n    return this.label$.value;\\n  }\\n\\n  selectLabel(): Observable<string> {\\n    return this.label$.value$;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"label","type":"string","defaultValue":"\'NO LABEL\'"},{"name":"type","type":"string","defaultValue":"\'default\'"},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[DefaultLabel]\'"}],"line":6,"jsdoctags":[{"name":"label","type":"string","defaultValue":"\'NO LABEL\'","tagName":{"text":"param"}},{"name":"type","type":"string","defaultValue":"\'default\'","tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[DefaultLabel]\'","tagName":{"text":"param"}}]},"properties":[{"name":"label$","defaultValue":"createValueState<string>(\'\', this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":6,"modifierKind":[113]},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"rotation$","defaultValue":"createValueState<number>(0, this.entityPipe(\'rotation\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"LabelModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"LabelModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"LabelModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"getLabel","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":17},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":21},{"name":"setLabel","args":[{"name":"label","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":13,"jsdoctags":[{"name":"label","type":"string","tagName":{"text":"param"}}]},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33,"inheritance":{"file":"LabelModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":29,"inheritance":{"file":"LabelModel"}},{"name":"getRotation","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":25,"inheritance":{"file":"LabelModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":49,"inheritance":{"file":"LabelModel"}},{"name":"selectRotation","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":41,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLabelModel","typeParameters":[],"line":16,"inheritance":{"file":"LabelModel"}},{"name":"setCoords","args":[{"name":"newCoords","type":"Partial<Coords>"}],"optional":false,"returnType":"void","typeParameters":[],"line":45,"jsdoctags":[{"name":"newCoords","type":"Partial<Coords>","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setRotation","args":[{"name":"angle","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"jsdoctags":[{"name":"angle","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"LabelModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"LabelModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"LabelModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"LabelModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"LabelModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"LabelModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"LabelModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"LabelModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"LabelModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"LabelModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"LabelModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"LabelModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"LabelModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"LabelModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"LabelModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"LabelModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"LabelModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"LabelModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"LabelModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"LabelModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultLinkFactory","id":"class-DefaultLinkFactory-25e101736661c26463a9d88bb50091b2","file":"libs/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts","type":"class","sourceCode":"import { AbstractLinkFactory } from \'../../factories/link.factory\';\\nimport { DefaultLinkComponent } from \'../components/default-link/default-link.component\';\\nimport { DefaultLinkModel } from \'../models/default-link.model\';\\nimport {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactoryResolver,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { DiagramEngine } from \'../../services/engine.service\';\\n\\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\\n  constructor(\\n    protected resolver: ComponentFactoryResolver,\\n    protected renderer: Renderer2\\n  ) {\\n    super(\'default\');\\n  }\\n\\n  generateWidget(\\n    diagramEngine: DiagramEngine,\\n    link: DefaultLinkModel,\\n    linksHost: ViewContainerRef\\n  ): ComponentRef<DefaultLinkComponent> {\\n    const componentRef = linksHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for link\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n    this.renderer.addClass(rootNode, \'label\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-linkid\', link.id);\\n\\n    // on destroy make sure to destroy the componentRef\\n    link.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to link initialization.\\n    Object.entries(link).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    componentRef.instance.diagramEngine = diagramEngine;\\n    componentRef.instance.setPainted(true);\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<DefaultLinkComponent> {\\n    return this.resolver.resolveComponentFactory(DefaultLinkComponent);\\n  }\\n\\n  getNewInstance() {\\n    return new DefaultLinkModel();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":13,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"link","type":"DefaultLinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<DefaultLinkComponent>","typeParameters":[],"line":21,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"link","type":"DefaultLinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":57},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<DefaultLinkComponent>","typeParameters":[],"line":53},{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"link","type":"LinkModel"},{"name":"linksHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"name":"linksHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractLinkFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractLinkFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultLinkModel","id":"class-DefaultLinkModel-7ffded3d7d7bfe8e15ac676897b5c8d8","file":"libs/ngx-diagrams/src/lib/defaults/models/default-link.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { LinkModel } from \'../../models/link.model\';\\nimport { createValueState } from \'../../state/state\';\\n\\nexport class DefaultLinkModel extends LinkModel {\\n  width$ = createValueState<number>(3, this.entityPipe(\'width\'));\\n  color$ = createValueState<string>(\'rgba(255, 255, 255, 0.5)\', this.entityPipe(\'color\'));\\n  curvyness$ = createValueState<number>(50, this.entityPipe(\'curvyness\'));\\n\\n  constructor({\\n    type = \'default\',\\n    id,\\n    logPrefix = \'[DefaultLink]\'\\n  }: { type?: string; id?: string; logPrefix?: string } = {}) {\\n    super(type, id, logPrefix);\\n  }\\n\\n  setWidth(width: number) {\\n    this.width$.set(width).emit();\\n  }\\n\\n  setColor(color: string) {\\n    this.color$.set(color).emit();\\n  }\\n\\n  selectWidth(): Observable<number> {\\n    return this.width$.value$;\\n  }\\n\\n  selectColor(): Observable<string> {\\n    return this.color$.value$;\\n  }\\n\\n  setCurvyness(curvyness: number) {\\n    this.curvyness$.set(curvyness).emit();\\n  }\\n\\n  get color() {\\n    return this.color$.value;\\n  }\\n\\n  get width() {\\n    return this.width$.value;\\n  }\\n\\n  get curvyness() {\\n    return this.curvyness$.value;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"type":"literal type","defaultValue":"{}"}],"line":8,"jsdoctags":[{"type":"literal type","defaultValue":"{}","tagName":{"text":"param"}}]},"properties":[{"name":"color$","defaultValue":"createValueState<string>(\'rgba(255, 255, 255, 0.5)\', this.entityPipe(\'color\'))","type":"","optional":false,"description":"","line":7},{"name":"curvyness$","defaultValue":"createValueState<number>(50, this.entityPipe(\'curvyness\'))","type":"","optional":false,"description":"","line":8},{"name":"width$","defaultValue":"createValueState<number>(3, this.entityPipe(\'width\'))","type":"","optional":false,"description":"","line":6},{"name":"diagramEngine","type":"DiagramEngine","optional":false,"description":"","line":14,"inheritance":{"file":"LinkModel"}},{"name":"extras","type":"any","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"label$","defaultValue":"createValueState<LabelModel>(null, this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":23,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"name","type":"string","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"points","type":"PointModel[]","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"sourcePort","type":"PortModel | null","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"targetPort","type":"PortModel | null","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"LinkModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"LinkModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"LinkModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"selectColor","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":30},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":26},{"name":"setColor","args":[{"name":"color","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":22,"jsdoctags":[{"name":"color","type":"string","tagName":{"text":"param"}}]},{"name":"setCurvyness","args":[{"name":"curvyness","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"jsdoctags":[{"name":"curvyness","type":"number","tagName":{"text":"param"}}]},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":18,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}]},{"name":"addPoint","args":[{"name":"pointModel","type":"P"},{"name":"index","type":"number","defaultValue":"1"}],"optional":false,"returnType":"P","typeParameters":["P"],"line":222,"jsdoctags":[{"name":"pointModel","type":"P","tagName":{"text":"param"}},{"name":"index","type":"number","defaultValue":"1","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63,"inheritance":{"file":"LinkModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"object","defaultValue":"{}"},{"name":"clone","type":""}],"optional":false,"returnType":"void","typeParameters":[],"line":75,"jsdoctags":[{"name":"lookupTable","type":"object","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"generatePoint","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":229,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":55,"inheritance":{"file":"LinkModel"}},{"name":"getFirstPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":129,"inheritance":{"file":"LinkModel"}},{"name":"getLabel","args":[],"optional":false,"returnType":"LabelModel","typeParameters":[],"line":189,"inheritance":{"file":"LinkModel"}},{"name":"getLastPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":133,"inheritance":{"file":"LinkModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":51,"inheritance":{"file":"LinkModel"}},{"name":"getPointForPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":117,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointIndex","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":94,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointModel","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"PointModel | null","typeParameters":[],"line":98,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPoints","args":[],"optional":false,"returnType":"PointModel[]","typeParameters":[],"line":169,"inheritance":{"file":"LinkModel"}},{"name":"getPortForPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"PortModel","typeParameters":[],"line":107,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getSourcePort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":147,"inheritance":{"file":"LinkModel"}},{"name":"getTargetPort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":151,"inheritance":{"file":"LinkModel"}},{"name":"isLastPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":89,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"point","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":165,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removeMiddlePoints","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216,"inheritance":{"file":"LinkModel"}},{"name":"removePoint","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":204,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsAfter","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":212,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsBefore","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":208,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"resetLabel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"inheritance":{"file":"LinkModel"}},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<LabelModel | null>","typeParameters":[],"line":185,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLinkModel","typeParameters":[],"line":33,"inheritance":{"file":"LinkModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLabel","args":[{"name":"label","type":"LabelModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":180,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":233,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setName","args":[{"name":"name","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"jsdoctags":[{"name":"name","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setPoints","args":[{"name":"points","type":"PointModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"jsdoctags":[{"name":"points","type":"PointModel[]","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setSourcePort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":137,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setTargetPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":155,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"LinkModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"LinkModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"LinkModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"LinkModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"LinkModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"LinkModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"LinkModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"LinkModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"LinkModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"LinkModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"LinkModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"LinkModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"LinkModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"LinkModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"LinkModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"LinkModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"LinkModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"LinkModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"LinkModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"LinkModel","accessors":{"color":{"name":"color","getSignature":{"name":"color","type":"","returnType":"","line":38}},"width":{"name":"width","getSignature":{"name":"width","type":"","returnType":"","line":42}},"curvyness":{"name":"curvyness","getSignature":{"name":"curvyness","type":"","returnType":"","line":46}}},"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultNodeFactory","id":"class-DefaultNodeFactory-d41a8b81ce358e9e1614c08a58778217","file":"libs/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts","type":"class","sourceCode":"import { DefaultNodeComponent } from \'../components/default-node/default-node.component\';\\nimport { AbstractNodeFactory } from \'../../factories/node.factory\';\\nimport {\\n  ComponentFactoryResolver,\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactory,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { DiagramEngine } from \'../../services/engine.service\';\\nimport { DefaultNodeModel } from \'../models/default-node.model\';\\n\\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\\n  constructor(\\n    protected resolver: ComponentFactoryResolver,\\n    protected renderer: Renderer2\\n  ) {\\n    super(\'default\');\\n  }\\n\\n  generateWidget(\\n    diagramEngine: DiagramEngine,\\n    node: DefaultNodeModel,\\n    nodesHost: ViewContainerRef\\n  ): ComponentRef<DefaultNodeComponent> {\\n    const componentRef = nodesHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement;\\n\\n    // default style for node\\n    this.renderer.setStyle(rootNode, \'position\', \'absolute\');\\n    this.renderer.setStyle(rootNode, \'display\', \'block\');\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-nodeid\', node.id);\\n\\n    // subscribe to node coordinates\\n    node.selectCoords().subscribe(({ x, y }) => {\\n      this.renderer.setStyle(rootNode, \'left\', `${x}px`);\\n      this.renderer.setStyle(rootNode, \'top\', `${y}px`);\\n    });\\n\\n    node.selectionChanges().subscribe((e) => {\\n      e.isSelected\\n        ? this.renderer.addClass(rootNode, \'selected\')\\n        : this.renderer.removeClass(rootNode, \'selected\');\\n    });\\n\\n    node.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(node).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    componentRef.instance.setDiagramEngine(diagramEngine);\\n    componentRef.instance.setPainted(true);\\n\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<DefaultNodeComponent> {\\n    return this.resolver.resolveComponentFactory(DefaultNodeComponent);\\n  }\\n\\n  getNewInstance(initialConfig?: any): DefaultNodeModel {\\n    return new DefaultNodeModel(initialConfig);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":13,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"node","type":"DefaultNodeModel"},{"name":"nodesHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<DefaultNodeComponent>","typeParameters":[],"line":21,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"node","type":"DefaultNodeModel","tagName":{"text":"param"}},{"name":"nodesHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"DefaultNodeModel","typeParameters":[],"line":69,"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}]},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<DefaultNodeComponent>","typeParameters":[],"line":65},{"name":"generateWidget","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"node","type":"NodeModel"},{"name":"nodeHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":9,"modifierKind":[117],"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"node","type":"NodeModel","tagName":{"text":"param"}},{"name":"nodeHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractNodeFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractNodeFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultNodeModel","id":"class-DefaultNodeModel-4cac2955fdeb1c426fec196574293fdf","file":"libs/ngx-diagrams/src/lib/defaults/models/default-node.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { NodeModel } from \'../../models/node.model\';\\nimport { DefaultPortModel } from \'./default-port.model\';\\n\\nexport class DefaultNodeModel extends NodeModel {\\n  name: string;\\n  color: string;\\n  height$: Observable<number>;\\n  width$: Observable<number>;\\n\\n  constructor({\\n    name = \'Untitled\',\\n    type = \'default\',\\n    color = \'rgb(0, 192, 255)\',\\n    id\\n  }: {\\n    name?: string;\\n    type?: string;\\n    id?: string;\\n    color?: string;\\n  } = {}) {\\n    super(type, id);\\n    this.name = name;\\n    this.color = color;\\n    this.height$ = this.selectHeight();\\n    this.width$ = this.selectWidth();\\n  }\\n\\n  addInPort({\\n    name,\\n    type = \'default\',\\n    id,\\n    linkType = \'default\'\\n  }: {\\n    name: string;\\n    type?: string;\\n    id?: string;\\n    linkType?: string;\\n  }) {\\n    const port = new DefaultPortModel({\\n      isInput: true,\\n      name,\\n      type,\\n      id,\\n      label: null,\\n      linkType\\n    });\\n    this.addPort(port);\\n    return port;\\n  }\\n\\n  addOutPort({\\n    name,\\n    type = \'default\',\\n    id,\\n    linkType = \'default\',\\n    maximumLinks = null\\n  }: {\\n    name: string;\\n    type?: string;\\n    id?: string;\\n    linkType?: string;\\n    maximumLinks?: number;\\n  }) {\\n    const port = new DefaultPortModel({\\n      isInput: false,\\n      name,\\n      type,\\n      id,\\n      label: null,\\n      linkType,\\n      maximumLinks\\n    });\\n    this.addPort(port);\\n    return port;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"type":"literal type","defaultValue":"{}"}],"line":9,"jsdoctags":[{"type":"literal type","defaultValue":"{}","tagName":{"text":"param"}}]},"properties":[{"name":"color","type":"string","optional":false,"description":"","line":7},{"name":"height$","type":"Observable<number>","optional":false,"description":"","line":8},{"name":"name","type":"string","optional":false,"description":"","line":6},{"name":"width$","type":"Observable<number>","optional":false,"description":"","line":9},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"diagramEngine$","defaultValue":"createValueState<DiagramEngine>(null, this.entityPipe(\'diagramEngine\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"dimensions$","defaultValue":"createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe(\'dimensions\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"extras$","defaultValue":"createValueState<any>({}, this.entityPipe(\'extras\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"ports$","defaultValue":"createEntityState<P>([], this.entityPipe(\'ports\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"NodeModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"NodeModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"NodeModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"addInPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":29,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}]},{"name":"addOutPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":52,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}]},{"name":"addPort","args":[{"name":"port","type":"P"}],"optional":false,"returnType":"P","typeParameters":[],"line":117,"description":"<p>Assign a port to the node and set the node as its getParent</p>\\n","jsdoctags":[{"name":"port","type":"P","tagName":{"text":"param"}},{"tagName":{"pos":3515,"end":3522,"flags":0,"escapedText":"returns"},"comment":"<p>the inserted port</p>\\n"}],"inheritance":{"file":"NodeModel"}},{"name":"coordsChanges","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":97,"inheritance":{"file":"NodeModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":196,"inheritance":{"file":"NodeModel"}},{"name":"dimensionChanges","args":[],"optional":false,"returnType":"Observable<Dimensions>","typeParameters":[],"line":156,"inheritance":{"file":"NodeModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":48,"inheritance":{"file":"NodeModel"}},{"name":"getDiagramEngine","args":[],"optional":false,"returnType":"DiagramEngine","typeParameters":[],"line":36,"inheritance":{"file":"NodeModel"}},{"name":"getDimensions","args":[],"optional":false,"returnType":"Dimensions","typeParameters":[],"line":151,"inheritance":{"file":"NodeModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":188,"inheritance":{"file":"NodeModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":160,"inheritance":{"file":"NodeModel"}},{"name":"getPort","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"P","typeParameters":[],"line":129,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getPorts","args":[],"optional":false,"returnType":"EntityMap<P>","typeParameters":[],"line":139,"inheritance":{"file":"NodeModel"}},{"name":"getPortsArray","args":[],"optional":false,"returnType":"P[]","typeParameters":[],"line":143,"inheritance":{"file":"NodeModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":81,"inheritance":{"file":"NodeModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":168,"inheritance":{"file":"NodeModel"}},{"name":"removeAllPorts","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":201,"inheritance":{"file":"NodeModel"}},{"name":"removePort","args":[{"name":"portOrId","type":"ID | P"}],"optional":false,"returnType":"string","typeParameters":[],"line":123,"jsdoctags":[{"name":"portOrId","type":"ID | P","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":101,"inheritance":{"file":"NodeModel"}},{"name":"selectDiagramEngine","args":[],"optional":false,"returnType":"Observable<DiagramEngine>","typeParameters":[],"line":40,"inheritance":{"file":"NodeModel"}},{"name":"selectExtras","args":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}]}],"optional":false,"returnType":"Observable<E>","typeParameters":["E"],"line":192,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectHeight","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":180,"inheritance":{"file":"NodeModel"}},{"name":"selectPorts","args":[{"name":"selector","type":"function","optional":true,"function":[]}],"optional":false,"returnType":"Observable<P[]>","typeParameters":[],"line":133,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":176,"inheritance":{"file":"NodeModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":105,"inheritance":{"file":"NodeModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":109,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedNodeModel","typeParameters":[],"line":66,"inheritance":{"file":"NodeModel"}},{"name":"setCoords","args":[{"type":"Coords"}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDiagramEngine","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDimensions","args":[{"name":"dimensions","type":"Partial<Dimensions>"}],"optional":false,"returnType":"void","typeParameters":[],"line":147,"jsdoctags":[{"name":"dimensions","type":"Partial<Dimensions>","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":184,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setHeight","args":[{"name":"height","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":164,"jsdoctags":[{"name":"height","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":172,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"NodeModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"NodeModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"NodeModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"NodeModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"NodeModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"NodeModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"NodeModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"NodeModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"NodeModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"NodeModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"NodeModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"NodeModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"NodeModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"NodeModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"NodeModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"NodeModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"NodeModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"NodeModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"NodeModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"NodeModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultPortFactory","id":"class-DefaultPortFactory-178203c0dc04cd80bc9099c5a38728db","file":"libs/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts","type":"class","sourceCode":"import { AbstractPortFactory } from \'../../factories/port.factory\';\\nimport { DefaultPortModel } from \'../models/default-port.model\';\\nimport {\\n  ViewContainerRef,\\n  ComponentRef,\\n  ComponentFactory,\\n  ComponentFactoryResolver,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport { DefaultPortComponent } from \'../components/default-port/default-port.component\';\\n\\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\\n  constructor(\\n    protected resolver: ComponentFactoryResolver,\\n    protected renderer: Renderer2\\n  ) {\\n    super(\'default\');\\n  }\\n\\n  generateWidget(\\n    port: DefaultPortModel,\\n    portsHost: ViewContainerRef\\n  ): ComponentRef<DefaultPortComponent> {\\n    const componentRef = portsHost.createComponent(this.getRecipe());\\n\\n    // attach coordinates and default positional behaviour to the generated component host\\n    const rootNode = componentRef.location.nativeElement as HTMLElement;\\n\\n    // data attributes\\n    this.renderer.setAttribute(rootNode, \'data-portid\', port.id);\\n    this.renderer.setAttribute(rootNode, \'data-name\', port.getName());\\n\\n    port.in\\n      ? this.renderer.addClass(rootNode, \'in\')\\n      : this.renderer.addClass(rootNode, \'out\');\\n\\n    // assign all passed properties to node initialization.\\n    Object.entries(port).forEach(([key, value]) => {\\n      componentRef.instance[key] = value;\\n    });\\n\\n    port.onEntityDestroy().subscribe(() => {\\n      componentRef.destroy();\\n    });\\n\\n    componentRef.instance.setPainted(true);\\n    return componentRef;\\n  }\\n\\n  getRecipe(): ComponentFactory<DefaultPortComponent> {\\n    return this.resolver.resolveComponentFactory(DefaultPortComponent);\\n  }\\n\\n  getNewInstance(initialConfig?: any): DefaultPortModel {\\n    return new DefaultPortModel({\\n      isInput: true,\\n      name: \'unknown\',\\n      ...initialConfig,\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":12,"jsdoctags":[{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"properties":[{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractPortFactory"}},{"name":"_type","type":"string","optional":false,"description":"","line":4,"modifierKind":[113],"inheritance":{"file":"AbstractFactory"}}],"methods":[{"name":"generateWidget","args":[{"name":"port","type":"DefaultPortModel"},{"name":"portsHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<DefaultPortComponent>","typeParameters":[],"line":20,"jsdoctags":[{"name":"port","type":"DefaultPortModel","tagName":{"text":"param"}},{"name":"portsHost","type":"ViewContainerRef","tagName":{"text":"param"}}]},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"DefaultPortModel","typeParameters":[],"line":54,"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}]},{"name":"getRecipe","args":[],"optional":false,"returnType":"ComponentFactory<DefaultPortComponent>","typeParameters":[],"line":50},{"name":"generateWidget","args":[{"name":"port","type":"PortModel"},{"name":"portHost","type":"ViewContainerRef"}],"optional":false,"returnType":"ComponentRef<T>","typeParameters":[],"line":8,"modifierKind":[117],"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}},{"name":"portHost","type":"ViewContainerRef","tagName":{"text":"param"}}],"inheritance":{"file":"AbstractPortFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractPortFactory"}},{"name":"getNewInstance","args":[{"name":"initialConfig","type":"any","optional":true}],"optional":false,"returnType":"T","typeParameters":[],"line":14,"modifierKind":[117],"jsdoctags":[{"name":"initialConfig","type":"any","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"AbstractFactory"}}],"indexSignatures":[],"extends":"AbstractPortFactory","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DefaultPortModel","id":"class-DefaultPortModel-b5cb8b1a9da9dbe7b1256d26c00bcd6d","file":"libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts","type":"class","sourceCode":"import { LinkModel } from \'../../models/link.model\';\\nimport { PortModel } from \'../../models/port.model\';\\nimport { HashMap } from \'../../utils/types\';\\nimport { DefaultLinkModel } from \'./default-link.model\';\\n\\nexport interface DefaultPortModelConfig {\\n  id?: string;\\n  isInput?: boolean;\\n  name?: string;\\n  type?: string;\\n  label?: string;\\n  linkType?: string;\\n  maximumLinks?: number;\\n}\\n\\nexport class DefaultPortModel extends PortModel {\\n  in: boolean;\\n  label: string;\\n  links: HashMap<any>;\\n\\n  constructor({\\n    isInput = true,\\n    name = \'port\',\\n    type = \'default\',\\n    id = null,\\n    label = null,\\n    linkType = \'default\',\\n    maximumLinks = null\\n  }: DefaultPortModelConfig = {}) {\\n    super(name, type, id, null, linkType);\\n    this.in = isInput;\\n    this.label = label || name;\\n\\n    if (this.in) {\\n      this.setCanCreateLinks(false);\\n    } else {\\n      this.setMaximumLinks(maximumLinks);\\n      this.setMagnetic(false);\\n    }\\n  }\\n\\n  link(port: PortModel): LinkModel {\\n    if (super.getCanCreateLinks()) {\\n      const link = new DefaultLinkModel({ type: this.getLinkType() });\\n      link.setSourcePort(this);\\n      link.setTargetPort(port);\\n      return link;\\n    }\\n\\n    return null;\\n  }\\n\\n  createLinkModel() {\\n    if (super.getCanCreateLinks()) {\\n      return new DefaultLinkModel({ type: this.getLinkType() });\\n    }\\n  }\\n\\n  canLinkToPort(port: PortModel): boolean {\\n    if (port instanceof DefaultPortModel) {\\n      return this.in !== port.in;\\n    }\\n    return true;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"type":"DefaultPortModelConfig","defaultValue":"{}"}],"line":19,"jsdoctags":[{"type":"DefaultPortModelConfig","defaultValue":"{}","tagName":{"text":"param"}}]},"properties":[{"name":"in","type":"boolean","optional":false,"description":"","line":17},{"name":"label","type":"string","optional":false,"description":"","line":18},{"name":"links","type":"HashMap<any>","optional":false,"description":"","line":19},{"name":"canCreateLinks$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"height$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"links$","defaultValue":"createEntityState<LinkModel>([], this.entityPipe(\'links\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"linkType","type":"string","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"magnetic$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"maximumLinks","type":"number","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"name","type":"string","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"width$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"x$","defaultValue":"createValueState(0, this.entityPipe(\'x\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"y$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"PortModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"PortModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"PortModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":59,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53},{"name":"link","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"LinkModel","typeParameters":[],"line":42,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"addLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":140,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":163,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":171,"inheritance":{"file":"PortModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":177,"inheritance":{"file":"PortModel"}},{"name":"getCanCreateLinks","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":61,"inheritance":{"file":"PortModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"{ x: any; y: any; }","typeParameters":[],"line":71,"inheritance":{"file":"PortModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":111,"inheritance":{"file":"PortModel"}},{"name":"getLinks","args":[],"optional":false,"returnType":"EntityMap<LinkModel>","typeParameters":[],"line":144,"inheritance":{"file":"PortModel"}},{"name":"getLinksArray","args":[],"optional":false,"returnType":"LinkModel[]","typeParameters":[],"line":148,"inheritance":{"file":"PortModel"}},{"name":"getLinkType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":127,"inheritance":{"file":"PortModel"}},{"name":"getMagnetic","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":83,"inheritance":{"file":"PortModel"}},{"name":"getMaximumLinks","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":119,"inheritance":{"file":"PortModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":57,"inheritance":{"file":"PortModel"}},{"name":"getNode","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53,"inheritance":{"file":"PortModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":115,"inheritance":{"file":"PortModel"}},{"name":"getX","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":107,"inheritance":{"file":"PortModel"}},{"name":"getY","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":103,"inheritance":{"file":"PortModel"}},{"name":"isLocked","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":167,"inheritance":{"file":"PortModel"}},{"name":"removeLink","args":[{"name":"linkOrId","type":"ID | LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":135,"jsdoctags":[{"name":"linkOrId","type":"ID | LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"selectCanCreateLinks","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":75,"inheritance":{"file":"PortModel"}},{"name":"selectLinks","args":[],"optional":false,"returnType":"Observable<EntityMap<LinkModel>>","typeParameters":[],"line":152,"inheritance":{"file":"PortModel"}},{"name":"selectMagnetic","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":87,"inheritance":{"file":"PortModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":95,"inheritance":{"file":"PortModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":99,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":38,"inheritance":{"file":"PortModel"}},{"name":"setCanCreateLinks","args":[{"name":"value","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":79,"jsdoctags":[{"name":"value","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setLinkType","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMagnetic","args":[{"name":"magnetic","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":91,"jsdoctags":[{"name":"magnetic","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMaximumLinks","args":[{"name":"maximumLinks","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"jsdoctags":[{"name":"maximumLinks","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"updateCoords","args":[{"type":"literal type"}],"optional":false,"returnType":"void","typeParameters":[],"line":156,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"PortModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"PortModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"PortModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"PortModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"PortModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"PortModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"PortModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"PortModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"PortModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"PortModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"PortModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"PortModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"PortModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"PortModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"PortModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"PortModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"PortModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"PortModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"PortModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"PortModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"DiagramModel","id":"class-DiagramModel-99c958a9cfdb6d67579e23524b60ae39","file":"libs/ngx-diagrams/src/lib/models/diagram.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { BaseEntity, BaseEntityType } from \'../base.entity\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\nimport { SelectOptions } from \'../interfaces/select-options.interface\';\\nimport { SerializedDiagramModel } from \'../interfaces/serialization.interface\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\nimport { createEntityState, createValueState } from \'../state/state\';\\nimport { coerceArray, ID, isEmptyArray, unique } from \'../utils\';\\nimport { EntityMap } from \'../utils/types\';\\nimport { BaseModel } from \'./base.model\';\\nimport { LinkModel } from \'./link.model\';\\nimport { NodeModel } from \'./node.model\';\\nimport { PortModel } from \'./port.model\';\\n\\nexport class DiagramModel extends BaseEntity {\\n  protected nodes$ = createEntityState<NodeModel>([], this.entityPipe(\'nodes\'));\\n  protected links$ = createEntityState<LinkModel>([], this.entityPipe(\'links\'));\\n  protected offsetX$ = createValueState(0, this.entityPipe(\'offsetX\'));\\n  protected offsetY$ = createValueState(0, this.entityPipe(\'offsetY\'));\\n  protected zoom$ = createValueState(100, this.entityPipe(\'zoom\'));\\n  protected maxZoomOut$ = createValueState(null);\\n  protected maxZoomIn$ = createValueState(null);\\n  protected gridSize$ = createValueState(0);\\n\\n  constructor(protected diagramEngine: DiagramEngine, id?: string, logPrefix = \'[Diagram]\') {\\n    super(id, logPrefix);\\n  }\\n\\n  // TODO: support the following events for links and nodes\\n  // removed, updated<positionChanged/dataChanged>, added\\n  getNodes(): EntityMap<NodeModel> {\\n    return this.nodes$.value;\\n  }\\n\\n  getNodesArray(): NodeModel[] {\\n    return this.nodes$.array();\\n  }\\n\\n  getNode(id: ID): NodeModel | undefined {\\n    return this.nodes$.get(id);\\n  }\\n\\n  getLink(id: ID): LinkModel | undefined {\\n    return this.links$.get(id);\\n  }\\n\\n  getLinks(): EntityMap<LinkModel> {\\n    return this.links$.value;\\n  }\\n\\n  getLinksArray(): LinkModel[] {\\n    return this.links$.array();\\n  }\\n\\n  getAllPorts(options: SelectOptions<PortModel> = {}): Map<string, PortModel> {\\n    const result = new Map<ID, PortModel>();\\n\\n    this.getNodes().forEach((node) => {\\n      const ports = options.filter ? node.getPortsArray().filter(options.filter) : node.getPortsArray();\\n      ports.forEach((port) => result.set(port.id, port));\\n    });\\n\\n    return result;\\n  }\\n\\n  /**\\n   * Add a node to the diagram\\n   * @returns Inserted Node\\n   */\\n  addNode(node: NodeModel): NodeModel {\\n    this.nodes$.add(node).emit();\\n    return node;\\n  }\\n\\n  /**\\n   * Delete a node from the diagram\\n   */\\n  deleteNode(nodeOrId: NodeModel | string): void {\\n    const nodeId: ID = typeof nodeOrId === \'string\' ? nodeOrId : nodeOrId.id;\\n    const node = this.getNode(nodeId);\\n\\n    for (const port of node.getPorts().values()) {\\n      for (const link of port.getLinks().values()) {\\n        this.deleteLink(link);\\n      }\\n    }\\n\\n    this.nodes$.remove(nodeId).emit();\\n  }\\n\\n  /**\\n   * Get nodes as observable, use `.getValue()` for snapshot\\n   */\\n  selectNodes(): Observable<EntityMap<NodeModel>> {\\n    return this.nodes$.value$;\\n  }\\n\\n  /**\\n   * Add link\\n   * @returns Newly created link\\n   */\\n  addLink(link: LinkModel): LinkModel {\\n    this.links$.add(link).emit();\\n    return link;\\n  }\\n\\n  /**\\n   * Delete link\\n   */\\n  deleteLink(linkOrId: LinkModel | string) {\\n    const linkId: ID = typeof linkOrId === \'string\' ? linkOrId : linkOrId.id;\\n    this.links$.remove(linkId).emit();\\n  }\\n\\n  reset() {\\n    this.nodes$.clear().emit();\\n    this.links$.clear().emit();\\n  }\\n\\n  /**\\n   * Get links behaviour subject, use `.getValue()` for snapshot\\n   */\\n  selectLinks(): Observable<EntityMap<LinkModel>> {\\n    return this.links$.value$;\\n  }\\n\\n  // /**\\n  //  * Serialize the diagram model to JSON\\n  //  * @returns diagram model as a string\\n  //  */\\n  serialize(): SerializedDiagramModel {\\n    const serializedNodes = this.nodes$.map((node) => node.serialize());\\n    const serializedLinks = this.links$.map((link) => link.serialize());\\n\\n    return { ...super.serialize(), nodes: serializedNodes, links: serializedLinks };\\n  }\\n\\n  setMaxZoomOut(maxZoomOut: number) {\\n    this.maxZoomOut$.set(maxZoomOut).emit();\\n  }\\n\\n  setMaxZoomIn(maxZoomIn: number) {\\n    this.maxZoomIn$.set(maxZoomIn).emit();\\n  }\\n\\n  getMaxZoomOut() {\\n    return this.maxZoomOut$.value;\\n  }\\n\\n  getMaxZoomIn() {\\n    return this.maxZoomIn$.value;\\n  }\\n\\n  setOffset(x: number, y: number) {\\n    this.offsetX$.set(x).emit();\\n    this.offsetY$.set(y).emit();\\n  }\\n\\n  setOffsetX(x: number) {\\n    this.offsetX$.set(x).emit();\\n  }\\n\\n  getOffsetX(): number {\\n    return this.offsetX$.value;\\n  }\\n\\n  selectOffsetX(): Observable<number> {\\n    return this.offsetX$.value$;\\n  }\\n\\n  setOffsetY(y: number) {\\n    this.offsetY$.set(y).emit();\\n  }\\n\\n  getOffsetY(): number {\\n    return this.offsetY$.value;\\n  }\\n\\n  selectOffsetY(): Observable<number> {\\n    return this.offsetY$.value$;\\n  }\\n\\n  setZoomLevel(z: number) {\\n    const maxZoomIn = this.getMaxZoomIn();\\n    const maxZoomOut = this.getMaxZoomOut();\\n\\n    // check if zoom levels exceeded defined boundaries\\n    if ((maxZoomIn && z > maxZoomIn) || (maxZoomOut && z < maxZoomOut)) {\\n      return;\\n    }\\n\\n    this.zoom$.set(z).emit();\\n  }\\n\\n  getZoomLevel(): number {\\n    return this.zoom$.value;\\n  }\\n\\n  selectZoomLevel(): Observable<number> {\\n    return this.zoom$.value$;\\n  }\\n\\n  getDiagramEngine(): DiagramEngine {\\n    return this.diagramEngine;\\n  }\\n\\n  clearSelection(ignore: BaseModel | null = null) {\\n    this.getSelectedItems().forEach((element) => {\\n      if (ignore?.id === element.id) {\\n        return;\\n      }\\n      element.setSelected(false);\\n    });\\n  }\\n\\n  getGridPosition({ x, y }: Coords): Coords {\\n    const gridSize = this.gridSize$.value;\\n    if (gridSize === 0) {\\n      return { x, y };\\n    }\\n\\n    return {\\n      x: gridSize * Math.floor((x + gridSize / 2) / gridSize),\\n      y: gridSize * Math.floor((y + gridSize / 2) / gridSize)\\n    };\\n  }\\n\\n  getSelectedItems(...filters: BaseEntityType[]): BaseModel[] {\\n    filters = coerceArray(filters);\\n\\n    const items: BaseModel[] = [];\\n    const nodes = this.nodes$.array();\\n    const links = this.links$.array();\\n\\n    const selectedNodes = () => nodes.flatMap((node) => node.getSelectedEntities());\\n    const selectedPorts = () =>\\n      nodes.flatMap((node) => node.getPortsArray().flatMap((port: PortModel) => port.getSelectedEntities()));\\n    const selectedLinks = () => links.flatMap((link) => link.getSelectedEntities());\\n    const selectedPoints = () =>\\n      links.flatMap((link) => link.getPoints().flatMap((point) => point.getSelectedEntities()));\\n\\n    if (isEmptyArray(filters)) {\\n      items.push(...selectedNodes(), ...selectedPorts(), ...selectedLinks(), ...selectedPoints());\\n    } else {\\n      const byType: Record<BaseEntityType, () => BaseModel[]> = {\\n        node: selectedNodes,\\n        port: selectedPorts,\\n        link: selectedLinks,\\n        point: selectedPoints\\n      };\\n\\n      for (const type of filters) {\\n        items.push(...byType[type]());\\n      }\\n    }\\n\\n    return unique(items);\\n  }\\n\\n  addAll(...models: BaseModel[]) {\\n    const links: LinkModel[] = [];\\n    const nodes: NodeModel[] = [];\\n\\n    for (const model of models) {\\n      if (model instanceof LinkModel) {\\n        links.push(model);\\n      } else if (model instanceof NodeModel) {\\n        nodes.push(model);\\n      }\\n    }\\n\\n    this.addLinks(links);\\n    this.addNodes(nodes);\\n\\n    return models;\\n  }\\n\\n  addLinks(links: LinkModel[]) {\\n    this.links$.addMany(links).emit();\\n  }\\n\\n  addNodes(nodes: NodeModel[]) {\\n    this.nodes$.addMany(nodes).emit();\\n  }\\n\\n  destroy() {\\n    super.destroy();\\n    this.nodes$.destroy();\\n    this.links$.destroy();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[Diagram]\'"}],"line":23,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Diagram]\'","tagName":{"text":"param"}}]},"properties":[{"name":"gridSize$","defaultValue":"createValueState(0)","type":"","optional":false,"description":"","line":23,"modifierKind":[113]},{"name":"links$","defaultValue":"createEntityState<LinkModel>([], this.entityPipe(\'links\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113]},{"name":"maxZoomIn$","defaultValue":"createValueState(null)","type":"","optional":false,"description":"","line":22,"modifierKind":[113]},{"name":"maxZoomOut$","defaultValue":"createValueState(null)","type":"","optional":false,"description":"","line":21,"modifierKind":[113]},{"name":"nodes$","defaultValue":"createEntityState<NodeModel>([], this.entityPipe(\'nodes\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113]},{"name":"offsetX$","defaultValue":"createValueState(0, this.entityPipe(\'offsetX\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113]},{"name":"offsetY$","defaultValue":"createValueState(0, this.entityPipe(\'offsetY\'))","type":"","optional":false,"description":"","line":19,"modifierKind":[113]},{"name":"zoom$","defaultValue":"createValueState(100, this.entityPipe(\'zoom\'))","type":"","optional":false,"description":"","line":20,"modifierKind":[113]},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"addAll","args":[{"name":"models","type":"BaseModel[]","dotDotDotToken":true}],"optional":false,"returnType":"{}","typeParameters":[],"line":260,"jsdoctags":[{"name":"models","type":"BaseModel[]","dotDotDotToken":true,"tagName":{"text":"param"}}]},{"name":"addLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"LinkModel","typeParameters":[],"line":102,"description":"<p>Add link</p>\\n","jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"tagName":{"pos":3094,"end":3101,"flags":0,"escapedText":"returns"},"comment":"<p>Newly created link</p>\\n"}]},{"name":"addLinks","args":[{"name":"links","type":"LinkModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":278,"jsdoctags":[{"name":"links","type":"LinkModel[]","tagName":{"text":"param"}}]},{"name":"addNode","args":[{"name":"node","type":"NodeModel"}],"optional":false,"returnType":"NodeModel","typeParameters":[],"line":70,"description":"<p>Add a node to the diagram</p>\\n","jsdoctags":[{"name":"node","type":"NodeModel","tagName":{"text":"param"}},{"tagName":{"pos":2372,"end":2379,"flags":0,"escapedText":"returns"},"comment":"<p>Inserted Node</p>\\n"}]},{"name":"addNodes","args":[{"name":"nodes","type":"NodeModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":282,"jsdoctags":[{"name":"nodes","type":"NodeModel[]","tagName":{"text":"param"}}]},{"name":"clearSelection","args":[{"name":"ignore","type":"BaseModel | null","defaultValue":"null"}],"optional":false,"returnType":"void","typeParameters":[],"line":207,"jsdoctags":[{"name":"ignore","type":"BaseModel | null","defaultValue":"null","tagName":{"text":"param"}}]},{"name":"deleteLink","args":[{"name":"linkOrId","type":"LinkModel | string"}],"optional":false,"returnType":"void","typeParameters":[],"line":110,"description":"<p>Delete link</p>\\n","jsdoctags":[{"name":"linkOrId","type":"LinkModel | string","tagName":{"text":"param"}}]},{"name":"deleteNode","args":[{"name":"nodeOrId","type":"NodeModel | string"}],"optional":false,"returnType":"void","typeParameters":[],"line":78,"description":"<p>Delete a node from the diagram</p>\\n","jsdoctags":[{"name":"nodeOrId","type":"NodeModel | string","tagName":{"text":"param"}}]},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":286},{"name":"getAllPorts","args":[{"name":"options","type":"SelectOptions<PortModel>","defaultValue":"{}"}],"optional":false,"returnType":"Map<string, PortModel>","typeParameters":[],"line":55,"jsdoctags":[{"name":"options","type":"SelectOptions<PortModel>","defaultValue":"{}","tagName":{"text":"param"}}]},{"name":"getDiagramEngine","args":[],"optional":false,"returnType":"DiagramEngine","typeParameters":[],"line":203},{"name":"getGridPosition","args":[{"type":"Coords"}],"optional":false,"returnType":"Coords","typeParameters":[],"line":216,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}]},{"name":"getLink","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"LinkModel | undefined","typeParameters":[],"line":43,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"getLinks","args":[],"optional":false,"returnType":"EntityMap<LinkModel>","typeParameters":[],"line":47},{"name":"getLinksArray","args":[],"optional":false,"returnType":"LinkModel[]","typeParameters":[],"line":51},{"name":"getMaxZoomIn","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":150},{"name":"getMaxZoomOut","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":146},{"name":"getNode","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"NodeModel | undefined","typeParameters":[],"line":39,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"getNodes","args":[],"optional":false,"returnType":"EntityMap<NodeModel>","typeParameters":[],"line":31},{"name":"getNodesArray","args":[],"optional":false,"returnType":"NodeModel[]","typeParameters":[],"line":35},{"name":"getOffsetX","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":163},{"name":"getOffsetY","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":175},{"name":"getSelectedItems","args":[{"name":"filters","type":"BaseEntityType[]","dotDotDotToken":true}],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":228,"jsdoctags":[{"name":"filters","type":"BaseEntityType[]","dotDotDotToken":true,"tagName":{"text":"param"}}]},{"name":"getZoomLevel","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":195},{"name":"reset","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":115},{"name":"selectLinks","args":[],"optional":false,"returnType":"Observable<EntityMap<LinkModel>>","typeParameters":[],"line":123,"description":"<p>Get links behaviour subject, use <code>.getValue()</code> for snapshot</p>\\n"},{"name":"selectNodes","args":[],"optional":false,"returnType":"Observable<EntityMap<NodeModel>>","typeParameters":[],"line":94,"description":"<p>Get nodes as observable, use <code>.getValue()</code> for snapshot</p>\\n"},{"name":"selectOffsetX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":167},{"name":"selectOffsetY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":179},{"name":"selectZoomLevel","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":199},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedDiagramModel","typeParameters":[],"line":131},{"name":"setMaxZoomIn","args":[{"name":"maxZoomIn","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":142,"jsdoctags":[{"name":"maxZoomIn","type":"number","tagName":{"text":"param"}}]},{"name":"setMaxZoomOut","args":[{"name":"maxZoomOut","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":138,"jsdoctags":[{"name":"maxZoomOut","type":"number","tagName":{"text":"param"}}]},{"name":"setOffset","args":[{"name":"x","type":"number"},{"name":"y","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":154,"jsdoctags":[{"name":"x","type":"number","tagName":{"text":"param"}},{"name":"y","type":"number","tagName":{"text":"param"}}]},{"name":"setOffsetX","args":[{"name":"x","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":159,"jsdoctags":[{"name":"x","type":"number","tagName":{"text":"param"}}]},{"name":"setOffsetY","args":[{"name":"y","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":171,"jsdoctags":[{"name":"y","type":"number","tagName":{"text":"param"}}]},{"name":"setZoomLevel","args":[{"name":"z","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":183,"jsdoctags":[{"name":"z","type":"number","tagName":{"text":"param"}}]},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseEntity","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"EntityState","id":"class-EntityState-c5c9ec0689790bb9f304685a3503ca84","file":"libs/ngx-diagrams/src/lib/state/state.ts","type":"class","sourceCode":"import { BehaviorSubject, MonoTypeOperatorFunction, Observable, OperatorFunction } from \'rxjs\';\\nimport { distinctUntilChanged, map } from \'rxjs/operators\';\\nimport { BaseEntity } from \'../base.entity\';\\nimport { ID, isArray, mapToEntries } from \'../utils\';\\nimport { EntityMap, Entries, HashMap } from \'../utils/types\';\\n\\nexport class ValueState<T> {\\n  protected readonly stream$: BehaviorSubject<T>;\\n\\n  readonly value$: Observable<T>;\\n\\n  constructor(value?: T, operator?: OperatorFunction<any, any>) {\\n    this.stream$ = new BehaviorSubject(value);\\n    this.value$ = operator ? this.stream$.pipe(operator) : this.stream$.asObservable();\\n  }\\n\\n  get value(): T {\\n    return this.stream$.getValue();\\n  }\\n\\n  set(value: T): ValueState<T> {\\n    this.stream$.next(value);\\n    return this;\\n  }\\n\\n  emit(): void {\\n    this.stream$.next(this.value);\\n  }\\n\\n  select(): Observable<T>;\\n  select(project: (value: T) => T): Observable<T>;\\n  select<R>(project: (value: T) => R): Observable<R>;\\n  select<R>(project?: ((value: T) => T) | ((value: T) => R)): Observable<T | R> {\\n    const mapFn = project || ((v) => v);\\n    return this.value$.pipe(\\n      map((value) => mapFn(value)),\\n      distinctUntilChanged()\\n    );\\n  }\\n}\\n\\nexport function createValueState<T>(value: T, operator?: OperatorFunction<any, any>): ValueState<T> {\\n  return new ValueState<T>(value, operator);\\n}\\n\\nexport class EntityState<T extends BaseEntity> extends ValueState<EntityMap<T>> {\\n  protected stream$: BehaviorSubject<EntityMap<T>>;\\n\\n  value$: Observable<EntityMap<T>>;\\n\\n  constructor(value?: EntityMap<T>, entityPipe?: MonoTypeOperatorFunction<EntityMap<T>>) {\\n    super(value, entityPipe);\\n  }\\n\\n  destroy() {\\n    this.clear();\\n    this.stream$ = null;\\n    this.value$ = null;\\n  }\\n\\n  clear(destroy = true) {\\n    if (destroy) {\\n      this.forEach((entity) => entity.destroy());\\n    }\\n\\n    this.value.clear();\\n    return this;\\n  }\\n\\n  get(id: ID): T {\\n    return this.value.get(id);\\n  }\\n\\n  has(id: ID): boolean {\\n    return this.value.has(id);\\n  }\\n\\n  add(entity: T): EntityState<T> {\\n    this.value.set(entity.id, entity);\\n    return this;\\n  }\\n\\n  addMany(entities: T[]): EntityState<T> {\\n    for (const entity of entities) {\\n      this.add(entity);\\n    }\\n    return this;\\n  }\\n\\n  remove(id: ID, destroy = true): EntityState<T> {\\n    if (destroy) {\\n      this.value.get(id)?.destroy();\\n    }\\n\\n    this.value.delete(id);\\n    return this;\\n  }\\n\\n  array(): T[] {\\n    return Array.from(this.value.values());\\n  }\\n\\n  array$(): Observable<T[]> {\\n    return this.select((value) => Array.from(value.values()));\\n  }\\n\\n  forEach(cb: (value: T, key: string, map: EntityMap<T>) => void): void {\\n    this.value.forEach(cb);\\n  }\\n\\n  map<R = any>(cb: (value: T, index: number, array: T[]) => R): R[] {\\n    return this.array().map(cb);\\n  }\\n}\\n\\nexport function createEntityState<T extends BaseEntity>(\\n  value: HashMap<T> | Entries<T> = [],\\n  entityPipe: MonoTypeOperatorFunction<Map<ID, T>>\\n): EntityState<T> {\\n  if (isArray(value)) {\\n    return new EntityState(new Map(value), entityPipe);\\n  } else {\\n    return new EntityState(new Map(mapToEntries(value)), entityPipe);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"value","type":"EntityMap<T>","optional":true},{"name":"entityPipe","type":"MonoTypeOperatorFunction<EntityMap<T>>","optional":true}],"line":49,"jsdoctags":[{"name":"value","type":"EntityMap<T>","optional":true,"tagName":{"text":"param"}},{"name":"entityPipe","type":"MonoTypeOperatorFunction<EntityMap<T>>","optional":true,"tagName":{"text":"param"}}]},"properties":[{"name":"stream$","type":"BehaviorSubject<EntityMap<T>>","optional":false,"description":"","line":47,"modifierKind":[113]},{"name":"value$","type":"Observable<EntityMap<T>>","optional":false,"description":"","line":49},{"name":"stream$","type":"BehaviorSubject<T>","optional":false,"description":"","line":8,"modifierKind":[113,132],"inheritance":{"file":"ValueState"}},{"name":"value$","type":"Observable<T>","optional":false,"description":"","line":10,"modifierKind":[132],"inheritance":{"file":"ValueState"}}],"methods":[{"name":"add","args":[{"name":"entity","type":"T"}],"optional":false,"returnType":"EntityState<T>","typeParameters":[],"line":78,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}}]},{"name":"addMany","args":[{"name":"entities","type":"T[]"}],"optional":false,"returnType":"EntityState<T>","typeParameters":[],"line":83,"jsdoctags":[{"name":"entities","type":"T[]","tagName":{"text":"param"}}]},{"name":"array","args":[],"optional":false,"returnType":"T[]","typeParameters":[],"line":99},{"name":"array$","args":[],"optional":false,"returnType":"Observable<T[]>","typeParameters":[],"line":103},{"name":"clear","args":[{"name":"destroy","type":"","defaultValue":"true"}],"optional":false,"returnType":"this","typeParameters":[],"line":61,"jsdoctags":[{"name":"destroy","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":55},{"name":"forEach","args":[{"name":"cb","type":"function","function":[{"name":"value","type":"T"},{"name":"key","type":"string"},{"name":"map","type":"EntityMap<T>"}]}],"optional":false,"returnType":"void","typeParameters":[],"line":107,"jsdoctags":[{"name":"cb","type":"function","function":[{"name":"value","type":"T"},{"name":"key","type":"string"},{"name":"map","type":"EntityMap<T>"}],"tagName":{"text":"param"}}]},{"name":"get","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"T","typeParameters":[],"line":70,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"has","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":74,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"map","args":[{"name":"cb","type":"function","function":[{"name":"value","type":"T"},{"name":"index","type":"number"},{"name":"array","type":"T[]"}]}],"optional":false,"returnType":"R[]","typeParameters":["R"],"line":111,"jsdoctags":[{"name":"cb","type":"function","function":[{"name":"value","type":"T"},{"name":"index","type":"number"},{"name":"array","type":"T[]"}],"tagName":{"text":"param"}}]},{"name":"remove","args":[{"name":"id","type":"ID"},{"name":"destroy","type":"","defaultValue":"true"}],"optional":false,"returnType":"EntityState<T>","typeParameters":[],"line":90,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}},{"name":"destroy","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"emit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":26,"inheritance":{"file":"ValueState"}},{"name":"select","args":[],"optional":false,"returnType":"Observable<T>","typeParameters":[],"line":30,"inheritance":{"file":"ValueState"}},{"name":"select","args":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}]}],"optional":false,"returnType":"Observable<T>","typeParameters":[],"line":31,"jsdoctags":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}],"tagName":{"text":"param"}}],"inheritance":{"file":"ValueState"}},{"name":"select","args":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}]}],"optional":false,"returnType":"Observable<R>","typeParameters":["R"],"line":32,"jsdoctags":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}],"tagName":{"text":"param"}}],"inheritance":{"file":"ValueState"}},{"name":"select","args":[{"name":"project","type":" | ","optional":true}],"optional":false,"returnType":"Observable<T | R>","typeParameters":["R"],"line":33,"jsdoctags":[{"name":"project","type":" | ","optional":true,"tagName":{"text":"param"}}],"inheritance":{"file":"ValueState"}},{"name":"set","args":[{"name":"value","type":"T"}],"optional":false,"returnType":"ValueState<T>","typeParameters":[],"line":21,"jsdoctags":[{"name":"value","type":"T","tagName":{"text":"param"}}],"inheritance":{"file":"ValueState"}}],"indexSignatures":[],"extends":"ValueState","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"InvalidLinkDestroyed","id":"class-InvalidLinkDestroyed-95b1a49a1852ef4c44b485fa4e6ec89b","file":"libs/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { PortModel } from \'../models/port.model\';\\nimport { NodeModel } from \'../models/node.model\';\\nimport { LinkModel } from \'../models\';\\n\\nexport class InvalidLinkDestroyed extends BaseAction {\\n  sourcePort: PortModel;\\n  link: LinkModel;\\n\\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\\n    super(mouseX, mouseY);\\n    this.sourcePort = link.getSourcePort();\\n    this.link = link;\\n  }\\n\\n  getOutPortNode(): NodeModel {\\n    return this.sourcePort.getParent();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"},{"name":"link","type":"LinkModel"}],"line":8,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}}]},"properties":[{"name":"link","type":"LinkModel","optional":false,"description":"","line":8},{"name":"sourcePort","type":"PortModel","optional":false,"description":"","line":7},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[{"name":"getOutPortNode","args":[],"optional":false,"returnType":"NodeModel","typeParameters":[],"line":16}],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LabelModel","id":"class-LabelModel-71c3b8448abb0e97c60420a7e436ffb5","file":"libs/ngx-diagrams/src/lib/models/label.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\nimport { SerializedLabelModel } from \'../interfaces/serialization.interface\';\\nimport { createValueState } from \'../state/state\';\\nimport { BaseModel } from \'./base.model\';\\nimport { LinkModel } from \'./link.model\';\\n\\nexport class LabelModel extends BaseModel<LinkModel> {\\n  protected coords$ = createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'));\\n  protected rotation$ = createValueState<number>(0, this.entityPipe(\'rotation\'));\\n\\n  constructor(type?: string, id?: string, logPrefix = \'[Label]\') {\\n    super(type, id, logPrefix);\\n  }\\n\\n  serialize(): SerializedLabelModel {\\n    return {\\n      ...super.serialize(),\\n      type: this.getType(),\\n      rotation: this.getRotation(),\\n      coords: this.getCoords()\\n    };\\n  }\\n\\n  getRotation() {\\n    return this.rotation$.value;\\n  }\\n\\n  getCoords() {\\n    return this.coords$.value;\\n  }\\n\\n  destroy() {\\n    super.destroy();\\n  }\\n\\n  setRotation(angle: number) {\\n    this.rotation$.set(angle).emit();\\n  }\\n\\n  selectRotation(): Observable<number> {\\n    return this.rotation$.value$;\\n  }\\n\\n  setCoords(newCoords: Partial<Coords>) {\\n    this.coords$.set({ ...this.coords$.value, ...newCoords }).emit();\\n  }\\n\\n  selectCoords(): Observable<Coords> {\\n    return this.coords$.value$;\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"type","type":"string","optional":true},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[Label]\'"}],"line":10,"jsdoctags":[{"name":"type","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Label]\'","tagName":{"text":"param"}}]},"properties":[{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113]},{"name":"rotation$","defaultValue":"createValueState<number>(0, this.entityPipe(\'rotation\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113]},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33},{"name":"getCoords","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":29},{"name":"getRotation","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":25},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":49},{"name":"selectRotation","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":41},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLabelModel","typeParameters":[],"line":16},{"name":"setCoords","args":[{"name":"newCoords","type":"Partial<Coords>"}],"optional":false,"returnType":"void","typeParameters":[],"line":45,"jsdoctags":[{"name":"newCoords","type":"Partial<Coords>","tagName":{"text":"param"}}]},{"name":"setRotation","args":[{"name":"angle","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"jsdoctags":[{"name":"angle","type":"number","tagName":{"text":"param"}}]},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LinkCreatedAction","id":"class-LinkCreatedAction-fb462d46eff221bda114c3ac5e6d6197","file":"libs/ngx-diagrams/src/lib/actions/links-created.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { PortModel } from \'../models/port.model\';\\nimport { NodeModel } from \'../models/node.model\';\\nimport { LinkModel } from \'../models\';\\n\\n// TODO: refactor into entity-created.action, and fire every time a new entity is created!\\nexport class LinkCreatedAction extends BaseAction {\\n  sourcePort: PortModel;\\n  targetPort: PortModel;\\n  link: LinkModel;\\n\\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\\n    super(mouseX, mouseY);\\n    this.sourcePort = link.getSourcePort();\\n    this.targetPort = link.getTargetPort();\\n    this.link = link;\\n  }\\n\\n  getOutPortNode(): NodeModel {\\n    return this.sourcePort.getParent();\\n  }\\n\\n  getInPortNode(): NodeModel {\\n    return this.targetPort.getParent();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"},{"name":"link","type":"LinkModel"}],"line":10,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}}]},"properties":[{"name":"link","type":"LinkModel","optional":false,"description":"","line":10},{"name":"sourcePort","type":"PortModel","optional":false,"description":"","line":8},{"name":"targetPort","type":"PortModel","optional":false,"description":"","line":9},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[{"name":"getInPortNode","args":[],"optional":false,"returnType":"NodeModel","typeParameters":[],"line":23},{"name":"getOutPortNode","args":[],"optional":false,"returnType":"NodeModel","typeParameters":[],"line":19}],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LinkModel","id":"class-LinkModel-7a5c13cebae50149288d225383fba027","file":"libs/ngx-diagrams/src/lib/models/link.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\nimport { SerializedLinkModel } from \'../interfaces/serialization.interface\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\nimport { createValueState } from \'../state/state\';\\nimport { ID } from \'../utils/tool-kit.util\';\\nimport { BaseModel } from \'./base.model\';\\nimport { DiagramModel } from \'./diagram.model\';\\nimport { LabelModel } from \'./label.model\';\\nimport { PointModel } from \'./point.model\';\\nimport { PortModel } from \'./port.model\';\\n\\nexport class LinkModel extends BaseModel<DiagramModel> {\\n  diagramEngine: DiagramEngine;\\n\\n  // TODO: decide what should be reactive using RXJS\\n  protected name: string;\\n  protected sourcePort: PortModel | null;\\n  protected targetPort: PortModel | null;\\n  protected points: PointModel[];\\n  protected extras: any;\\n\\n  protected label$ = createValueState<LabelModel>(null, this.entityPipe(\'label\'));\\n\\n  constructor(linkType = \'default\', id?: string, logPrefix = \'[Link]\') {\\n    super(linkType, id, logPrefix);\\n    this.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\\n    this.extras = {};\\n    this.sourcePort = null;\\n    this.targetPort = null;\\n  }\\n\\n  serialize(): SerializedLinkModel {\\n    const serializedPoints = this.points.map((point) => point.serialize());\\n    const label = this.getLabel()?.serialize();\\n    return {\\n      ...super.serialize(),\\n      name: this.getName(),\\n      sourcePort: this.getSourcePort().id,\\n      targetPort: this.getTargetPort().id,\\n      extras: this.getExtras(),\\n      points: serializedPoints,\\n      label\\n    };\\n  }\\n\\n  setName(name: string) {\\n    this.name = name;\\n  }\\n\\n  getName(): string {\\n    return this.name;\\n  }\\n\\n  getExtras(): any {\\n    return this.extras;\\n  }\\n\\n  setExtras(extras: any) {\\n    this.extras = extras;\\n  }\\n\\n  destroy() {\\n    if (this.sourcePort) {\\n      this.sourcePort.removeLink(this);\\n    }\\n\\n    if (this.targetPort) {\\n      this.targetPort.removeLink(this);\\n    }\\n\\n    super.destroy();\\n  }\\n\\n  doClone(lookupTable = {}, clone) {\\n    clone.setPoints(\\n      this.getPoints().map((point: PointModel) => {\\n        return point.clone(lookupTable);\\n      })\\n    );\\n    if (this.sourcePort) {\\n      clone.setSourcePort(this.sourcePort.clone(lookupTable));\\n    }\\n    if (this.targetPort) {\\n      clone.setTargetPort(this.targetPort.clone(lookupTable));\\n    }\\n  }\\n\\n  isLastPoint(point: PointModel) {\\n    const index = this.getPointIndex(point);\\n    return index === this.points.length - 1;\\n  }\\n\\n  getPointIndex(point: PointModel) {\\n    return this.points.indexOf(point);\\n  }\\n\\n  getPointModel(id: ID): PointModel | null {\\n    for (const point of this.points) {\\n      if (point.id === id) {\\n        return point;\\n      }\\n    }\\n    return null;\\n  }\\n\\n  getPortForPoint(point: PointModel): PortModel {\\n    if (this.sourcePort !== null && this.getFirstPoint().id === point.id) {\\n      return this.sourcePort;\\n    }\\n    if (this.targetPort !== null && this.getLastPoint().id === point.id) {\\n      return this.targetPort;\\n    }\\n    return null;\\n  }\\n\\n  getPointForPort(port: PortModel): PointModel {\\n    if (this.sourcePort !== null && this.sourcePort.id === port.id) {\\n      return this.getFirstPoint();\\n    }\\n\\n    if (this.targetPort !== null && this.targetPort.id === port.id) {\\n      return this.getLastPoint();\\n    }\\n\\n    return null;\\n  }\\n\\n  getFirstPoint(): PointModel {\\n    return this.points[0];\\n  }\\n\\n  getLastPoint(): PointModel {\\n    return this.points[this.points.length - 1];\\n  }\\n\\n  setSourcePort(port: PortModel) {\\n    if (port !== null) {\\n      port.addLink(this);\\n    }\\n    if (this.sourcePort !== null) {\\n      this.sourcePort.removeLink(this);\\n    }\\n    this.sourcePort = port;\\n  }\\n\\n  getSourcePort(): PortModel {\\n    return this.sourcePort;\\n  }\\n\\n  getTargetPort(): PortModel {\\n    return this.targetPort;\\n  }\\n\\n  setTargetPort(port: PortModel) {\\n    if (port !== null) {\\n      port.addLink(this);\\n    }\\n    if (this.targetPort !== null) {\\n      this.targetPort.removeLink(this);\\n    }\\n    this.targetPort = port;\\n  }\\n\\n  point({ x, y }: Coords): PointModel {\\n    return this.addPoint(this.generatePoint({ x, y }));\\n  }\\n\\n  getPoints(): PointModel[] {\\n    return this.points;\\n  }\\n\\n  setPoints(points: PointModel[]) {\\n    points.forEach((point) => {\\n      point.setParent(this);\\n    });\\n    this.points = points;\\n  }\\n\\n  setLabel(label: LabelModel) {\\n    label.setParent(this);\\n    this.label$.set(label).emit();\\n  }\\n\\n  selectLabel(): Observable<LabelModel | null> {\\n    return this.label$.value$;\\n  }\\n\\n  getLabel(): LabelModel {\\n    return this.label$.value;\\n  }\\n\\n  resetLabel() {\\n    const currentLabel = this.getLabel();\\n\\n    if (currentLabel) {\\n      currentLabel.setParent(null);\\n      currentLabel.setPainted(false);\\n    }\\n\\n    this.setLabel(null);\\n  }\\n\\n  removePoint(pointModel: PointModel) {\\n    this.points.splice(this.getPointIndex(pointModel), 1);\\n  }\\n\\n  removePointsBefore(pointModel: PointModel) {\\n    this.points.splice(0, this.getPointIndex(pointModel));\\n  }\\n\\n  removePointsAfter(pointModel: PointModel) {\\n    this.points.splice(this.getPointIndex(pointModel) + 1);\\n  }\\n\\n  removeMiddlePoints() {\\n    if (this.points.length > 2) {\\n      this.points.splice(0, this.points.length - 2);\\n    }\\n  }\\n\\n  addPoint<P extends PointModel>(pointModel: P, index = 1): P {\\n    pointModel.setParent(this);\\n    pointModel.setLocked(this.getLocked());\\n    this.points.splice(index, 0, pointModel);\\n    return pointModel;\\n  }\\n\\n  generatePoint({ x = 0, y = 0 }: Coords): PointModel {\\n    return new PointModel(this, { x, y });\\n  }\\n\\n  setLocked(locked = true) {\\n    super.setLocked(locked);\\n    this.points.forEach((point) => point.setLocked(locked));\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"linkType","type":"string","defaultValue":"\'default\'"},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[Link]\'"}],"line":23,"jsdoctags":[{"name":"linkType","type":"string","defaultValue":"\'default\'","tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Link]\'","tagName":{"text":"param"}}]},"properties":[{"name":"diagramEngine","type":"DiagramEngine","optional":false,"description":"","line":14},{"name":"extras","type":"any","optional":false,"description":"","line":21,"modifierKind":[113]},{"name":"label$","defaultValue":"createValueState<LabelModel>(null, this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":23,"modifierKind":[113]},{"name":"name","type":"string","optional":false,"description":"","line":17,"modifierKind":[113]},{"name":"points","type":"PointModel[]","optional":false,"description":"","line":20,"modifierKind":[113]},{"name":"sourcePort","type":"PortModel | null","optional":false,"description":"","line":18,"modifierKind":[113]},{"name":"targetPort","type":"PortModel | null","optional":false,"description":"","line":19,"modifierKind":[113]},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"addPoint","args":[{"name":"pointModel","type":"P"},{"name":"index","type":"number","defaultValue":"1"}],"optional":false,"returnType":"P","typeParameters":["P"],"line":222,"jsdoctags":[{"name":"pointModel","type":"P","tagName":{"text":"param"}},{"name":"index","type":"number","defaultValue":"1","tagName":{"text":"param"}}]},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63},{"name":"doClone","args":[{"name":"lookupTable","type":"object","defaultValue":"{}"},{"name":"clone","type":""}],"optional":false,"returnType":"void","typeParameters":[],"line":75,"jsdoctags":[{"name":"lookupTable","type":"object","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"","tagName":{"text":"param"}}]},{"name":"generatePoint","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":229,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}]},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":55},{"name":"getFirstPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":129},{"name":"getLabel","args":[],"optional":false,"returnType":"LabelModel","typeParameters":[],"line":189},{"name":"getLastPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":133},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":51},{"name":"getPointForPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":117,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getPointIndex","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":94,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}]},{"name":"getPointModel","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"PointModel | null","typeParameters":[],"line":98,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"getPoints","args":[],"optional":false,"returnType":"PointModel[]","typeParameters":[],"line":169},{"name":"getPortForPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"PortModel","typeParameters":[],"line":107,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}]},{"name":"getSourcePort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":147},{"name":"getTargetPort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":151},{"name":"isLastPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":89,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}]},{"name":"point","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":165,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}]},{"name":"removeMiddlePoints","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216},{"name":"removePoint","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":204,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}]},{"name":"removePointsAfter","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":212,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}]},{"name":"removePointsBefore","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":208,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}]},{"name":"resetLabel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<LabelModel | null>","typeParameters":[],"line":185},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLinkModel","typeParameters":[],"line":33},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}]},{"name":"setLabel","args":[{"name":"label","type":"LabelModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":180,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}}]},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":233,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}]},{"name":"setName","args":[{"name":"name","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"jsdoctags":[{"name":"name","type":"string","tagName":{"text":"param"}}]},{"name":"setPoints","args":[{"name":"points","type":"PointModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"jsdoctags":[{"name":"points","type":"PointModel[]","tagName":{"text":"param"}}]},{"name":"setSourcePort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":137,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"setTargetPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":155,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LockEvent","id":"class-LockEvent-0891b2f46b0f06f06af1483c5bb51095","file":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","sourceCode":"import { BaseEntity } from \'../base.entity\';\\nimport { ID, UID } from \'../utils/tool-kit.util\';\\n\\n// region events\\nexport class BaseEvent<T extends BaseEntity> {\\n  entity: T;\\n  entityId: ID;\\n  stopPropagation: () => any;\\n  firing: boolean;\\n  id: ID;\\n  propogate: boolean;\\n\\n  constructor(entity: T, options?: any) {\\n    this.id = UID();\\n    this.entity = entity;\\n    this.entityId = entity.id;\\n    this.firing = true;\\n    this.stopPropagation = () => (this.firing = false);\\n    this.propogate = options ? options.propagate : null;\\n  }\\n}\\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\\n  locked: boolean;\\n\\n  constructor(entity: T, locked = false) {\\n    super(entity);\\n    this.locked = locked;\\n  }\\n}\\nexport class ParentChangeEvent<\\n  P extends BaseEntity = BaseEntity,\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  parent: P;\\n\\n  constructor(entity: T, parent: P) {\\n    super(entity);\\n    this.parent = parent;\\n  }\\n}\\nexport class SelectionEvent<\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  isSelected: boolean;\\n\\n  constructor(entity: T, selected: boolean) {\\n    super(entity);\\n    this.isSelected = selected;\\n  }\\n}\\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\\n  T\\n> {\\n  isPainted: boolean;\\n\\n  constructor(entity: T, painted = false) {\\n    super(entity);\\n    this.isPainted = painted;\\n  }\\n}\\n// endregion\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"entity","type":"T"},{"name":"locked","type":"","defaultValue":"false"}],"line":23,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}},{"name":"locked","type":"","defaultValue":"false","tagName":{"text":"param"}}]},"properties":[{"name":"locked","type":"boolean","optional":false,"description":"","line":23},{"name":"entity","type":"T","optional":false,"description":"","line":6,"inheritance":{"file":"BaseEvent"}},{"name":"entityId","type":"ID","optional":false,"description":"","line":7,"inheritance":{"file":"BaseEvent"}},{"name":"firing","type":"boolean","optional":false,"description":"","line":9,"inheritance":{"file":"BaseEvent"}},{"name":"id","type":"ID","optional":false,"description":"","line":10,"inheritance":{"file":"BaseEvent"}},{"name":"propogate","type":"boolean","optional":false,"description":"","line":11,"inheritance":{"file":"BaseEvent"}},{"name":"stopPropagation","type":"function","optional":false,"description":"","line":8,"inheritance":{"file":"BaseEvent"}}],"methods":[],"indexSignatures":[],"extends":"BaseEvent","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LooseLinkDestroyed","id":"class-LooseLinkDestroyed-c8cf0742a3ef6474ae19a37b52a0d181","file":"libs/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { PortModel } from \'../models/port.model\';\\nimport { NodeModel } from \'../models/node.model\';\\nimport { LinkModel } from \'../models\';\\n\\nexport class LooseLinkDestroyed extends BaseAction {\\n  sourcePort: PortModel;\\n  link: LinkModel;\\n\\n  constructor(mouseX: number, mouseY: number, link: LinkModel) {\\n    super(mouseX, mouseY);\\n    this.sourcePort = link.getSourcePort();\\n    this.link = link;\\n  }\\n\\n  getOutPortNode(): NodeModel {\\n    return this.sourcePort.getParent();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"},{"name":"link","type":"LinkModel"}],"line":8,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}},{"name":"link","type":"LinkModel","tagName":{"text":"param"}}]},"properties":[{"name":"link","type":"LinkModel","optional":false,"description":"","line":8},{"name":"sourcePort","type":"PortModel","optional":false,"description":"","line":7},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[{"name":"getOutPortNode","args":[],"optional":false,"returnType":"NodeModel","typeParameters":[],"line":16}],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"MoveCanvasAction","id":"class-MoveCanvasAction-83410ec1061cd16b6fc3f9da88f0c56c","file":"libs/ngx-diagrams/src/lib/actions/move-canvas.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { DiagramModel } from \'../models/diagram.model\';\\n\\nexport class MoveCanvasAction extends BaseAction {\\n  initialOffsetX: number;\\n  initialOffsetY: number;\\n\\n  constructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\\n    super(mouseX, mouseY);\\n    this.initialOffsetX = diagramModel.getOffsetX();\\n    this.initialOffsetY = diagramModel.getOffsetY();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"},{"name":"diagramModel","type":"DiagramModel"}],"line":6,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}},{"name":"diagramModel","type":"DiagramModel","tagName":{"text":"param"}}]},"properties":[{"name":"initialOffsetX","type":"number","optional":false,"description":"","line":5},{"name":"initialOffsetY","type":"number","optional":false,"description":"","line":6},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"MoveItemsAction","id":"class-MoveItemsAction-121355400c2bd7237a867a8e61dd495d","file":"libs/ngx-diagrams/src/lib/actions/move-items.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { PointModel } from \'../models/point.model\';\\nimport { NodeModel } from \'../models/node.model\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\nimport { SelectionModel } from \'../models/move-selection.model\';\\nimport { LinkModel } from \'../models/link.model\';\\n\\nexport class MoveItemsAction extends BaseAction {\\n  selectionModels: SelectionModel[];\\n  moved: boolean;\\n\\n  constructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\\n    super(mouseX, mouseY);\\n    this.moved = false;\\n    let selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\\n\\n    // dont allow items which are locked to move and links which generate their position based on points.\\n    selectedItems = selectedItems.filter((item) => {\\n      return !diagramEngine.isModelLocked(item) && !(item instanceof LinkModel);\\n    });\\n\\n    this.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\\n      const { x: initialX, y: initialY } = item.getCoords();\\n      return {\\n        model: item,\\n        initialX,\\n        initialY,\\n      };\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"},{"name":"diagramEngine","type":"DiagramEngine"}],"line":10,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}},{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"properties":[{"name":"moved","type":"boolean","optional":false,"description":"","line":10},{"name":"selectionModels","type":"SelectionModel[]","optional":false,"description":"","line":9},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"NodeModel","id":"class-NodeModel-fcf7d9bcd468d2e639a79d4bf727d7da","file":"libs/ngx-diagrams/src/lib/models/node.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\nimport { Dimensions } from \'../interfaces/dimensions.interface\';\\nimport { SerializedNodeModel } from \'../interfaces/serialization.interface\';\\nimport { DiagramEngine } from \'../services/engine.service\';\\nimport { createEntityState, createValueState } from \'../state/state\';\\nimport { ID } from \'../utils/tool-kit.util\';\\nimport { EntityMap, HashMap } from \'../utils/types\';\\nimport { BaseModel } from \'./base.model\';\\nimport { DiagramModel } from \'./diagram.model\';\\nimport { PortModel } from \'./port.model\';\\n\\nexport class NodeModel<P extends PortModel = PortModel> extends BaseModel<DiagramModel> {\\n  protected diagramEngine$ = createValueState<DiagramEngine>(null, this.entityPipe(\'diagramEngine\'));\\n  protected extras$ = createValueState<any>({}, this.entityPipe(\'extras\'));\\n  protected ports$ = createEntityState<P>([], this.entityPipe(\'ports\'));\\n  protected coords$ = createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'));\\n  protected dimensions$ = createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe(\'dimensions\'));\\n\\n  constructor(\\n    nodeType = \'default\',\\n    id?: string,\\n    extras: HashMap<any> = {},\\n    x = 0,\\n    y = 0,\\n    width = 0,\\n    height = 0,\\n    logPrefix = \'[Node]\'\\n  ) {\\n    super(nodeType, id, logPrefix);\\n    this.setExtras(extras);\\n    this.setDimensions({ width, height });\\n    this.setCoords({ x, y });\\n  }\\n\\n  getDiagramEngine(): DiagramEngine {\\n    return this.diagramEngine$.value;\\n  }\\n\\n  selectDiagramEngine(): Observable<DiagramEngine> {\\n    return this.diagramEngine$.value$;\\n  }\\n\\n  setDiagramEngine(diagramEngine: DiagramEngine) {\\n    this.diagramEngine$.set(diagramEngine).emit();\\n  }\\n\\n  getCoords(): Coords {\\n    return this.coords$.value;\\n  }\\n\\n  setCoords({ x, y }: Coords) {\\n    const { x: oldX, y: oldY } = this.getCoords();\\n\\n    this.getPorts().forEach((port) => {\\n      port.getLinks().forEach((link) => {\\n        const point = link.getPointForPort(port);\\n        const { x: pointX, y: pointY } = point.getCoords();\\n        point.setCoords({ x: pointX + x - oldX, y: pointY + y - oldY });\\n      });\\n    });\\n\\n    this.coords$.set({ x, y }).emit();\\n  }\\n\\n  serialize(): SerializedNodeModel {\\n    const serializedPorts = this.getPortsArray().map((port: P) => port.serialize());\\n\\n    return {\\n      ...super.serialize(),\\n      nodeType: this.getType(),\\n      extras: this.getExtras(),\\n      width: this.getWidth(),\\n      height: this.getHeight(),\\n      ...this.getCoords(),\\n      ports: serializedPorts\\n    };\\n  }\\n\\n  // TODO: override selectionChanges and replace this with it (convert to rx)\\n  getSelectedEntities() {\\n    let entities = super.getSelectedEntities();\\n\\n    // add the points of each link that are selected here\\n    if (this.getSelected()) {\\n      this.getPorts().forEach((port) => {\\n        const points = port.getLinksArray().map((link) => link.getPointForPort(port));\\n        entities = entities.concat(points);\\n      });\\n    }\\n\\n    this.log(\'selectedEntities\', entities);\\n    return entities;\\n  }\\n\\n  // TODO: map to BaseEvent\\n  coordsChanges(): Observable<Coords> {\\n    return this.coords$.value$;\\n  }\\n\\n  selectCoords(): Observable<Coords> {\\n    return this.coords$.value$;\\n  }\\n\\n  selectX(): Observable<number> {\\n    return this.coords$.select((coords) => coords.x);\\n  }\\n\\n  selectY(): Observable<number> {\\n    return this.coords$.select((coords) => coords.y);\\n  }\\n\\n  /**\\n   * Assign a port to the node and set the node as its getParent\\n   * @returns the inserted port\\n   */\\n  addPort(port: P): P {\\n    port.setParent(this);\\n    this.ports$.add(port).emit();\\n    return port;\\n  }\\n\\n  removePort(portOrId: ID | P): string {\\n    const portId = typeof portOrId === \'string\' ? portOrId : portOrId.id;\\n    this.ports$.remove(portId).emit();\\n    return portId;\\n  }\\n\\n  getPort(id: ID): P {\\n    return this.ports$.get(id);\\n  }\\n\\n  selectPorts(selector?: () => boolean | ID | ID[]): Observable<P[]> {\\n    // TODO: implement selector\\n    // TODO: create coerce func\\n    return this.ports$.array$().pipe(this.withLog(\'selectPorts\'));\\n  }\\n\\n  getPorts(): EntityMap<P> {\\n    return this.ports$.value;\\n  }\\n\\n  getPortsArray(): P[] {\\n    return this.ports$.array();\\n  }\\n\\n  setDimensions(dimensions: Partial<Dimensions>) {\\n    this.dimensions$.set({ ...this.getDimensions(), ...dimensions }).emit();\\n  }\\n\\n  getDimensions(): Dimensions {\\n    return this.dimensions$.value;\\n  }\\n\\n  // TODO: return BaseEvent extension\\n  dimensionChanges(): Observable<Dimensions> {\\n    return this.dimensions$.select();\\n  }\\n\\n  getHeight(): number {\\n    return this.getDimensions().height;\\n  }\\n\\n  setHeight(height: number) {\\n    return this.setDimensions({ height });\\n  }\\n\\n  getWidth(): number {\\n    return this.getDimensions().width;\\n  }\\n\\n  setWidth(width: number) {\\n    return this.setDimensions({ width });\\n  }\\n\\n  selectWidth(): Observable<number> {\\n    return this.dimensions$.select((d) => d.width).pipe(this.withLog(\'selectWidth\'));\\n  }\\n\\n  selectHeight(): Observable<number> {\\n    return this.dimensions$.select((d) => d.height).pipe(this.withLog(\'selectHeight\'));\\n  }\\n\\n  setExtras(extras: any) {\\n    this.extras$.set(extras).emit();\\n  }\\n\\n  getExtras() {\\n    return this.extras$.value;\\n  }\\n\\n  selectExtras<E = any>(selector?: (extra: E) => E[keyof E] | string | string[]): Observable<E> {\\n    return this.extras$.select(selector);\\n  }\\n\\n  destroy() {\\n    super.destroy();\\n    this.removeAllPorts();\\n  }\\n\\n  removeAllPorts(): void {\\n    this.ports$.clear().emit();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"nodeType","type":"string","defaultValue":"\'default\'"},{"name":"id","type":"string","optional":true},{"name":"extras","type":"HashMap<any>","defaultValue":"{}"},{"name":"x","type":"number","defaultValue":"0"},{"name":"y","type":"number","defaultValue":"0"},{"name":"width","type":"number","defaultValue":"0"},{"name":"height","type":"number","defaultValue":"0"},{"name":"logPrefix","type":"string","defaultValue":"\'[Node]\'"}],"line":18,"jsdoctags":[{"name":"nodeType","type":"string","defaultValue":"\'default\'","tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"extras","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"x","type":"number","defaultValue":"0","tagName":{"text":"param"}},{"name":"y","type":"number","defaultValue":"0","tagName":{"text":"param"}},{"name":"width","type":"number","defaultValue":"0","tagName":{"text":"param"}},{"name":"height","type":"number","defaultValue":"0","tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Node]\'","tagName":{"text":"param"}}]},"properties":[{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113]},{"name":"diagramEngine$","defaultValue":"createValueState<DiagramEngine>(null, this.entityPipe(\'diagramEngine\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113]},{"name":"dimensions$","defaultValue":"createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe(\'dimensions\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113]},{"name":"extras$","defaultValue":"createValueState<any>({}, this.entityPipe(\'extras\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113]},{"name":"ports$","defaultValue":"createEntityState<P>([], this.entityPipe(\'ports\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113]},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"addPort","args":[{"name":"port","type":"P"}],"optional":false,"returnType":"P","typeParameters":[],"line":117,"description":"<p>Assign a port to the node and set the node as its getParent</p>\\n","jsdoctags":[{"name":"port","type":"P","tagName":{"text":"param"}},{"tagName":{"pos":3515,"end":3522,"flags":0,"escapedText":"returns"},"comment":"<p>the inserted port</p>\\n"}]},{"name":"coordsChanges","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":97},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":196},{"name":"dimensionChanges","args":[],"optional":false,"returnType":"Observable<Dimensions>","typeParameters":[],"line":156},{"name":"getCoords","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":48},{"name":"getDiagramEngine","args":[],"optional":false,"returnType":"DiagramEngine","typeParameters":[],"line":36},{"name":"getDimensions","args":[],"optional":false,"returnType":"Dimensions","typeParameters":[],"line":151},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":188},{"name":"getHeight","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":160},{"name":"getPort","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"P","typeParameters":[],"line":129,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}]},{"name":"getPorts","args":[],"optional":false,"returnType":"EntityMap<P>","typeParameters":[],"line":139},{"name":"getPortsArray","args":[],"optional":false,"returnType":"P[]","typeParameters":[],"line":143},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":81},{"name":"getWidth","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":168},{"name":"removeAllPorts","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":201},{"name":"removePort","args":[{"name":"portOrId","type":"ID | P"}],"optional":false,"returnType":"string","typeParameters":[],"line":123,"jsdoctags":[{"name":"portOrId","type":"ID | P","tagName":{"text":"param"}}]},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":101},{"name":"selectDiagramEngine","args":[],"optional":false,"returnType":"Observable<DiagramEngine>","typeParameters":[],"line":40},{"name":"selectExtras","args":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}]}],"optional":false,"returnType":"Observable<E>","typeParameters":["E"],"line":192,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}],"tagName":{"text":"param"}}]},{"name":"selectHeight","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":180},{"name":"selectPorts","args":[{"name":"selector","type":"function","optional":true,"function":[]}],"optional":false,"returnType":"Observable<P[]>","typeParameters":[],"line":133,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[],"tagName":{"text":"param"}}]},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":176},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":105},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":109},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedNodeModel","typeParameters":[],"line":66},{"name":"setCoords","args":[{"type":"Coords"}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}]},{"name":"setDiagramEngine","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},{"name":"setDimensions","args":[{"name":"dimensions","type":"Partial<Dimensions>"}],"optional":false,"returnType":"void","typeParameters":[],"line":147,"jsdoctags":[{"name":"dimensions","type":"Partial<Dimensions>","tagName":{"text":"param"}}]},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":184,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}]},{"name":"setHeight","args":[{"name":"height","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":164,"jsdoctags":[{"name":"height","type":"number","tagName":{"text":"param"}}]},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":172,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}]},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PaintedEvent","id":"class-PaintedEvent-0891b2f46b0f06f06af1483c5bb51095","file":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","sourceCode":"import { BaseEntity } from \'../base.entity\';\\nimport { ID, UID } from \'../utils/tool-kit.util\';\\n\\n// region events\\nexport class BaseEvent<T extends BaseEntity> {\\n  entity: T;\\n  entityId: ID;\\n  stopPropagation: () => any;\\n  firing: boolean;\\n  id: ID;\\n  propogate: boolean;\\n\\n  constructor(entity: T, options?: any) {\\n    this.id = UID();\\n    this.entity = entity;\\n    this.entityId = entity.id;\\n    this.firing = true;\\n    this.stopPropagation = () => (this.firing = false);\\n    this.propogate = options ? options.propagate : null;\\n  }\\n}\\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\\n  locked: boolean;\\n\\n  constructor(entity: T, locked = false) {\\n    super(entity);\\n    this.locked = locked;\\n  }\\n}\\nexport class ParentChangeEvent<\\n  P extends BaseEntity = BaseEntity,\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  parent: P;\\n\\n  constructor(entity: T, parent: P) {\\n    super(entity);\\n    this.parent = parent;\\n  }\\n}\\nexport class SelectionEvent<\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  isSelected: boolean;\\n\\n  constructor(entity: T, selected: boolean) {\\n    super(entity);\\n    this.isSelected = selected;\\n  }\\n}\\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\\n  T\\n> {\\n  isPainted: boolean;\\n\\n  constructor(entity: T, painted = false) {\\n    super(entity);\\n    this.isPainted = painted;\\n  }\\n}\\n// endregion\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"entity","type":"T"},{"name":"painted","type":"","defaultValue":"false"}],"line":54,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}},{"name":"painted","type":"","defaultValue":"false","tagName":{"text":"param"}}]},"properties":[{"name":"isPainted","type":"boolean","optional":false,"description":"","line":54},{"name":"entity","type":"T","optional":false,"description":"","line":6,"inheritance":{"file":"BaseEvent"}},{"name":"entityId","type":"ID","optional":false,"description":"","line":7,"inheritance":{"file":"BaseEvent"}},{"name":"firing","type":"boolean","optional":false,"description":"","line":9,"inheritance":{"file":"BaseEvent"}},{"name":"id","type":"ID","optional":false,"description":"","line":10,"inheritance":{"file":"BaseEvent"}},{"name":"propogate","type":"boolean","optional":false,"description":"","line":11,"inheritance":{"file":"BaseEvent"}},{"name":"stopPropagation","type":"function","optional":false,"description":"","line":8,"inheritance":{"file":"BaseEvent"}}],"methods":[],"indexSignatures":[],"extends":"BaseEvent","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ParentChangeEvent","id":"class-ParentChangeEvent-0891b2f46b0f06f06af1483c5bb51095","file":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","sourceCode":"import { BaseEntity } from \'../base.entity\';\\nimport { ID, UID } from \'../utils/tool-kit.util\';\\n\\n// region events\\nexport class BaseEvent<T extends BaseEntity> {\\n  entity: T;\\n  entityId: ID;\\n  stopPropagation: () => any;\\n  firing: boolean;\\n  id: ID;\\n  propogate: boolean;\\n\\n  constructor(entity: T, options?: any) {\\n    this.id = UID();\\n    this.entity = entity;\\n    this.entityId = entity.id;\\n    this.firing = true;\\n    this.stopPropagation = () => (this.firing = false);\\n    this.propogate = options ? options.propagate : null;\\n  }\\n}\\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\\n  locked: boolean;\\n\\n  constructor(entity: T, locked = false) {\\n    super(entity);\\n    this.locked = locked;\\n  }\\n}\\nexport class ParentChangeEvent<\\n  P extends BaseEntity = BaseEntity,\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  parent: P;\\n\\n  constructor(entity: T, parent: P) {\\n    super(entity);\\n    this.parent = parent;\\n  }\\n}\\nexport class SelectionEvent<\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  isSelected: boolean;\\n\\n  constructor(entity: T, selected: boolean) {\\n    super(entity);\\n    this.isSelected = selected;\\n  }\\n}\\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\\n  T\\n> {\\n  isPainted: boolean;\\n\\n  constructor(entity: T, painted = false) {\\n    super(entity);\\n    this.isPainted = painted;\\n  }\\n}\\n// endregion\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"entity","type":"T"},{"name":"parent","type":"P"}],"line":34,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}},{"name":"parent","type":"P","tagName":{"text":"param"}}]},"properties":[{"name":"parent","type":"P","optional":false,"description":"","line":34},{"name":"entity","type":"T","optional":false,"description":"","line":6,"inheritance":{"file":"BaseEvent"}},{"name":"entityId","type":"ID","optional":false,"description":"","line":7,"inheritance":{"file":"BaseEvent"}},{"name":"firing","type":"boolean","optional":false,"description":"","line":9,"inheritance":{"file":"BaseEvent"}},{"name":"id","type":"ID","optional":false,"description":"","line":10,"inheritance":{"file":"BaseEvent"}},{"name":"propogate","type":"boolean","optional":false,"description":"","line":11,"inheritance":{"file":"BaseEvent"}},{"name":"stopPropagation","type":"function","optional":false,"description":"","line":8,"inheritance":{"file":"BaseEvent"}}],"methods":[],"indexSignatures":[],"extends":"BaseEvent","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PathFinding","id":"class-PathFinding-8e5787661c4b05790a4446238f3de908","file":"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts","type":"class","sourceCode":"import { DiagramEngine } from \'../services/engine.service\';\\nimport * as PF from \'pathfinding\';\\n\\nexport const ROUTING_SCALING_FACTOR = 10;\\n\\nexport class PathFinding {\\n  private pathFinderInstance:\\n    | PF.JPFNeverMoveDiagonally\\n    | PF.JPFAlwaysMoveDiagonally\\n    | PF.JPFMoveDiagonallyIfNoObstacles\\n    | PF.JPFMoveDiagonallyIfAtMostOneObstacle;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    heuristic = PF.Heuristic.manhattan\\n  ) {\\n    this.pathFinderInstance = new PF.AStarFinder({\\n      heuristic,\\n      diagonalMovement: PF.DiagonalMovement.Always,\\n      weight: 0,\\n    });\\n  }\\n\\n  /**\\n   * Taking as argument a fully unblocked walking matrix, this method\\n   * finds a direct path from point A to B.\\n   */\\n  calculateDirectPath(\\n    from: {\\n      x: number;\\n      y: number;\\n    },\\n    to: {\\n      x: number;\\n      y: number;\\n    }\\n  ): number[][] {\\n    const matrix = this.diagramEngine.getCanvasMatrix();\\n    const grid = new PF.Grid(matrix);\\n\\n    const fromX = this.diagramEngine.translateRoutingX(\\n      Math.floor(from.x / ROUTING_SCALING_FACTOR)\\n    );\\n    const toX = this.diagramEngine.translateRoutingX(\\n      Math.floor(to.x / ROUTING_SCALING_FACTOR)\\n    );\\n    const fromY = this.diagramEngine.translateRoutingX(\\n      Math.floor(from.y / ROUTING_SCALING_FACTOR)\\n    );\\n    const toY = this.diagramEngine.translateRoutingX(\\n      Math.floor(to.y / ROUTING_SCALING_FACTOR)\\n    );\\n\\n    const path = this.pathFinderInstance.findPath(fromX, fromY, toX, toY, grid);\\n    return path;\\n  }\\n\\n  /**\\n   * Using @link{#calculateDirectPath}\'s result as input, we here\\n   * determine the first walkable point found in the matrix that includes\\n   * blocked paths.\\n   */\\n  calculateLinkStartEndCoords(\\n    matrix: number[][],\\n    path: number[][]\\n  ): {\\n    start: {\\n      x: number;\\n      y: number;\\n    };\\n    end: {\\n      x: number;\\n      y: number;\\n    };\\n    pathToStart: number[][];\\n    pathToEnd: number[][];\\n  } {\\n    const startIndex = path.findIndex(\\n      (point) => matrix[point[1]][point[0]] === 0\\n    );\\n    const endIndex =\\n      path.length -\\n      1 -\\n      path\\n        .slice()\\n        .reverse()\\n        .findIndex((point) => matrix[point[1]][point[0]] === 0);\\n\\n    // are we trying to create a path exclusively through blocked areas?\\n    // if so, let\'s fallback to the linear routing\\n    if (startIndex === -1 || endIndex === -1) {\\n      return undefined;\\n    }\\n\\n    const pathToStart = path.slice(0, startIndex);\\n    const pathToEnd = path.slice(endIndex);\\n\\n    return {\\n      start: {\\n        x: path[startIndex][0],\\n        y: path[startIndex][1],\\n      },\\n      end: {\\n        x: path[endIndex][0],\\n        y: path[endIndex][1],\\n      },\\n      pathToStart,\\n      pathToEnd,\\n    };\\n  }\\n\\n  /**\\n   * Puts everything together: merges the paths from/to the centre of the ports,\\n   * with the path calculated around other elements.\\n   */\\n  calculateDynamicPath(\\n    routingMatrix: number[][],\\n    start: {\\n      x: number;\\n      y: number;\\n    },\\n    end: {\\n      x: number;\\n      y: number;\\n    },\\n    pathToStart: number[][],\\n    pathToEnd: number[][]\\n  ) {\\n    // generate the path based on the matrix with obstacles\\n    const grid = new PF.Grid(routingMatrix);\\n    const dynamicPath = this.pathFinderInstance.findPath(\\n      start.x,\\n      start.y,\\n      end.x,\\n      end.y,\\n      grid\\n    );\\n\\n    // aggregate everything to have the calculated path ready for rendering\\n    const pathCoords = pathToStart\\n      .concat(dynamicPath, pathToEnd)\\n      .map((coords) => [\\n        this.diagramEngine.translateRoutingX(coords[0], true),\\n        this.diagramEngine.translateRoutingY(coords[1], true),\\n      ]);\\n\\n    return PF.Util.compressPath(pathCoords);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"heuristic","type":"","defaultValue":"PF.Heuristic.manhattan"}],"line":11,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"heuristic","type":"","defaultValue":"PF.Heuristic.manhattan","tagName":{"text":"param"}}]},"properties":[{"name":"pathFinderInstance","type":"PF.JPFNeverMoveDiagonally | PF.JPFAlwaysMoveDiagonally | PF.JPFMoveDiagonallyIfNoObstacles | PF.JPFMoveDiagonallyIfAtMostOneObstacle","optional":false,"description":"","line":7,"modifierKind":[112]}],"methods":[{"name":"calculateDirectPath","args":[{"name":"from","type":"literal type"},{"name":"to","type":"literal type"}],"optional":false,"returnType":"[][]","typeParameters":[],"line":28,"description":"<p>Taking as argument a fully unblocked walking matrix, this method\\nfinds a direct path from point A to B.</p>\\n","jsdoctags":[{"name":"from","type":"literal type","tagName":{"text":"param"}},{"name":"to","type":"literal type","tagName":{"text":"param"}}]},{"name":"calculateDynamicPath","args":[{"name":"routingMatrix","type":"number[][]"},{"name":"start","type":"literal type"},{"name":"end","type":"literal type"},{"name":"pathToStart","type":"number[][]"},{"name":"pathToEnd","type":"number[][]"}],"optional":false,"returnType":"any","typeParameters":[],"line":116,"description":"<p>Puts everything together: merges the paths from/to the centre of the ports,\\nwith the path calculated around other elements.</p>\\n","jsdoctags":[{"name":"routingMatrix","type":"number[][]","tagName":{"text":"param"}},{"name":"start","type":"literal type","tagName":{"text":"param"}},{"name":"end","type":"literal type","tagName":{"text":"param"}},{"name":"pathToStart","type":"number[][]","tagName":{"text":"param"}},{"name":"pathToEnd","type":"number[][]","tagName":{"text":"param"}}]},{"name":"calculateLinkStartEndCoords","args":[{"name":"matrix","type":"number[][]"},{"name":"path","type":"number[][]"}],"optional":false,"returnType":"literal type","typeParameters":[],"line":63,"description":"<p>Using @link{#calculateDirectPath}&#39;s result as input, we here\\ndetermine the first walkable point found in the matrix that includes\\nblocked paths.</p>\\n","jsdoctags":[{"name":"matrix","type":"number[][]","tagName":{"text":"param"}},{"name":"path","type":"number[][]","tagName":{"text":"param"}}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PointModel","id":"class-PointModel-4369f0bc1f3fb0284a14b3d7942b4f76","file":"libs/ngx-diagrams/src/lib/models/point.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\nimport { SerializedPointModel } from \'../interfaces/serialization.interface\';\\nimport { createValueState, ValueState } from \'../state/state\';\\nimport { BaseModel } from \'./base.model\';\\nimport { LinkModel } from \'./link.model\';\\n\\nexport class PointModel extends BaseModel<LinkModel> {\\n  protected coords$: ValueState<Coords>;\\n\\n  constructor(link: LinkModel, coords: Coords, id?: string, logPrefix = \'[Point]\') {\\n    super(link.getType(), id, logPrefix);\\n    this.coords$ = createValueState(coords, this.entityPipe(\'coords\'));\\n    this.setParent(link);\\n  }\\n\\n  serialize(): SerializedPointModel {\\n    return {\\n      ...super.serialize(),\\n      coords: this.getCoords()\\n    };\\n  }\\n\\n  isConnectedToPort() {\\n    return this.getParent().getPortForPoint(this) !== null;\\n  }\\n\\n  getLink(): LinkModel {\\n    return this.getParent();\\n  }\\n\\n  destroy() {\\n    if (this.getParent) {\\n      this.getParent().removePoint(this);\\n    }\\n\\n    super.destroy();\\n  }\\n\\n  setCoords(newCoords: Partial<Coords>) {\\n    this.coords$.set({ ...this.getCoords(), ...newCoords }).emit();\\n  }\\n\\n  selectCoords(): Observable<Coords> {\\n    return this.coords$.value$;\\n  }\\n\\n  getCoords(): Coords {\\n    return this.coords$.value;\\n  }\\n\\n  selectX(): Observable<number> {\\n    return this.coords$.select((coords) => coords.x);\\n  }\\n\\n  selectY(): Observable<number> {\\n    return this.coords$.select((coords) => coords.y);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"link","type":"LinkModel"},{"name":"coords","type":"Coords"},{"name":"id","type":"string","optional":true},{"name":"logPrefix","type":"string","defaultValue":"\'[Point]\'"}],"line":9,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}},{"name":"coords","type":"Coords","tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Point]\'","tagName":{"text":"param"}}]},"properties":[{"name":"coords$","type":"ValueState<Coords>","optional":false,"description":"","line":9,"modifierKind":[113]},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32},{"name":"getCoords","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":48},{"name":"getLink","args":[],"optional":false,"returnType":"LinkModel","typeParameters":[],"line":28},{"name":"isConnectedToPort","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":24},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":44},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":52},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":56},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedPointModel","typeParameters":[],"line":17},{"name":"setCoords","args":[{"name":"newCoords","type":"Partial<Coords>"}],"optional":false,"returnType":"void","typeParameters":[],"line":40,"jsdoctags":[{"name":"newCoords","type":"Partial<Coords>","tagName":{"text":"param"}}]},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PortModel","id":"class-PortModel-c4cf8e89f103ce74a03cc959acd4a741","file":"libs/ngx-diagrams/src/lib/models/port.model.ts","type":"class","sourceCode":"import { Observable } from \'rxjs\';\\nimport { createEntityState, createValueState } from \'../state/state\';\\nimport { EntityMap, ID, isString } from \'../utils\';\\nimport { BaseModel } from \'./base.model\';\\nimport { LinkModel } from \'./link.model\';\\nimport { NodeModel } from \'./node.model\';\\n\\nexport class PortModel extends BaseModel<NodeModel> {\\n  // TODO: convert all primitives to subjects\\n  protected name: string;\\n  protected maximumLinks: number;\\n  protected linkType: string;\\n\\n  protected links$ = createEntityState<LinkModel>([], this.entityPipe(\'links\'));\\n  protected x$ = createValueState(0, this.entityPipe(\'x\'));\\n  protected y$ = createValueState(0, this.entityPipe(\'y\'));\\n  protected width$ = createValueState(0, this.entityPipe(\'y\'));\\n  protected height$ = createValueState(0, this.entityPipe(\'y\'));\\n  protected magnetic$ = createValueState(true, this.entityPipe(\'magnetic\'));\\n  protected canCreateLinks$ = createValueState(true, this.entityPipe(\'magnetic\'));\\n\\n  constructor(\\n    name: string,\\n    type?: string,\\n    id?: string,\\n    maximumLinks?: number,\\n    linkType?: string,\\n    magnetic = true,\\n    logPrefix = \'[Port]\'\\n  ) {\\n    super(type, id, logPrefix);\\n    this.name = name;\\n    this.maximumLinks = maximumLinks;\\n    this.linkType = linkType;\\n    this.setMagnetic(magnetic);\\n  }\\n\\n  serialize() {\\n    return {\\n      ...super.serialize(),\\n      name: this.getName(),\\n      linkType: this.getLinkType(),\\n      maximumLinks: this.getMaximumLinks(),\\n      type: this.getType(),\\n      magnetic: this.getMagnetic(),\\n      height: this.getHeight(),\\n      width: this.getWidth(),\\n      canCreateLinks: this.getCanCreateLinks(),\\n      ...this.getCoords()\\n    };\\n  }\\n\\n  getNode() {\\n    return this.getParent();\\n  }\\n\\n  getName() {\\n    return this.name;\\n  }\\n\\n  getCanCreateLinks(): boolean {\\n    const numberOfLinks = this.getLinks().size;\\n\\n    if (this.maximumLinks && numberOfLinks >= this.maximumLinks) {\\n      return false;\\n    }\\n\\n    return this.canCreateLinks$.value;\\n  }\\n\\n  getCoords() {\\n    return { x: this.getX(), y: this.getY() };\\n  }\\n\\n  selectCanCreateLinks(): Observable<boolean> {\\n    return this.canCreateLinks$.value$;\\n  }\\n\\n  setCanCreateLinks(value: boolean) {\\n    this.canCreateLinks$.set(value).emit();\\n  }\\n\\n  getMagnetic(): boolean {\\n    return this.magnetic$.value;\\n  }\\n\\n  selectMagnetic(): Observable<boolean> {\\n    return this.magnetic$.value$;\\n  }\\n\\n  setMagnetic(magnetic: boolean) {\\n    this.magnetic$.set(magnetic).emit();\\n  }\\n\\n  selectX(): Observable<number> {\\n    return this.x$.value$;\\n  }\\n\\n  selectY(): Observable<number> {\\n    return this.y$.value$;\\n  }\\n\\n  getY() {\\n    return this.y$.value;\\n  }\\n\\n  getX() {\\n    return this.x$.value;\\n  }\\n\\n  getHeight() {\\n    return this.height$.value;\\n  }\\n\\n  getWidth() {\\n    return this.width$.value;\\n  }\\n\\n  getMaximumLinks(): number {\\n    return this.maximumLinks;\\n  }\\n\\n  setMaximumLinks(maximumLinks: number) {\\n    this.maximumLinks = maximumLinks;\\n  }\\n\\n  getLinkType() {\\n    return this.linkType;\\n  }\\n\\n  setLinkType(type: string) {\\n    this.linkType = type;\\n  }\\n\\n  removeLink(linkOrId: ID | LinkModel) {\\n    const linkId = isString(linkOrId) ? linkOrId : linkOrId.id;\\n    this.links$.remove(linkId, false).emit();\\n  }\\n\\n  addLink(link: LinkModel) {\\n    this.links$.add(link).emit();\\n  }\\n\\n  getLinks(): EntityMap<LinkModel> {\\n    return this.links$.value;\\n  }\\n\\n  getLinksArray(): LinkModel[] {\\n    return this.links$.array();\\n  }\\n\\n  selectLinks(): Observable<EntityMap<LinkModel>> {\\n    return this.links$.value$;\\n  }\\n\\n  updateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\\n    this.x$.set(x).emit();\\n    this.y$.set(y).emit();\\n    this.width$.set(width).emit();\\n    this.height$.set(height).emit();\\n  }\\n\\n  canLinkToPort(port: PortModel): boolean {\\n    return true;\\n  }\\n\\n  isLocked() {\\n    return super.getLocked();\\n  }\\n\\n  createLinkModel() {\\n    if (this.getCanCreateLinks()) {\\n      return new LinkModel();\\n    }\\n  }\\n\\n  destroy() {\\n    super.destroy();\\n    this.links$.clear().emit();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"name","type":"string"},{"name":"type","type":"string","optional":true},{"name":"id","type":"string","optional":true},{"name":"maximumLinks","type":"number","optional":true},{"name":"linkType","type":"string","optional":true},{"name":"magnetic","type":"","defaultValue":"true"},{"name":"logPrefix","type":"string","defaultValue":"\'[Port]\'"}],"line":20,"jsdoctags":[{"name":"name","type":"string","tagName":{"text":"param"}},{"name":"type","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"id","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"maximumLinks","type":"number","optional":true,"tagName":{"text":"param"}},{"name":"linkType","type":"string","optional":true,"tagName":{"text":"param"}},{"name":"magnetic","type":"","defaultValue":"true","tagName":{"text":"param"}},{"name":"logPrefix","type":"string","defaultValue":"\'[Port]\'","tagName":{"text":"param"}}]},"properties":[{"name":"canCreateLinks$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":20,"modifierKind":[113]},{"name":"height$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113]},{"name":"links$","defaultValue":"createEntityState<LinkModel>([], this.entityPipe(\'links\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113]},{"name":"linkType","type":"string","optional":false,"description":"","line":12,"modifierKind":[113]},{"name":"magnetic$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":19,"modifierKind":[113]},{"name":"maximumLinks","type":"number","optional":false,"description":"","line":11,"modifierKind":[113]},{"name":"name","type":"string","optional":false,"description":"","line":10,"modifierKind":[113]},{"name":"width$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113]},{"name":"x$","defaultValue":"createValueState(0, this.entityPipe(\'x\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113]},{"name":"y$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113]},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methods":[{"name":"addLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":140,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}}]},{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":163,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":171},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":177},{"name":"getCanCreateLinks","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":61},{"name":"getCoords","args":[],"optional":false,"returnType":"{ x: any; y: any; }","typeParameters":[],"line":71},{"name":"getHeight","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":111},{"name":"getLinks","args":[],"optional":false,"returnType":"EntityMap<LinkModel>","typeParameters":[],"line":144},{"name":"getLinksArray","args":[],"optional":false,"returnType":"LinkModel[]","typeParameters":[],"line":148},{"name":"getLinkType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":127},{"name":"getMagnetic","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":83},{"name":"getMaximumLinks","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":119},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":57},{"name":"getNode","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53},{"name":"getWidth","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":115},{"name":"getX","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":107},{"name":"getY","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":103},{"name":"isLocked","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":167},{"name":"removeLink","args":[{"name":"linkOrId","type":"ID | LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":135,"jsdoctags":[{"name":"linkOrId","type":"ID | LinkModel","tagName":{"text":"param"}}]},{"name":"selectCanCreateLinks","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":75},{"name":"selectLinks","args":[],"optional":false,"returnType":"Observable<EntityMap<LinkModel>>","typeParameters":[],"line":152},{"name":"selectMagnetic","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":87},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":95},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":99},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":38},{"name":"setCanCreateLinks","args":[{"name":"value","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":79,"jsdoctags":[{"name":"value","type":"boolean","tagName":{"text":"param"}}]},{"name":"setLinkType","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}]},{"name":"setMagnetic","args":[{"name":"magnetic","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":91,"jsdoctags":[{"name":"magnetic","type":"boolean","tagName":{"text":"param"}}]},{"name":"setMaximumLinks","args":[{"name":"maximumLinks","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"jsdoctags":[{"name":"maximumLinks","type":"number","tagName":{"text":"param"}}]},{"name":"updateCoords","args":[{"type":"literal type"}],"optional":false,"returnType":"void","typeParameters":[],"line":156,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}]},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseModel"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseModel"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"indexSignatures":[],"extends":"BaseModel","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"SelectingAction","id":"class-SelectingAction-9eea427098a28553b2f8f88475297282","file":"libs/ngx-diagrams/src/lib/actions/selecting.action.ts","type":"class","sourceCode":"import { BaseAction } from \'./base.action\';\\nimport { DiagramModel } from \'../models/diagram.model\';\\nimport { Coords } from \'../interfaces/coords.interface\';\\n\\nexport class SelectingAction extends BaseAction {\\n  mouseX2: number;\\n  mouseY2: number;\\n\\n  dimensions: {\\n    top: number;\\n    left: number;\\n    width: number;\\n    height: number;\\n    right: number;\\n    bottom: number;\\n  };\\n\\n  constructor(mouseX: number, mouseY: number) {\\n    super(mouseX, mouseY);\\n    this.mouseX2 = mouseX;\\n    this.mouseY2 = mouseY;\\n  }\\n\\n  getBoxDimensions() {\\n    this.dimensions = {\\n      left: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\\n      top: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\\n      width: Math.abs(this.mouseX2 - this.mouseX),\\n      height: Math.abs(this.mouseY2 - this.mouseY),\\n      right: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\\n      bottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2,\\n    };\\n    return this.dimensions;\\n  }\\n\\n  containsElement({ x, y }: Coords, diagramModel: DiagramModel): boolean {\\n    const z = diagramModel.getZoomLevel() / 100.0;\\n    const dimensions = this.getBoxDimensions();\\n\\n    return (\\n      x * z + diagramModel.getOffsetX() > dimensions.left &&\\n      x * z + diagramModel.getOffsetX() < dimensions.right &&\\n      y * z + diagramModel.getOffsetY() > dimensions.top &&\\n      y * z + diagramModel.getOffsetY() < dimensions.bottom\\n    );\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"mouseX","type":"number"},{"name":"mouseY","type":"number"}],"line":16,"jsdoctags":[{"name":"mouseX","type":"number","tagName":{"text":"param"}},{"name":"mouseY","type":"number","tagName":{"text":"param"}}]},"properties":[{"name":"dimensions","type":"literal type","optional":false,"description":"","line":9},{"name":"mouseX2","type":"number","optional":false,"description":"","line":6},{"name":"mouseY2","type":"number","optional":false,"description":"","line":7},{"name":"mouseX","type":"number","optional":false,"description":"","line":2,"inheritance":{"file":"BaseAction"}},{"name":"mouseY","type":"number","optional":false,"description":"","line":3,"inheritance":{"file":"BaseAction"}},{"name":"ms","type":"number","optional":false,"description":"","line":4,"inheritance":{"file":"BaseAction"}}],"methods":[{"name":"containsElement","args":[{"type":"Coords"},{"name":"diagramModel","type":"DiagramModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":36,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}},{"name":"diagramModel","type":"DiagramModel","tagName":{"text":"param"}}]},{"name":"getBoxDimensions","args":[],"optional":false,"returnType":"{ top: number; left: number; width: number; height: number; right: number; bottom: number; }","typeParameters":[],"line":24}],"indexSignatures":[],"extends":"BaseAction","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"SelectionEvent","id":"class-SelectionEvent-0891b2f46b0f06f06af1483c5bb51095","file":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","sourceCode":"import { BaseEntity } from \'../base.entity\';\\nimport { ID, UID } from \'../utils/tool-kit.util\';\\n\\n// region events\\nexport class BaseEvent<T extends BaseEntity> {\\n  entity: T;\\n  entityId: ID;\\n  stopPropagation: () => any;\\n  firing: boolean;\\n  id: ID;\\n  propogate: boolean;\\n\\n  constructor(entity: T, options?: any) {\\n    this.id = UID();\\n    this.entity = entity;\\n    this.entityId = entity.id;\\n    this.firing = true;\\n    this.stopPropagation = () => (this.firing = false);\\n    this.propogate = options ? options.propagate : null;\\n  }\\n}\\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\\n  locked: boolean;\\n\\n  constructor(entity: T, locked = false) {\\n    super(entity);\\n    this.locked = locked;\\n  }\\n}\\nexport class ParentChangeEvent<\\n  P extends BaseEntity = BaseEntity,\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  parent: P;\\n\\n  constructor(entity: T, parent: P) {\\n    super(entity);\\n    this.parent = parent;\\n  }\\n}\\nexport class SelectionEvent<\\n  T extends BaseEntity = BaseEntity\\n> extends BaseEvent<T> {\\n  isSelected: boolean;\\n\\n  constructor(entity: T, selected: boolean) {\\n    super(entity);\\n    this.isSelected = selected;\\n  }\\n}\\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<\\n  T\\n> {\\n  isPainted: boolean;\\n\\n  constructor(entity: T, painted = false) {\\n    super(entity);\\n    this.isPainted = painted;\\n  }\\n}\\n// endregion\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"entity","type":"T"},{"name":"selected","type":"boolean"}],"line":44,"jsdoctags":[{"name":"entity","type":"T","tagName":{"text":"param"}},{"name":"selected","type":"boolean","tagName":{"text":"param"}}]},"properties":[{"name":"isSelected","type":"boolean","optional":false,"description":"","line":44},{"name":"entity","type":"T","optional":false,"description":"","line":6,"inheritance":{"file":"BaseEvent"}},{"name":"entityId","type":"ID","optional":false,"description":"","line":7,"inheritance":{"file":"BaseEvent"}},{"name":"firing","type":"boolean","optional":false,"description":"","line":9,"inheritance":{"file":"BaseEvent"}},{"name":"id","type":"ID","optional":false,"description":"","line":10,"inheritance":{"file":"BaseEvent"}},{"name":"propogate","type":"boolean","optional":false,"description":"","line":11,"inheritance":{"file":"BaseEvent"}},{"name":"stopPropagation","type":"function","optional":false,"description":"","line":8,"inheritance":{"file":"BaseEvent"}}],"methods":[],"indexSignatures":[],"extends":"BaseEvent","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"TemplateVarContext","id":"class-TemplateVarContext-d66dc8c53a1644380b31fbd6e11fa34b","file":"libs/ngx-diagrams/src/lib/utils/template-var.directive.ts","type":"class","sourceCode":"import {\\n  Directive,\\n  EmbeddedViewRef,\\n  Input,\\n  TemplateRef,\\n  ViewContainerRef,\\n} from \'@angular/core\';\\n\\nclass TemplateVarContext {\\n  $implicit: any;\\n  templateVar: any;\\n}\\n\\n@Directive({\\n  selector: \'[templateVar]\',\\n})\\nexport class TemplateVarDirective {\\n  view: EmbeddedViewRef<any>;\\n\\n  protected context = new TemplateVarContext();\\n\\n  @Input()\\n  set templateVar(context: any) {\\n    this.context.$implicit = this.context.templateVar = context;\\n    this.updateView();\\n  }\\n\\n  constructor(\\n    protected vcRef: ViewContainerRef,\\n    protected templateRef: TemplateRef<any>\\n  ) {}\\n\\n  updateView() {\\n    if (!this.view) {\\n      this.vcRef.clear();\\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\\n    } else {\\n      this.view.markForCheck();\\n    }\\n  }\\n}\\n","properties":[{"name":"$implicit","type":"any","optional":false,"description":"","line":10},{"name":"templateVar","type":"any","optional":false,"description":"","line":11}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ValueState","id":"class-ValueState-c5c9ec0689790bb9f304685a3503ca84","file":"libs/ngx-diagrams/src/lib/state/state.ts","type":"class","sourceCode":"import { BehaviorSubject, MonoTypeOperatorFunction, Observable, OperatorFunction } from \'rxjs\';\\nimport { distinctUntilChanged, map } from \'rxjs/operators\';\\nimport { BaseEntity } from \'../base.entity\';\\nimport { ID, isArray, mapToEntries } from \'../utils\';\\nimport { EntityMap, Entries, HashMap } from \'../utils/types\';\\n\\nexport class ValueState<T> {\\n  protected readonly stream$: BehaviorSubject<T>;\\n\\n  readonly value$: Observable<T>;\\n\\n  constructor(value?: T, operator?: OperatorFunction<any, any>) {\\n    this.stream$ = new BehaviorSubject(value);\\n    this.value$ = operator ? this.stream$.pipe(operator) : this.stream$.asObservable();\\n  }\\n\\n  get value(): T {\\n    return this.stream$.getValue();\\n  }\\n\\n  set(value: T): ValueState<T> {\\n    this.stream$.next(value);\\n    return this;\\n  }\\n\\n  emit(): void {\\n    this.stream$.next(this.value);\\n  }\\n\\n  select(): Observable<T>;\\n  select(project: (value: T) => T): Observable<T>;\\n  select<R>(project: (value: T) => R): Observable<R>;\\n  select<R>(project?: ((value: T) => T) | ((value: T) => R)): Observable<T | R> {\\n    const mapFn = project || ((v) => v);\\n    return this.value$.pipe(\\n      map((value) => mapFn(value)),\\n      distinctUntilChanged()\\n    );\\n  }\\n}\\n\\nexport function createValueState<T>(value: T, operator?: OperatorFunction<any, any>): ValueState<T> {\\n  return new ValueState<T>(value, operator);\\n}\\n\\nexport class EntityState<T extends BaseEntity> extends ValueState<EntityMap<T>> {\\n  protected stream$: BehaviorSubject<EntityMap<T>>;\\n\\n  value$: Observable<EntityMap<T>>;\\n\\n  constructor(value?: EntityMap<T>, entityPipe?: MonoTypeOperatorFunction<EntityMap<T>>) {\\n    super(value, entityPipe);\\n  }\\n\\n  destroy() {\\n    this.clear();\\n    this.stream$ = null;\\n    this.value$ = null;\\n  }\\n\\n  clear(destroy = true) {\\n    if (destroy) {\\n      this.forEach((entity) => entity.destroy());\\n    }\\n\\n    this.value.clear();\\n    return this;\\n  }\\n\\n  get(id: ID): T {\\n    return this.value.get(id);\\n  }\\n\\n  has(id: ID): boolean {\\n    return this.value.has(id);\\n  }\\n\\n  add(entity: T): EntityState<T> {\\n    this.value.set(entity.id, entity);\\n    return this;\\n  }\\n\\n  addMany(entities: T[]): EntityState<T> {\\n    for (const entity of entities) {\\n      this.add(entity);\\n    }\\n    return this;\\n  }\\n\\n  remove(id: ID, destroy = true): EntityState<T> {\\n    if (destroy) {\\n      this.value.get(id)?.destroy();\\n    }\\n\\n    this.value.delete(id);\\n    return this;\\n  }\\n\\n  array(): T[] {\\n    return Array.from(this.value.values());\\n  }\\n\\n  array$(): Observable<T[]> {\\n    return this.select((value) => Array.from(value.values()));\\n  }\\n\\n  forEach(cb: (value: T, key: string, map: EntityMap<T>) => void): void {\\n    this.value.forEach(cb);\\n  }\\n\\n  map<R = any>(cb: (value: T, index: number, array: T[]) => R): R[] {\\n    return this.array().map(cb);\\n  }\\n}\\n\\nexport function createEntityState<T extends BaseEntity>(\\n  value: HashMap<T> | Entries<T> = [],\\n  entityPipe: MonoTypeOperatorFunction<Map<ID, T>>\\n): EntityState<T> {\\n  if (isArray(value)) {\\n    return new EntityState(new Map(value), entityPipe);\\n  } else {\\n    return new EntityState(new Map(mapToEntries(value)), entityPipe);\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","args":[{"name":"value","type":"T","optional":true},{"name":"operator","type":"OperatorFunction<any | any>","optional":true}],"line":10,"jsdoctags":[{"name":"value","type":"T","optional":true,"tagName":{"text":"param"}},{"name":"operator","type":"OperatorFunction<any | any>","optional":true,"tagName":{"text":"param"}}]},"properties":[{"name":"stream$","type":"BehaviorSubject<T>","optional":false,"description":"","line":8,"modifierKind":[113,132]},{"name":"value$","type":"Observable<T>","optional":false,"description":"","line":10,"modifierKind":[132]}],"methods":[{"name":"emit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":26},{"name":"select","args":[],"optional":false,"returnType":"Observable<T>","typeParameters":[],"line":30},{"name":"select","args":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}]}],"optional":false,"returnType":"Observable<T>","typeParameters":[],"line":31,"jsdoctags":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}],"tagName":{"text":"param"}}]},{"name":"select","args":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}]}],"optional":false,"returnType":"Observable<R>","typeParameters":["R"],"line":32,"jsdoctags":[{"name":"project","type":"function","function":[{"name":"value","type":"T"}],"tagName":{"text":"param"}}]},{"name":"select","args":[{"name":"project","type":" | ","optional":true}],"optional":false,"returnType":"Observable<T | R>","typeParameters":["R"],"line":33,"jsdoctags":[{"name":"project","type":" | ","optional":true,"tagName":{"text":"param"}}]},{"name":"set","args":[{"name":"value","type":"T"}],"optional":false,"returnType":"ValueState<T>","typeParameters":[],"line":21,"jsdoctags":[{"name":"value","type":"T","tagName":{"text":"param"}}]}],"indexSignatures":[],"accessors":{"value":{"name":"value","getSignature":{"name":"value","type":"","returnType":"T","line":17}}},"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[{"name":"TemplateVarDirective","id":"directive-TemplateVarDirective-d66dc8c53a1644380b31fbd6e11fa34b","file":"libs/ngx-diagrams/src/lib/utils/template-var.directive.ts","type":"directive","description":"","sourceCode":"import {\\n  Directive,\\n  EmbeddedViewRef,\\n  Input,\\n  TemplateRef,\\n  ViewContainerRef,\\n} from \'@angular/core\';\\n\\nclass TemplateVarContext {\\n  $implicit: any;\\n  templateVar: any;\\n}\\n\\n@Directive({\\n  selector: \'[templateVar]\',\\n})\\nexport class TemplateVarDirective {\\n  view: EmbeddedViewRef<any>;\\n\\n  protected context = new TemplateVarContext();\\n\\n  @Input()\\n  set templateVar(context: any) {\\n    this.context.$implicit = this.context.templateVar = context;\\n    this.updateView();\\n  }\\n\\n  constructor(\\n    protected vcRef: ViewContainerRef,\\n    protected templateRef: TemplateRef<any>\\n  ) {}\\n\\n  updateView() {\\n    if (!this.view) {\\n      this.vcRef.clear();\\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\\n    } else {\\n      this.view.markForCheck();\\n    }\\n  }\\n}\\n","selector":"[templateVar]","providers":[],"inputsClass":[{"name":"templateVar","line":23,"type":"any"}],"outputsClass":[],"hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"context","defaultValue":"new TemplateVarContext()","type":"","optional":false,"description":"","line":20,"modifierKind":[113]},{"name":"view","type":"EmbeddedViewRef<any>","optional":false,"description":"","line":18}],"methodsClass":[{"name":"updateView","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33}],"constructorObj":{"name":"constructor","description":"","args":[{"name":"vcRef","type":"ViewContainerRef"},{"name":"templateRef","type":"TemplateRef<any>"}],"line":26,"jsdoctags":[{"name":"vcRef","type":"ViewContainerRef","tagName":{"text":"param"}},{"name":"templateRef","type":"TemplateRef<any>","tagName":{"text":"param"}}]},"accessors":{"templateVar":{"name":"templateVar","setSignature":{"name":"templateVar","type":"void","args":[{"name":"context","type":"any"}],"returnType":"void","line":23,"jsdoctags":[{"name":"context","type":"any","tagName":{"text":"param"}}]}}}}],"components":[{"name":"AutoArrangeExampleStoryComponent","id":"component-AutoArrangeExampleStoryComponent-50974f9cb26419dcb3064068a9673116","file":"libs/ngx-diagrams/stories/examples/auto-arrange/auto-arrange.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<div class=\\"action-bar\\">\\n  <button (click)=\\"autoArrange()\\">Auto Arrange</button>\\n</div>\\n<ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":20}],"methodsClass":[{"name":"autoArrange","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":65},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":27}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  DagreEngine,\\n} from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `\\n    <div class=\\"action-bar\\">\\n      <button (click)=\\"autoArrange()\\">Auto Arrange</button>\\n    </div>\\n    <ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n  `,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class AutoArrangeExampleStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    private dagreEngine: DagreEngine\\n  ) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 0 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    for (let index = 0; index < 2; index++) {\\n      const nodeLoop = new DefaultNodeModel();\\n      nodeLoop.setCoords({\\n        x: 1000 * (Math.random() * 10),\\n        y: 300 + index * (Math.random() * 10) * 300,\\n      });\\n      nodeLoop.setDimensions(nodesDefaultDimensions);\\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\\n\\n      this.diagramModel.addNode(nodeLoop);\\n\\n      const linkLoop = outport1.link(inportLoop);\\n      this.diagramModel.addLink(linkLoop);\\n    }\\n\\n    const link = outport1.link(inport);\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramEngine.zoomToFit();\\n  }\\n\\n  autoArrange() {\\n    this.dagreEngine.redistribute(this.diagramModel, {\\n      graph: { align: \'DL\', rankdir: \'LR\', ranksep: 150 },\\n    });\\n    this.diagramEngine.zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n\\n.action-bar {\\n  position: relative;\\n  width: 100%;\\n  height: 40px;\\n  z-index: 2000;\\n  background-color: white;\\n  display: flex;\\n  align-items: center;\\n  * {\\n    margin: 0 10px;\\n  }\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"dagreEngine","type":"DagreEngine"}],"line":20,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"dagreEngine","type":"DagreEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"BasicExampleStoryComponent","id":"component-BasicExampleStoryComponent-2c1d05713f488f3bbd712bc79d0d3599","file":"libs/ngx-diagrams/stories/examples/basic/basic.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":13}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":17}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class BasicExampleStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 0 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    for (let index = 0; index < 2; index++) {\\n      const nodeLoop = new DefaultNodeModel();\\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\\n      nodeLoop.setDimensions(nodesDefaultDimensions);\\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\\n\\n      this.diagramModel.addNode(nodeLoop);\\n    }\\n\\n    const link = outport1.link(inport);\\n    link.setLocked();\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n\\n.action-bar {\\n  position: relative;\\n  width: 100%;\\n  height: 40px;\\n  z-index: 2000;\\n  background-color: white;\\n  display: flex;\\n  align-items: center;\\n  * {\\n    margin: 0 10px;\\n  }\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":13,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"CustomLabelComponent","id":"component-CustomLabelComponent-bc7023234e48054b2e73f54e0c4c98cc","file":"libs/ngx-diagrams/stories/label/custom/custom-label.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"custom-label","styleUrls":["./custom-label.component.scss"],"styles":[],"templateUrl":["./custom-label.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"label$","defaultValue":"createValueState<string>(\'\', this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":6,"modifierKind":[113],"inheritance":{"file":"DefaultLabelModel"}},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"rotation$","defaultValue":"createValueState<number>(0, this.entityPipe(\'rotation\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"getLabel","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":17,"inheritance":{"file":"DefaultLabelModel"}},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":21,"inheritance":{"file":"DefaultLabelModel"}},{"name":"setLabel","args":[{"name":"label","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":13,"jsdoctags":[{"name":"label","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLabelModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33,"inheritance":{"file":"LabelModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":29,"inheritance":{"file":"LabelModel"}},{"name":"getRotation","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":25,"inheritance":{"file":"LabelModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":49,"inheritance":{"file":"LabelModel"}},{"name":"selectRotation","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":41,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLabelModel","typeParameters":[],"line":16,"inheritance":{"file":"LabelModel"}},{"name":"setCoords","args":[{"name":"newCoords","type":"Partial<Coords>"}],"optional":false,"returnType":"void","typeParameters":[],"line":45,"jsdoctags":[{"name":"newCoords","type":"Partial<Coords>","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setRotation","args":[{"name":"angle","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"jsdoctags":[{"name":"angle","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { DefaultLabelModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'custom-label\',\\n  templateUrl: \'./custom-label.component.html\',\\n  styleUrls: [\'./custom-label.component.scss\'],\\n})\\nexport class CustomLabelComponent extends DefaultLabelModel {\\n  constructor() {\\n    super(\'custom\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".default-label {\\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\\n  background-clip: text;\\n  color: transparent;\\n  font-size: 24px;\\n  user-select: none;\\n}\\n","styleUrl":"./custom-label.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":9},"extends":"DefaultLabelModel","templateData":"<div\\n  class=\\"default-label\\"\\n  [ngStyle]=\\"{\\n    transform:\\n      \'translate(\' +\\n      (selectCoords() | async).x +\\n      \'px, \' +\\n      (selectCoords() | async).y +\\n      \'px)\' +\\n      \'rotate(\' +\\n      (selectRotation() | async) +\\n      \'deg)\'\\n  }\\">\\n  {{ selectLabel() | async }}\\n</div>\\n"},{"name":"CustomLabelDiagramComponent","id":"component-CustomLabelDiagramComponent-b3c2e996c037c9dbaaefe85d857dfd6a","file":"libs/ngx-diagrams/stories/label/custom/diagram.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":24}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  Component,\\n  ComponentFactoryResolver,\\n  OnInit,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  DefaultLabelModel,\\n} from \'ngx-diagrams\';\\nimport { CustomLabelFactory } from \'./custom.factory\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class CustomLabelDiagramComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n    this.diagramEngine.registerLabelFactory(\\n      new CustomLabelFactory(this.resolver, this.renderer)\\n    );\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1500, y: 300 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    const link = outport1.link(inport);\\n    const label = new DefaultLabelModel(\\"I\'m a custom label\\", \'custom-label\');\\n    link.setLabel(label);\\n    link.setLocked();\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":24,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"CustomLinkComponent","id":"component-CustomLinkComponent-8da361bc77a3ddc848d896e20d50c8af","file":"libs/ngx-diagrams/stories/link/custom/custom-link.component.ts","changeDetection":"ChangeDetectionStrategy.Default","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"custom-link","styleUrls":["./custom-link.component.scss"],"styles":[],"templateUrl":["./custom-link.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"_path$","defaultValue":"new BehaviorSubject(\'\')","type":"BehaviorSubject<string>","optional":false,"description":"","line":23},{"name":"hover","defaultValue":"false","type":"","optional":false,"description":"","line":29},{"name":"labelLayer","type":"ViewContainerRef","optional":false,"description":"","line":21,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'labelLayer\', {read: ViewContainerRef, static: true}"}]},{"name":"path$","defaultValue":"this._path$.pipe(\\n    this.entityPipe(\'path\'),\\n    tap(() => this.cd.detectChanges())\\n  )","type":"","optional":false,"description":"","line":24},{"name":"color$","defaultValue":"createValueState<string>(\'rgba(255, 255, 255, 0.5)\', this.entityPipe(\'color\'))","type":"","optional":false,"description":"","line":7,"inheritance":{"file":"DefaultLinkModel"}},{"name":"curvyness$","defaultValue":"createValueState<number>(50, this.entityPipe(\'curvyness\'))","type":"","optional":false,"description":"","line":8,"inheritance":{"file":"DefaultLinkModel"}},{"name":"width$","defaultValue":"createValueState<number>(3, this.entityPipe(\'width\'))","type":"","optional":false,"description":"","line":6,"inheritance":{"file":"DefaultLinkModel"}},{"name":"diagramEngine","type":"DiagramEngine","optional":false,"description":"","line":14,"inheritance":{"file":"LinkModel"}},{"name":"extras","type":"any","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"label$","defaultValue":"createValueState<LabelModel>(null, this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":23,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"name","type":"string","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"points","type":"PointModel[]","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"sourcePort","type":"PortModel | null","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"targetPort","type":"PortModel | null","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"calcCenterOfPath","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":57},{"name":"deleteLink","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":35},{"name":"selectColor","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":30,"inheritance":{"file":"DefaultLinkModel"}},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":26,"inheritance":{"file":"DefaultLinkModel"}},{"name":"setColor","args":[{"name":"color","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":22,"jsdoctags":[{"name":"color","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"setCurvyness","args":[{"name":"curvyness","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"jsdoctags":[{"name":"curvyness","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":18,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"addPoint","args":[{"name":"pointModel","type":"P"},{"name":"index","type":"number","defaultValue":"1"}],"optional":false,"returnType":"P","typeParameters":["P"],"line":222,"jsdoctags":[{"name":"pointModel","type":"P","tagName":{"text":"param"}},{"name":"index","type":"number","defaultValue":"1","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63,"inheritance":{"file":"LinkModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"object","defaultValue":"{}"},{"name":"clone","type":""}],"optional":false,"returnType":"void","typeParameters":[],"line":75,"jsdoctags":[{"name":"lookupTable","type":"object","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"generatePoint","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":229,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":55,"inheritance":{"file":"LinkModel"}},{"name":"getFirstPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":129,"inheritance":{"file":"LinkModel"}},{"name":"getLabel","args":[],"optional":false,"returnType":"LabelModel","typeParameters":[],"line":189,"inheritance":{"file":"LinkModel"}},{"name":"getLastPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":133,"inheritance":{"file":"LinkModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":51,"inheritance":{"file":"LinkModel"}},{"name":"getPointForPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":117,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointIndex","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":94,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointModel","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"PointModel | null","typeParameters":[],"line":98,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPoints","args":[],"optional":false,"returnType":"PointModel[]","typeParameters":[],"line":169,"inheritance":{"file":"LinkModel"}},{"name":"getPortForPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"PortModel","typeParameters":[],"line":107,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getSourcePort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":147,"inheritance":{"file":"LinkModel"}},{"name":"getTargetPort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":151,"inheritance":{"file":"LinkModel"}},{"name":"isLastPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":89,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"point","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":165,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removeMiddlePoints","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216,"inheritance":{"file":"LinkModel"}},{"name":"removePoint","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":204,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsAfter","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":212,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsBefore","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":208,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"resetLabel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"inheritance":{"file":"LinkModel"}},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<LabelModel | null>","typeParameters":[],"line":185,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLinkModel","typeParameters":[],"line":33,"inheritance":{"file":"LinkModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLabel","args":[{"name":"label","type":"LabelModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":180,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":233,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setName","args":[{"name":"name","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"jsdoctags":[{"name":"name","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setPoints","args":[{"name":"points","type":"PointModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"jsdoctags":[{"name":"points","type":"PointModel[]","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setSourcePort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":137,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setTargetPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":155,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ViewChild,\\n  ViewContainerRef\\n} from \'@angular/core\';\\nimport { Coords, DefaultLinkModel, generateCurvePath } from \'ngx-diagrams\';\\nimport { BehaviorSubject, combineLatest } from \'rxjs\';\\nimport { tap } from \'rxjs/operators\';\\n\\n@Component({\\n  selector: \'custom-link\',\\n  templateUrl: \'./custom-link.component.html\',\\n  styleUrls: [\'./custom-link.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.Default\\n})\\nexport class CustomLinkComponent extends DefaultLinkModel implements AfterViewInit {\\n  @ViewChild(\'labelLayer\', { read: ViewContainerRef, static: true })\\n  labelLayer: ViewContainerRef;\\n\\n  _path$: BehaviorSubject<string> = new BehaviorSubject(\'\');\\n  path$ = this._path$.pipe(\\n    this.entityPipe(\'path\'),\\n    tap(() => this.cd.detectChanges())\\n  );\\n\\n  hover = false;\\n\\n  constructor(private cd: ChangeDetectorRef) {\\n    super({ type: \'custom-link\', logPrefix: \'[CustomLink]\' });\\n  }\\n\\n  ngAfterViewInit() {\\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\\n    const lastPCoords$ = this.getLastPoint().selectCoords();\\n\\n    combineLatest([firstPCoords$, lastPCoords$]).subscribe(([firstPCoords, lastPCoords]) => {\\n      const points = [firstPCoords, lastPCoords];\\n\\n      const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\\n      const xOrY = isHorizontal ? \'x\' : \'y\';\\n\\n      // draw the smoothing\\n      // if the points are too close, just draw a straight line\\n      let isStraight = false;\\n      if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 150) {\\n        isStraight = true;\\n      }\\n\\n      const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : 200);\\n      this._path$.next(path);\\n    });\\n  }\\n\\n  calcCenterOfPath(): Coords {\\n    const firstPointCoords = this.getFirstPoint().getCoords();\\n    const lastPointCoords = this.getLastPoint().getCoords();\\n    return { x: (firstPointCoords.x + lastPointCoords.x) / 2, y: (firstPointCoords.y + lastPointCoords.y) / 2 };\\n  }\\n\\n  deleteLink() {\\n    this.destroy();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".custom-link {\\n  #triangle {\\n    path {\\n      fill: currentColor;\\n    }\\n  }\\n}\\n\\n.custom-link-container {\\n  position: relative;\\n  fill: none;\\n  overflow: visible;\\n  pointer-events: all;\\n}\\n\\n.default-point {\\n  color: lightgray;\\n  overflow: visible;\\n  pointer-events: all;\\n\\n  &.hovered {\\n    color: rgb(0, 192, 255);\\n  }\\n}\\n\\n.delete-icon {\\n  color: white;\\n  cursor: pointer;\\n  display: flex;\\n  pointer-events: all;\\n}\\n","styleUrl":"./custom-link.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"cd","type":"ChangeDetectorRef"}],"line":29,"jsdoctags":[{"name":"cd","type":"ChangeDetectorRef","tagName":{"text":"param"}}]},"extends":"DefaultLinkModel","implements":["AfterViewInit"],"templateData":"\x3c!-- Label Host --\x3e\\n<ng-template #labelLayer></ng-template>\\n\\n<svg class=\\"custom-link-container\\" [ngStyle]=\\"{ color: selectColor() | async }\\">\\n  <g>\\n    <defs>\\n      <marker\\n        id=\\"triangle\\"\\n        viewBox=\\"0 0 20 20\\"\\n        refX=\\"15\\"\\n        refY=\\"4\\"\\n        markerUnits=\\"strokeWidth\\"\\n        markerWidth=\\"1\\"\\n        markerHeight=\\"1\\"\\n        orient=\\"auto\\"\\n      >\\n        <path\\n          d=\\"M 0 0 L 10 5 L 0 10 z\\"\\n          fill=\\"currentcolor\\"\\n          stroke=\\"currentcolor\\"\\n        />\\n      </marker>\\n    </defs>\\n    <path\\n      [attr.stroke-width]=\\"width\\"\\n      [attr.stroke]=\\"selectColor() | async\\"\\n      [attr.d]=\\"path$ | async\\"\\n      class=\\"custom-link\\"\\n      (mouseleave)=\\"setHovered(false)\\"\\n      (mouseenter)=\\"setHovered()\\"\\n      [ngClass]=\\"{ hovered: selectHovered() | async }\\"\\n      marker-end=\\"url(#triangle)\\"\\n    ></path>\\n    <path\\n      class=\\"custom-link\\"\\n      (mouseleave)=\\"setHovered(false)\\"\\n      (mouseenter)=\\"setHovered()\\"\\n      [attr.stroke-width]=\\"20\\"\\n      [attr.stroke]=\\"selectColor() | async\\"\\n      [attr.stroke-linecap]=\\"\'round\'\\"\\n      [attr.data-linkid]=\\"id\\"\\n      [attr.stroke-opacity]=\\"(selectHovered() | async) ? \'0.1\' : \'0\'\\"\\n      [attr.d]=\\"path$ | async\\"\\n      marker-end=\\"url(#triangle)\\"\\n    ></path>\\n  </g>\\n\\n  \x3c!-- Points --\x3e\\n  <g *ngFor=\\"let point of getPoints()\\" [id]=\\"point.id\\">\\n    <circle\\n      fill=\\"currentColor\\"\\n      [attr.cx]=\\"point.selectX() | async\\"\\n      [attr.cy]=\\"point.selectY() | async\\"\\n      r=\\"5\\"\\n      class=\\"default-point\\"\\n      [ngClass]=\\"{ hovered: point.selectHovered() | async }\\"\\n    />\\n    <circle\\n      [attr.data-pointid]=\\"point.id\\"\\n      [attr.data-linkid]=\\"id\\"\\n      (mouseleave)=\\"point.setHovered(false); setHovered(false)\\"\\n      (mouseenter)=\\"point.setHovered(); setHovered()\\"\\n      [attr.cx]=\\"point.selectX() | async\\"\\n      [attr.cy]=\\"point.selectY() | async\\"\\n      r=\\"15\\"\\n      [attr.opacity]=\\"0\\"\\n      [ngClass]=\\"{ selected: point.selectSelected() | async }\\"\\n    />\\n  </g>\\n</svg>\\n\\n<div\\n  (click)=\\"deleteLink()\\"\\n  class=\\"delete-icon\\"\\n  [ngStyle]=\\"{\\n    transform:\\n      \'translate(\' +\\n      calcCenterOfPath().x +\\n      \'px, \' +\\n      (calcCenterOfPath().y - 200) +\\n      \'px)\'\\n  }\\"\\n>\\n  <svg\\n    fill=\\"currentcolor\\"\\n    xmlns=\\"http://www.w3.org/2000/svg\\"\\n    height=\\"30px\\"\\n    viewBox=\\"-47 0 512 512\\"\\n    width=\\"30px\\"\\n  >\\n    <path\\n      fill=\\"currentcolor\\"\\n      d=\\"m416.875 114.441406-11.304688-33.886718c-4.304687-12.90625-16.339843-21.578126-29.941406-21.578126h-95.011718v-30.933593c0-15.460938-12.570313-28.042969-28.027344-28.042969h-87.007813c-15.453125 0-28.027343 12.582031-28.027343 28.042969v30.933593h-95.007813c-13.605469 0-25.640625 8.671876-29.945313 21.578126l-11.304687 33.886718c-2.574219 7.714844-1.2695312 16.257813 3.484375 22.855469 4.753906 6.597656 12.445312 10.539063 20.578125 10.539063h11.816406l26.007813 321.605468c1.933594 23.863282 22.183594 42.558594 46.109375 42.558594h204.863281c23.921875 0 44.175781-18.695312 46.105469-42.5625l26.007812-321.601562h6.542969c8.132812 0 15.824219-3.941407 20.578125-10.535157 4.753906-6.597656 6.058594-15.144531 3.484375-22.859375zm-249.320312-84.441406h83.0625v28.976562h-83.0625zm162.804687 437.019531c-.679687 8.402344-7.796875 14.980469-16.203125 14.980469h-204.863281c-8.40625 0-15.523438-6.578125-16.203125-14.980469l-25.816406-319.183593h288.898437zm-298.566406-349.183593 9.269531-27.789063c.210938-.640625.808594-1.070313 1.484375-1.070313h333.082031c.675782 0 1.269532.429688 1.484375 1.070313l9.269531 27.789063zm0 0\\"\\n    />\\n    <path\\n      fill=\\"currentcolor\\"\\n      d=\\"m282.515625 465.957031c.265625.015625.527344.019531.792969.019531 7.925781 0 14.550781-6.210937 14.964844-14.21875l14.085937-270.398437c.429687-8.273437-5.929687-15.332031-14.199219-15.761719-8.292968-.441406-15.328125 5.925782-15.761718 14.199219l-14.082032 270.398437c-.429687 8.273438 5.925782 15.332032 14.199219 15.761719zm0 0\\"\\n    />\\n    <path\\n      fill=\\"currentcolor\\"\\n      d=\\"m120.566406 451.792969c.4375 7.996093 7.054688 14.183593 14.964844 14.183593.273438 0 .554688-.007812.832031-.023437 8.269531-.449219 14.609375-7.519531 14.160157-15.792969l-14.753907-270.398437c-.449219-8.273438-7.519531-14.613281-15.792969-14.160157-8.269531.449219-14.609374 7.519532-14.160156 15.792969zm0 0\\"\\n    />\\n    <path\\n      fill=\\"currentcolor\\"\\n      d=\\"m209.253906 465.976562c8.285156 0 15-6.714843 15-15v-270.398437c0-8.285156-6.714844-15-15-15s-15 6.714844-15 15v270.398437c0 8.285157 6.714844 15 15 15zm0 0\\"\\n    />\\n  </svg>\\n</div>\\n"},{"name":"CustomLinkDiagramComponent","id":"component-CustomLinkDiagramComponent-3ee85126971241fbcfc59768d7ba1a81","file":"libs/ngx-diagrams/stories/link/custom/diagram.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"nodeHeight","defaultValue":"200","line":26},{"name":"nodeWidth","defaultValue":"200","line":27}],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":25}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":35}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  Component,\\n  ComponentFactoryResolver,\\n  Input,\\n  OnInit,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  DefaultLinkModel,\\n} from \'ngx-diagrams\';\\nimport { CustomLinkFactory } from \'./custom.factory\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class CustomLinkDiagramComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n  @Input() nodeHeight = 200;\\n  @Input() nodeWidth = 200;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = {\\n      height: this.nodeHeight,\\n      width: this.nodeWidth,\\n    };\\n    this.diagramEngine.registerDefaultFactories();\\n    this.diagramEngine.registerLinkFactory(\\n      new CustomLinkFactory(this.resolver, this.renderer)\\n    );\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({\\n      name: \'outport1\',\\n      linkType: \'custom-link\',\\n      maximumLinks: 3,\\n    });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 300 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    const link = new DefaultLinkModel({ type: \'custom-link\' });\\n\\n    link.setSourcePort(outport1);\\n    link.setTargetPort(inport);\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":27,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"CustomNodeComponent","id":"component-CustomNodeComponent-002b65712ca81b36119f8aef260fed76","file":"libs/ngx-diagrams/stories/node/custom/custom.component.ts","changeDetection":"ChangeDetectionStrategy.Default","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"custom-node","styleUrls":["./custom.component.scss"],"styles":[],"templateUrl":["./custom.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"destroyed$","defaultValue":"new ReplaySubject(1)","type":"ReplaySubject<boolean>","optional":false,"description":"","line":21},{"name":"nodeContent","defaultValue":"\'Pick me!\'","type":"string","optional":false,"description":"","line":25},{"name":"portsLayer","type":"ViewContainerRef","optional":false,"description":"","line":23,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'portsLayer\', {read: ViewContainerRef, static: true}"}]},{"name":"color","type":"string","optional":false,"description":"","line":7,"inheritance":{"file":"DefaultNodeModel"}},{"name":"height$","type":"Observable<number>","optional":false,"description":"","line":8,"inheritance":{"file":"DefaultNodeModel"}},{"name":"name","type":"string","optional":false,"description":"","line":6,"inheritance":{"file":"DefaultNodeModel"}},{"name":"width$","type":"Observable<number>","optional":false,"description":"","line":9,"inheritance":{"file":"DefaultNodeModel"}},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"diagramEngine$","defaultValue":"createValueState<DiagramEngine>(null, this.entityPipe(\'diagramEngine\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"dimensions$","defaultValue":"createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe(\'dimensions\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"extras$","defaultValue":"createValueState<any>({}, this.entityPipe(\'extras\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"ports$","defaultValue":"createEntityState<P>([], this.entityPipe(\'ports\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"generatePort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":51,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":46},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":31},{"name":"addInPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":29,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultNodeModel"}},{"name":"addOutPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":52,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultNodeModel"}},{"name":"addPort","args":[{"name":"port","type":"P"}],"optional":false,"returnType":"P","typeParameters":[],"line":117,"description":"<p>Assign a port to the node and set the node as its getParent</p>\\n","jsdoctags":[{"name":"port","type":"P","tagName":{"text":"param"}},{"tagName":{"pos":3515,"end":3522,"flags":0,"escapedText":"returns"},"comment":"<p>the inserted port</p>\\n"}],"inheritance":{"file":"NodeModel"}},{"name":"coordsChanges","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":97,"inheritance":{"file":"NodeModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":196,"inheritance":{"file":"NodeModel"}},{"name":"dimensionChanges","args":[],"optional":false,"returnType":"Observable<Dimensions>","typeParameters":[],"line":156,"inheritance":{"file":"NodeModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":48,"inheritance":{"file":"NodeModel"}},{"name":"getDiagramEngine","args":[],"optional":false,"returnType":"DiagramEngine","typeParameters":[],"line":36,"inheritance":{"file":"NodeModel"}},{"name":"getDimensions","args":[],"optional":false,"returnType":"Dimensions","typeParameters":[],"line":151,"inheritance":{"file":"NodeModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":188,"inheritance":{"file":"NodeModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":160,"inheritance":{"file":"NodeModel"}},{"name":"getPort","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"P","typeParameters":[],"line":129,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getPorts","args":[],"optional":false,"returnType":"EntityMap<P>","typeParameters":[],"line":139,"inheritance":{"file":"NodeModel"}},{"name":"getPortsArray","args":[],"optional":false,"returnType":"P[]","typeParameters":[],"line":143,"inheritance":{"file":"NodeModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":81,"inheritance":{"file":"NodeModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":168,"inheritance":{"file":"NodeModel"}},{"name":"removeAllPorts","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":201,"inheritance":{"file":"NodeModel"}},{"name":"removePort","args":[{"name":"portOrId","type":"ID | P"}],"optional":false,"returnType":"string","typeParameters":[],"line":123,"jsdoctags":[{"name":"portOrId","type":"ID | P","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":101,"inheritance":{"file":"NodeModel"}},{"name":"selectDiagramEngine","args":[],"optional":false,"returnType":"Observable<DiagramEngine>","typeParameters":[],"line":40,"inheritance":{"file":"NodeModel"}},{"name":"selectExtras","args":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}]}],"optional":false,"returnType":"Observable<E>","typeParameters":["E"],"line":192,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectHeight","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":180,"inheritance":{"file":"NodeModel"}},{"name":"selectPorts","args":[{"name":"selector","type":"function","optional":true,"function":[]}],"optional":false,"returnType":"Observable<P[]>","typeParameters":[],"line":133,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":176,"inheritance":{"file":"NodeModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":105,"inheritance":{"file":"NodeModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":109,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedNodeModel","typeParameters":[],"line":66,"inheritance":{"file":"NodeModel"}},{"name":"setCoords","args":[{"type":"Coords"}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDiagramEngine","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDimensions","args":[{"name":"dimensions","type":"Partial<Dimensions>"}],"optional":false,"returnType":"void","typeParameters":[],"line":147,"jsdoctags":[{"name":"dimensions","type":"Partial<Dimensions>","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":184,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setHeight","args":[{"name":"height","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":164,"jsdoctags":[{"name":"height","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":172,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  Component,\\n  OnInit,\\n  ViewChild,\\n  ViewContainerRef,\\n  ChangeDetectionStrategy,\\n  OnDestroy,\\n} from \'@angular/core\';\\nimport { PortModel, DefaultNodeModel } from \'ngx-diagrams\';\\nimport { ReplaySubject } from \'rxjs\';\\n\\n@Component({\\n  selector: \'custom-node\',\\n  templateUrl: \'./custom.component.html\',\\n  styleUrls: [\'./custom.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.Default,\\n})\\nexport class CustomNodeComponent\\n  extends DefaultNodeModel\\n  implements OnInit, OnDestroy {\\n  destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\\n  @ViewChild(\'portsLayer\', { read: ViewContainerRef, static: true })\\n  portsLayer: ViewContainerRef;\\n\\n  nodeContent = \'Pick me!\';\\n\\n  constructor() {\\n    super({ type: \'custom-node\' });\\n  }\\n\\n  ngOnInit() {\\n    this.selectPorts().subscribe((ports) => {\\n      ports.forEach((port) => {\\n        if (!port.getPainted()) {\\n          port.setLocked(this.getLocked());\\n          this.generatePort(port);\\n        }\\n      });\\n    });\\n\\n    this.selectSelected().subscribe((selected) => {\\n      this.nodeContent = selected ? \'Thank you 🙏\' : \'Pick me!\';\\n    });\\n  }\\n\\n  ngOnDestroy() {\\n    this.destroyed$.next(true);\\n    this.destroyed$.complete();\\n  }\\n\\n  generatePort(port: PortModel) {\\n    this.getDiagramEngine().generateWidgetForPort(port, this.portsLayer);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  &.selected {\\n    .custom-node {\\n      &:after {\\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\n        border-color: #86d8b9;\\n      }\\n    }\\n  }\\n\\n  .custom-node {\\n    user-select: none;\\n    pointer-events: all;\\n    background-color: white !important;\\n    border-radius: 16px;\\n    transition: all 0.3s ease-in-out;\\n    padding: 20px;\\n    cursor: auto;\\n    border: 1px solid #e1e2e6;\\n\\n    &:hover {\\n      cursor: pointer;\\n      border-color: #86d8b9;\\n    }\\n\\n    &:after {\\n      transition: all 0.3s ease-in-out;\\n      content: \'\';\\n      position: absolute;\\n      top: 12px;\\n      right: 4px;\\n      bottom: 4px;\\n      left: 12px;\\n      z-index: -1;\\n      margin: -9px;\\n      border-radius: 16px;\\n    }\\n\\n    &:after {\\n      background: #86d8b9;\\n    }\\n  }\\n}\\n","styleUrl":"./custom.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":25},"extends":"DefaultNodeModel","implements":["OnInit","OnDestroy"],"templateData":"<div class=\\"custom-node\\">\\n  <div>{{ nodeContent }}</div>\\n\\n  <div class=\\"ports\\">\\n    <ng-template #portsLayer></ng-template>\\n  </div>\\n</div>\\n"},{"name":"CustomNodeDiagramComponent","id":"component-CustomNodeDiagramComponent-121c689dec4f52a6759b5f35f8ae7ff4","file":"libs/ngx-diagrams/stories/node/custom/diagram.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"nodeHeight","defaultValue":"200","line":23},{"name":"nodeWidth","defaultValue":"200","line":24}],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":22}],"methodsClass":[{"name":"ngOnChanges","args":[{"name":"e","type":"SimpleChanges"}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"jsdoctags":[{"name":"e","type":"SimpleChanges","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  Component,\\n  ComponentFactoryResolver,\\n  Input,\\n  OnChanges,\\n  OnInit,\\n  Renderer2,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\nimport { CustomNodeFactory } from \'./custom.factory\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class CustomNodeDiagramComponent implements OnInit, OnChanges {\\n  diagramModel: DiagramModel;\\n  @Input() nodeHeight = 200;\\n  @Input() nodeWidth = 200;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = {\\n      height: this.nodeHeight,\\n      width: this.nodeWidth,\\n    };\\n    this.diagramEngine.registerDefaultFactories();\\n    this.diagramEngine.registerNodeFactory(\\n      new CustomNodeFactory(this.resolver, this.renderer)\\n    );\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel({ type: \'custom-node\' });\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n\\n    this.diagramModel.addAll(node1);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n\\n  ngOnChanges(e: SimpleChanges) {\\n    if (this.diagramModel) {\\n      if (e.nodeHeight) {\\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\\n          node.setHeight(e.nodeHeight.currentValue);\\n        });\\n      }\\n\\n      if (e.nodeWidth) {\\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\\n          node.setWidth(e.nodeWidth.currentValue);\\n        });\\n      }\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":24,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"implements":["OnInit","OnChanges"]},{"name":"CustomPortComponent","id":"component-CustomPortComponent-dafa931a86c542522e7a1bc76e6c89e6","file":"libs/ngx-diagrams/stories/port/custom/custom.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"custom-port","styleUrls":["./custom.component.scss"],"styles":[],"templateUrl":["./custom.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"in","type":"boolean","optional":false,"description":"","line":17,"inheritance":{"file":"DefaultPortModel"}},{"name":"label","type":"string","optional":false,"description":"","line":18,"inheritance":{"file":"DefaultPortModel"}},{"name":"links","type":"HashMap<any>","optional":false,"description":"","line":19,"inheritance":{"file":"DefaultPortModel"}},{"name":"canCreateLinks$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"height$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"links$","defaultValue":"createEntityState<LinkModel>([], this.entityPipe(\'links\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"linkType","type":"string","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"magnetic$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"maximumLinks","type":"number","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"name","type":"string","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"width$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"x$","defaultValue":"createValueState(0, this.entityPipe(\'x\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"y$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"createLinkModel","args":[],"optional":false,"returnType":"DefaultLinkModel","typeParameters":[],"line":14},{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":59,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultPortModel"}},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53,"inheritance":{"file":"DefaultPortModel"}},{"name":"link","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"LinkModel","typeParameters":[],"line":42,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultPortModel"}},{"name":"addLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":140,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":163,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":171,"inheritance":{"file":"PortModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":177,"inheritance":{"file":"PortModel"}},{"name":"getCanCreateLinks","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":61,"inheritance":{"file":"PortModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"{ x: any; y: any; }","typeParameters":[],"line":71,"inheritance":{"file":"PortModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":111,"inheritance":{"file":"PortModel"}},{"name":"getLinks","args":[],"optional":false,"returnType":"EntityMap<LinkModel>","typeParameters":[],"line":144,"inheritance":{"file":"PortModel"}},{"name":"getLinksArray","args":[],"optional":false,"returnType":"LinkModel[]","typeParameters":[],"line":148,"inheritance":{"file":"PortModel"}},{"name":"getLinkType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":127,"inheritance":{"file":"PortModel"}},{"name":"getMagnetic","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":83,"inheritance":{"file":"PortModel"}},{"name":"getMaximumLinks","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":119,"inheritance":{"file":"PortModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":57,"inheritance":{"file":"PortModel"}},{"name":"getNode","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53,"inheritance":{"file":"PortModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":115,"inheritance":{"file":"PortModel"}},{"name":"getX","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":107,"inheritance":{"file":"PortModel"}},{"name":"getY","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":103,"inheritance":{"file":"PortModel"}},{"name":"isLocked","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":167,"inheritance":{"file":"PortModel"}},{"name":"removeLink","args":[{"name":"linkOrId","type":"ID | LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":135,"jsdoctags":[{"name":"linkOrId","type":"ID | LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"selectCanCreateLinks","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":75,"inheritance":{"file":"PortModel"}},{"name":"selectLinks","args":[],"optional":false,"returnType":"Observable<EntityMap<LinkModel>>","typeParameters":[],"line":152,"inheritance":{"file":"PortModel"}},{"name":"selectMagnetic","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":87,"inheritance":{"file":"PortModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":95,"inheritance":{"file":"PortModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":99,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":38,"inheritance":{"file":"PortModel"}},{"name":"setCanCreateLinks","args":[{"name":"value","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":79,"jsdoctags":[{"name":"value","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setLinkType","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMagnetic","args":[{"name":"magnetic","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":91,"jsdoctags":[{"name":"magnetic","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMaximumLinks","args":[{"name":"maximumLinks","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"jsdoctags":[{"name":"maximumLinks","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"updateCoords","args":[{"type":"literal type"}],"optional":false,"returnType":"void","typeParameters":[],"line":156,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { DefaultPortModel, DefaultLinkModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'custom-port\',\\n  templateUrl: \'./custom.component.html\',\\n  styleUrls: [\'./custom.component.scss\'],\\n})\\nexport class CustomPortComponent extends DefaultPortModel {\\n  constructor() {\\n    super();\\n  }\\n\\n  createLinkModel(): DefaultLinkModel {\\n    return new DefaultLinkModel();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  position: absolute;\\n\\n  &.in {\\n    left: 45%;\\n    top: -10px;\\n  }\\n}\\n","styleUrl":"./custom.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":9},"extends":"DefaultPortModel","templateData":"<svg\\n  class=\\"in\\"\\n  *ngIf=\\"in\\"\\n  width=\\"24\\"\\n  height=\\"16\\"\\n  viewBox=\\"0 0 24 16\\"\\n  fill=\\"none\\"\\n  xmlns=\\"http://www.w3.org/2000/svg\\"\\n>\\n  <path\\n    d=\\"M23.4092 0.839456L23.4096 0.839967C23.4709 0.93801 23.5 1.04467 23.5 1.14951C23.5 1.24656 23.4748 1.34624 23.421 1.44004L12.6823 15.1163L12.6657 15.1375L12.6514 15.1603C12.5272 15.3593 12.2828 15.5 11.9998 15.5C11.7164 15.5 11.4727 15.3596 11.3489 15.1608L11.3345 15.1377L11.3177 15.1163L0.578554 1.44007C0.470045 1.25053 0.474001 1.02677 0.590099 0.84006C0.714827 0.640412 0.959347 0.499999 1.2421 0.499999L22.7579 0.5C23.041 0.5 23.285 0.640261 23.4092 0.839456Z\\"\\n    fill=\\"white\\"\\n    stroke=\\"#B0B0B0\\"\\n  />\\n</svg>\\n"},{"name":"CustomPortDiagramComponent","id":"component-CustomPortDiagramComponent-ec7f1e69d562f9ff7812b36e6a998987","file":"libs/ngx-diagrams/stories/port/custom/diagram.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":24}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":32}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  Component,\\n  ComponentFactoryResolver,\\n  OnInit,\\n  Renderer2,\\n} from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  DefaultPortModel,\\n} from \'ngx-diagrams\';\\nimport { CustomPortFactory } from \'./custom.factory\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class CustomPortDiagramComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(\\n    private diagramEngine: DiagramEngine,\\n    private resolver: ComponentFactoryResolver,\\n    private renderer: Renderer2\\n  ) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n    this.diagramEngine.registerPortFactory(\\n      new CustomPortFactory(this.resolver, this.renderer)\\n    );\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const port1 = new DefaultPortModel({ type: \'custom-port\' });\\n    node1.addPort(port1);\\n\\n    this.diagramModel.addAll(node1);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"},{"name":"resolver","type":"ComponentFactoryResolver"},{"name":"renderer","type":"Renderer2"}],"line":24,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}},{"name":"resolver","type":"ComponentFactoryResolver","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"DefaultLabelComponent","id":"component-DefaultLabelComponent-c0f18a1d6cec384de938dcf01b44cbdf","file":"libs/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngdx-default-label","styleUrls":["./default-label.component.scss"],"styles":[],"templateUrl":["./default-label.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"label$","defaultValue":"createValueState<string>(\'\', this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":6,"modifierKind":[113],"inheritance":{"file":"DefaultLabelModel"}},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"rotation$","defaultValue":"createValueState<number>(0, this.entityPipe(\'rotation\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"LabelModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"getLabel","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":17,"inheritance":{"file":"DefaultLabelModel"}},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":21,"inheritance":{"file":"DefaultLabelModel"}},{"name":"setLabel","args":[{"name":"label","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":13,"jsdoctags":[{"name":"label","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLabelModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33,"inheritance":{"file":"LabelModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":29,"inheritance":{"file":"LabelModel"}},{"name":"getRotation","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":25,"inheritance":{"file":"LabelModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":49,"inheritance":{"file":"LabelModel"}},{"name":"selectRotation","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":41,"inheritance":{"file":"LabelModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLabelModel","typeParameters":[],"line":16,"inheritance":{"file":"LabelModel"}},{"name":"setCoords","args":[{"name":"newCoords","type":"Partial<Coords>"}],"optional":false,"returnType":"void","typeParameters":[],"line":45,"jsdoctags":[{"name":"newCoords","type":"Partial<Coords>","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"setRotation","args":[{"name":"angle","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"jsdoctags":[{"name":"angle","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"LabelModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { DefaultLabelModel } from \'../../models/default-label.model\';\\n\\n@Component({\\n\\tselector: \'ngdx-default-label\',\\n\\ttemplateUrl: \'./default-label.component.html\',\\n\\tstyleUrls: [\'./default-label.component.scss\'],\\n\\tchangeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class DefaultLabelComponent extends DefaultLabelModel {\\n  constructor() {\\n    super(\'ngdx-default-label\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".default-label {\\n  color: white;\\n  user-select: none;\\n}\\n","styleUrl":"./default-label.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":10},"extends":"DefaultLabelModel","templateData":"<div\\n  class=\\"default-label\\"\\n  [ngStyle]=\\"{\\n\\t\\ttransform:\\n\\t\\t\\t\'translate(\' +\\n\\t\\t\\t(selectCoords() | async).x +\\n\\t\\t\\t\'px, \' +\\n\\t\\t\\t(selectCoords() | async).y +\\n\\t\\t\\t\'px)\' +\\n\\t\\t\\t\'rotate(\' +\\n\\t\\t\\t(selectRotation() | async) +\\n\\t\\t\\t\'deg)\'\\n\\t}\\">\\n  {{ selectLabel() | async }}\\n</div>\\n"},{"name":"DefaultLabelStoryComponent","id":"component-DefaultLabelStoryComponent-b0e39b2449a5a52d11b5ae61e50ae5b2","file":"libs/ngx-diagrams/stories/label/default/default.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":18}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":22}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  DefaultLabelModel,\\n} from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class DefaultLabelStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 300 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    const link = outport1.link(inport);\\n    const label = new DefaultLabelModel(\\"I\'m a label\\");\\n    link.setLabel(label);\\n    link.setLocked();\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":18,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"DefaultLinkComponent","id":"component-DefaultLinkComponent-9d229b45b07492c14df26f91a08f651c","file":"libs/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngdx-default-link","styleUrls":["./default-link.component.scss"],"styles":[],"templateUrl":["./default-link.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"labelLayer","type":"ViewContainerRef","optional":false,"description":"","line":28,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'labelLayer\', {read: ViewContainerRef, static: true}"}]},{"name":"path$","defaultValue":"createValueState<string>(null, this.entityPipe(\'path\'))","type":"","optional":false,"description":"","line":30},{"name":"pathFinding","type":"PathFinding","optional":false,"description":"","line":33},{"name":"points$","defaultValue":"createValueState<PointModel[]>([], this.entityPipe(\'points\'))","type":"","optional":false,"description":"","line":31},{"name":"color$","defaultValue":"createValueState<string>(\'rgba(255, 255, 255, 0.5)\', this.entityPipe(\'color\'))","type":"","optional":false,"description":"","line":7,"inheritance":{"file":"DefaultLinkModel"}},{"name":"curvyness$","defaultValue":"createValueState<number>(50, this.entityPipe(\'curvyness\'))","type":"","optional":false,"description":"","line":8,"inheritance":{"file":"DefaultLinkModel"}},{"name":"width$","defaultValue":"createValueState<number>(3, this.entityPipe(\'width\'))","type":"","optional":false,"description":"","line":6,"inheritance":{"file":"DefaultLinkModel"}},{"name":"diagramEngine","type":"DiagramEngine","optional":false,"description":"","line":14,"inheritance":{"file":"LinkModel"}},{"name":"extras","type":"any","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"label$","defaultValue":"createValueState<LabelModel>(null, this.entityPipe(\'label\'))","type":"","optional":false,"description":"","line":23,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"name","type":"string","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"points","type":"PointModel[]","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"sourcePort","type":"PortModel | null","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"targetPort","type":"PortModel | null","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"LinkModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"calcCenterOfPath","args":[{"name":"firstPoint","type":"Coords"},{"name":"secondPoint","type":"Coords"}],"optional":false,"returnType":"Coords","typeParameters":[],"line":137,"jsdoctags":[{"name":"firstPoint","type":"Coords","tagName":{"text":"param"}},{"name":"secondPoint","type":"Coords","tagName":{"text":"param"}}]},{"name":"calcLabelIncline","args":[{"name":"firstPoint","type":"Coords"},{"name":"secondPoint","type":"Coords"}],"optional":false,"returnType":"number","typeParameters":[],"line":120,"jsdoctags":[{"name":"firstPoint","type":"Coords","tagName":{"text":"param"}},{"name":"secondPoint","type":"Coords","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":49},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":43},{"name":"selectPath","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":141},{"name":"trackByPoints","args":[{"name":"i","type":"number"},{"name":"point","type":"PointModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":39,"jsdoctags":[{"name":"i","type":"number","tagName":{"text":"param"}},{"name":"point","type":"PointModel","tagName":{"text":"param"}}]},{"name":"selectColor","args":[],"optional":false,"returnType":"Observable<string>","typeParameters":[],"line":30,"inheritance":{"file":"DefaultLinkModel"}},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":26,"inheritance":{"file":"DefaultLinkModel"}},{"name":"setColor","args":[{"name":"color","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":22,"jsdoctags":[{"name":"color","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"setCurvyness","args":[{"name":"curvyness","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"jsdoctags":[{"name":"curvyness","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":18,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultLinkModel"}},{"name":"addPoint","args":[{"name":"pointModel","type":"P"},{"name":"index","type":"number","defaultValue":"1"}],"optional":false,"returnType":"P","typeParameters":["P"],"line":222,"jsdoctags":[{"name":"pointModel","type":"P","tagName":{"text":"param"}},{"name":"index","type":"number","defaultValue":"1","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63,"inheritance":{"file":"LinkModel"}},{"name":"doClone","args":[{"name":"lookupTable","type":"object","defaultValue":"{}"},{"name":"clone","type":""}],"optional":false,"returnType":"void","typeParameters":[],"line":75,"jsdoctags":[{"name":"lookupTable","type":"object","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"generatePoint","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":229,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":55,"inheritance":{"file":"LinkModel"}},{"name":"getFirstPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":129,"inheritance":{"file":"LinkModel"}},{"name":"getLabel","args":[],"optional":false,"returnType":"LabelModel","typeParameters":[],"line":189,"inheritance":{"file":"LinkModel"}},{"name":"getLastPoint","args":[],"optional":false,"returnType":"PointModel","typeParameters":[],"line":133,"inheritance":{"file":"LinkModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":51,"inheritance":{"file":"LinkModel"}},{"name":"getPointForPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":117,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointIndex","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"any","typeParameters":[],"line":94,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPointModel","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"PointModel | null","typeParameters":[],"line":98,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getPoints","args":[],"optional":false,"returnType":"PointModel[]","typeParameters":[],"line":169,"inheritance":{"file":"LinkModel"}},{"name":"getPortForPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"PortModel","typeParameters":[],"line":107,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getSourcePort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":147,"inheritance":{"file":"LinkModel"}},{"name":"getTargetPort","args":[],"optional":false,"returnType":"PortModel","typeParameters":[],"line":151,"inheritance":{"file":"LinkModel"}},{"name":"isLastPoint","args":[{"name":"point","type":"PointModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":89,"jsdoctags":[{"name":"point","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"point","args":[{"type":"Coords"}],"optional":false,"returnType":"PointModel","typeParameters":[],"line":165,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removeMiddlePoints","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":216,"inheritance":{"file":"LinkModel"}},{"name":"removePoint","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":204,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsAfter","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":212,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"removePointsBefore","args":[{"name":"pointModel","type":"PointModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":208,"jsdoctags":[{"name":"pointModel","type":"PointModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"resetLabel","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":193,"inheritance":{"file":"LinkModel"}},{"name":"selectLabel","args":[],"optional":false,"returnType":"Observable<LabelModel | null>","typeParameters":[],"line":185,"inheritance":{"file":"LinkModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedLinkModel","typeParameters":[],"line":33,"inheritance":{"file":"LinkModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLabel","args":[{"name":"label","type":"LabelModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":180,"jsdoctags":[{"name":"label","type":"LabelModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":233,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setName","args":[{"name":"name","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"jsdoctags":[{"name":"name","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setPoints","args":[{"name":"points","type":"PointModel[]"}],"optional":false,"returnType":"void","typeParameters":[],"line":173,"jsdoctags":[{"name":"points","type":"PointModel[]","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setSourcePort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":137,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"setTargetPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":155,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"LinkModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  OnInit,\\n  ViewChild,\\n  ViewContainerRef\\n} from \'@angular/core\';\\nimport { combineLatest, Observable } from \'rxjs\';\\nimport { filter, takeUntil } from \'rxjs/operators\';\\nimport { Coords } from \'../../../interfaces\';\\nimport { LabelModel } from \'../../../models/label.model\';\\nimport { PointModel } from \'../../../models/point.model\';\\nimport { PathFinding } from \'../../../plugins/smart-routing.plugin\';\\nimport { createValueState } from \'../../../state/state\';\\nimport { generateCurvePath, generateDynamicPath } from \'../../../utils/tool-kit.util\';\\nimport { DefaultLinkModel } from \'../../models/default-link.model\';\\n\\n@Component({\\n  selector: \'ngdx-default-link\',\\n  templateUrl: \'./default-link.component.html\',\\n  styleUrls: [\'./default-link.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class DefaultLinkComponent extends DefaultLinkModel implements AfterViewInit, OnInit {\\n  @ViewChild(\'labelLayer\', { read: ViewContainerRef, static: true })\\n  labelLayer: ViewContainerRef;\\n\\n  path$ = createValueState<string>(null, this.entityPipe(\'path\'));\\n  points$ = createValueState<PointModel[]>([], this.entityPipe(\'points\'));\\n\\n  pathFinding: PathFinding; // only set when smart routing is active\\n\\n  constructor(private cdRef: ChangeDetectorRef) {\\n    super({ type: \'ngdx-default-link\' });\\n  }\\n\\n  trackByPoints(i: number, point: PointModel) {\\n    return point.id;\\n  }\\n\\n  ngOnInit() {\\n    if (this.diagramEngine.getSmartRouting()) {\\n      this.pathFinding = this.diagramEngine.getPathfinding();\\n    }\\n  }\\n\\n  ngAfterViewInit() {\\n    const firstPCoords$ = this.getFirstPoint().selectCoords();\\n    const lastPCoords$ = this.getLastPoint().selectCoords();\\n\\n    // Observe link coords and update drawing accordingly\\n    combineLatest([firstPCoords$, lastPCoords$])\\n      .pipe(takeUntil(this.onEntityDestroy()))\\n      .subscribe(([firstPCoords, lastPCoords]) => {\\n        const points = [firstPCoords, lastPCoords];\\n\\n        if (this.diagramEngine.getSmartRouting()) {\\n          // first step: calculate a direct path between the points being linked\\n          const directPathCoords = this.pathFinding.calculateDirectPath(firstPCoords, lastPCoords);\\n          const routingMatrix = this.diagramEngine.getRoutingMatrix();\\n\\n          // now we need to extract, from the routing matrix, the very first walkable points\\n          // so they can be used as origin and destination of the link to be created\\n          const smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\\n\\n          if (smartLink) {\\n            const { start, end, pathToStart, pathToEnd } = smartLink;\\n            // second step: calculate a path avoiding hitting other elements\\n            const simplifiedPath = this.pathFinding.calculateDynamicPath(\\n              routingMatrix,\\n              start,\\n              end,\\n              pathToStart,\\n              pathToEnd\\n            );\\n            const smartPath = generateDynamicPath(simplifiedPath);\\n            this.path$.set(smartPath).emit();\\n          }\\n        } else {\\n          // handle regular links\\n          // draw the smoothing\\n          // if the points are too close, just draw a straight line\\n          const isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\\n          const xOrY = isHorizontal ? \'x\' : \'y\';\\n          let isStraight = false;\\n          if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\\n            isStraight = true;\\n          }\\n\\n          const path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : this.curvyness);\\n          this.path$.set(path).emit();\\n        }\\n\\n        const label = this.getLabel();\\n        // update label position\\n        if (label) {\\n          label.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\\n\\n          // TODO: check whether we want the label to rotate along with the line\\n          // label.setRotation(this.calcLabelIncline(firstPCoords, lastPCoords));\\n        }\\n\\n        // TODO: handle the multiple lines in between the points\\n        // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/widgets/DefaultLinkWidget.tsx#L344-L371\\n\\n        this.cdRef.detectChanges();\\n      });\\n\\n    // observe link label and draw/remove accordingly\\n    this.selectLabel()\\n      .pipe(filter(Boolean))\\n      .subscribe((label: LabelModel) => {\\n        this.diagramEngine.generateWidgetForLabel(label, this.labelLayer);\\n        this.cdRef.detectChanges();\\n      });\\n  }\\n\\n  calcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\\n    const dy = secondPoint.y - firstPoint.y;\\n    const dx = secondPoint.x - firstPoint.x;\\n\\n    if (dx === 0) {\\n      return 0;\\n    }\\n\\n    let inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\\n\\n    if (inclineAngel < 0) {\\n      inclineAngel += 180;\\n    }\\n\\n    return inclineAngel;\\n  }\\n\\n  calcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\\n    return { x: (firstPoint.x + secondPoint.x) / 2 + 20, y: (firstPoint.y + secondPoint.y) / 2 + 20 };\\n  }\\n\\n  selectPath(): Observable<string> {\\n    return this.path$.value$;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".link-container {\\n  position: relative;\\n  fill: none;\\n  overflow: visible;\\n  pointer-events: all;\\n}\\n\\n.default-link {\\n  fill: none;\\n  overflow: visible;\\n\\n  @keyframes dash {\\n    from {\\n      stroke-dashoffset: 24;\\n    }\\n    to {\\n      stroke-dashoffset: 0;\\n    }\\n  }\\n\\n  &.hovered {\\n    stroke: rgb(0, 192, 255);\\n    stroke-dasharray: 10, 2;\\n    animation: dash 1s linear infinite;\\n  }\\n}\\n\\n.default-point {\\n  color: lightgray;\\n  overflow: visible;\\n  pointer-events: all;\\n\\n  &.hovered {\\n    color: rgb(0, 192, 255);\\n  }\\n}\\n","styleUrl":"./default-link.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"cdRef","type":"ChangeDetectorRef"}],"line":33,"jsdoctags":[{"name":"cdRef","type":"ChangeDetectorRef","tagName":{"text":"param"}}]},"extends":"DefaultLinkModel","implements":["AfterViewInit","OnInit"],"templateData":"\x3c!-- Label Host --\x3e\\n<ng-template #labelLayer></ng-template>\\n\\n<svg class=\\"link-container\\">\\n  \x3c!-- Link --\x3e\\n  <g [id]=\\"id\\">\\n    <path\\n      [attr.stroke-width]=\\"width\\"\\n      [attr.stroke]=\\"selectColor() | async\\"\\n      [attr.d]=\\"selectPath() | async\\"\\n      class=\\"default-link\\"\\n      (mouseleave)=\\"setHovered(false)\\"\\n      (mouseenter)=\\"setHovered()\\"\\n      [ngClass]=\\"{ hovered: selectHovered() | async }\\"\\n    ></path>\\n    <path\\n      class=\\"default-link\\"\\n      (mouseleave)=\\"setHovered(false)\\"\\n      (mouseenter)=\\"setHovered()\\"\\n      [attr.stroke-width]=\\"20\\"\\n      [attr.stroke]=\\"selectColor() | async\\"\\n      [attr.stroke-linecap]=\\"\'round\'\\"\\n      [attr.data-linkid]=\\"id\\"\\n      [attr.stroke-opacity]=\\"(selectHovered() | async) ? \'0.1\' : \'0\'\\"\\n      [attr.d]=\\"selectPath() | async\\"\\n    ></path>\\n  </g>\\n\\n  \x3c!-- Points --\x3e\\n  <g *ngFor=\\"let point of getPoints(); trackBy: trackByPoints\\" [id]=\\"point.id\\">\\n    <circle\\n      fill=\\"currentColor\\"\\n      [attr.cx]=\\"point.selectX() | async\\"\\n      [attr.cy]=\\"point.selectY() | async\\"\\n      r=\\"5\\"\\n      class=\\"default-point\\"\\n      [ngClass]=\\"{ hovered: point.selectHovered() | async }\\"\\n    />\\n    <circle\\n      [attr.data-pointid]=\\"point.id\\"\\n      [attr.data-linkid]=\\"id\\"\\n      (mouseleave)=\\"point.setHovered(false); setHovered(false)\\"\\n      (mouseenter)=\\"point.setHovered(); setHovered()\\"\\n      [attr.cx]=\\"point.selectX() | async\\"\\n      [attr.cy]=\\"point.selectY() | async\\"\\n      r=\\"15\\"\\n      [attr.opacity]=\\"0\\"\\n      [ngClass]=\\"{ selected: point.selectSelected() | async }\\"\\n    />\\n  </g>\\n</svg>\\n"},{"name":"DefaultLinkStoryComponent","id":"component-DefaultLinkStoryComponent-1a2cab84ce4567ab5dcd0a370ec119db","file":"libs/ngx-diagrams/stories/link/default/default.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":13}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":17}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class DefaultLinkStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 0 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    for (let index = 0; index < 2; index++) {\\n      const nodeLoop = new DefaultNodeModel();\\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\\n      nodeLoop.setDimensions(nodesDefaultDimensions);\\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\\n\\n      this.diagramModel.addNode(nodeLoop);\\n    }\\n\\n    const link = outport1.link(inport);\\n    link.setLocked();\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":13,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"DefaultNodeComponent","id":"component-DefaultNodeComponent-48783ae7ac933b7f9da313dd86a734cc","file":"libs/ngx-diagrams/stories/node/default/default.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":13}],"methodsClass":[{"name":"ngOnChanges","args":[{"name":"e","type":"SimpleChanges"}],"optional":false,"returnType":"void","typeParameters":[],"line":32,"jsdoctags":[{"name":"e","type":"SimpleChanges","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":17}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnChanges, OnInit, SimpleChanges } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class DefaultNodeComponent implements OnInit, OnChanges {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n\\n    this.diagramModel.addAll(node1);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n\\n  ngOnChanges(e: SimpleChanges) {\\n    if (this.diagramModel) {\\n      if (e.nodeHeight) {\\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\\n          node.setHeight(e.nodeHeight.currentValue);\\n        });\\n      }\\n\\n      if (e.nodeWidth) {\\n        Object.values(this.diagramModel.getNodes()).forEach((node) => {\\n          node.setWidth(e.nodeWidth.currentValue);\\n        });\\n      }\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":13,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit","OnChanges"]},{"name":"DefaultNodeComponent","id":"component-DefaultNodeComponent-c69587006af63dc792fe4143d95c4de6-1","file":"libs/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngdx-default-node","styleUrls":["./default-node.component.scss"],"styles":[],"templateUrl":["./default-node.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"portsLayer","type":"ViewContainerRef","optional":false,"description":"","line":14,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'portsLayer\', {read: ViewContainerRef, static: true}"}]},{"name":"color","type":"string","optional":false,"description":"","line":7,"inheritance":{"file":"DefaultNodeModel"}},{"name":"height$","type":"Observable<number>","optional":false,"description":"","line":8,"inheritance":{"file":"DefaultNodeModel"}},{"name":"name","type":"string","optional":false,"description":"","line":6,"inheritance":{"file":"DefaultNodeModel"}},{"name":"width$","type":"Observable<number>","optional":false,"description":"","line":9,"inheritance":{"file":"DefaultNodeModel"}},{"name":"coords$","defaultValue":"createValueState<Coords>({ x: 0, y: 0 }, this.entityPipe(\'coords\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"diagramEngine$","defaultValue":"createValueState<DiagramEngine>(null, this.entityPipe(\'diagramEngine\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"dimensions$","defaultValue":"createValueState<Dimensions>({ width: 0, height: 0 }, this.entityPipe(\'dimensions\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"extras$","defaultValue":"createValueState<any>({}, this.entityPipe(\'extras\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"ports$","defaultValue":"createEntityState<P>([], this.entityPipe(\'ports\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"NodeModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"generatePort","args":[{"name":"port","type":"DefaultPortModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":37,"jsdoctags":[{"name":"port","type":"DefaultPortModel","tagName":{"text":"param"}}]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":20},{"name":"addInPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":29,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultNodeModel"}},{"name":"addOutPort","args":[{"type":"literal type"}],"optional":false,"returnType":"any","typeParameters":[],"line":52,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultNodeModel"}},{"name":"addPort","args":[{"name":"port","type":"P"}],"optional":false,"returnType":"P","typeParameters":[],"line":117,"description":"<p>Assign a port to the node and set the node as its getParent</p>\\n","jsdoctags":[{"name":"port","type":"P","tagName":{"text":"param"}},{"tagName":{"pos":3515,"end":3522,"flags":0,"escapedText":"returns"},"comment":"<p>the inserted port</p>\\n"}],"inheritance":{"file":"NodeModel"}},{"name":"coordsChanges","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":97,"inheritance":{"file":"NodeModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":196,"inheritance":{"file":"NodeModel"}},{"name":"dimensionChanges","args":[],"optional":false,"returnType":"Observable<Dimensions>","typeParameters":[],"line":156,"inheritance":{"file":"NodeModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"Coords","typeParameters":[],"line":48,"inheritance":{"file":"NodeModel"}},{"name":"getDiagramEngine","args":[],"optional":false,"returnType":"DiagramEngine","typeParameters":[],"line":36,"inheritance":{"file":"NodeModel"}},{"name":"getDimensions","args":[],"optional":false,"returnType":"Dimensions","typeParameters":[],"line":151,"inheritance":{"file":"NodeModel"}},{"name":"getExtras","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":188,"inheritance":{"file":"NodeModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":160,"inheritance":{"file":"NodeModel"}},{"name":"getPort","args":[{"name":"id","type":"ID"}],"optional":false,"returnType":"P","typeParameters":[],"line":129,"jsdoctags":[{"name":"id","type":"ID","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getPorts","args":[],"optional":false,"returnType":"EntityMap<P>","typeParameters":[],"line":139,"inheritance":{"file":"NodeModel"}},{"name":"getPortsArray","args":[],"optional":false,"returnType":"P[]","typeParameters":[],"line":143,"inheritance":{"file":"NodeModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":81,"inheritance":{"file":"NodeModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":168,"inheritance":{"file":"NodeModel"}},{"name":"removeAllPorts","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":201,"inheritance":{"file":"NodeModel"}},{"name":"removePort","args":[{"name":"portOrId","type":"ID | P"}],"optional":false,"returnType":"string","typeParameters":[],"line":123,"jsdoctags":[{"name":"portOrId","type":"ID | P","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectCoords","args":[],"optional":false,"returnType":"Observable<Coords>","typeParameters":[],"line":101,"inheritance":{"file":"NodeModel"}},{"name":"selectDiagramEngine","args":[],"optional":false,"returnType":"Observable<DiagramEngine>","typeParameters":[],"line":40,"inheritance":{"file":"NodeModel"}},{"name":"selectExtras","args":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}]}],"optional":false,"returnType":"Observable<E>","typeParameters":["E"],"line":192,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[{"name":"extra","type":"E"}],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectHeight","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":180,"inheritance":{"file":"NodeModel"}},{"name":"selectPorts","args":[{"name":"selector","type":"function","optional":true,"function":[]}],"optional":false,"returnType":"Observable<P[]>","typeParameters":[],"line":133,"jsdoctags":[{"name":"selector","type":"function","optional":true,"function":[],"tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"selectWidth","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":176,"inheritance":{"file":"NodeModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":105,"inheritance":{"file":"NodeModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":109,"inheritance":{"file":"NodeModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"SerializedNodeModel","typeParameters":[],"line":66,"inheritance":{"file":"NodeModel"}},{"name":"setCoords","args":[{"type":"Coords"}],"optional":false,"returnType":"void","typeParameters":[],"line":52,"jsdoctags":[{"type":"Coords","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDiagramEngine","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setDimensions","args":[{"name":"dimensions","type":"Partial<Dimensions>"}],"optional":false,"returnType":"void","typeParameters":[],"line":147,"jsdoctags":[{"name":"dimensions","type":"Partial<Dimensions>","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setExtras","args":[{"name":"extras","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":184,"jsdoctags":[{"name":"extras","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setHeight","args":[{"name":"height","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":164,"jsdoctags":[{"name":"height","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"setWidth","args":[{"name":"width","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":172,"jsdoctags":[{"name":"width","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"NodeModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, OnInit, ViewChild, ViewContainerRef } from \'@angular/core\';\\nimport { filter, switchMap } from \'rxjs/operators\';\\nimport { DefaultPortModel } from \'../../models\';\\nimport { DefaultNodeModel } from \'../../models/default-node.model\';\\n\\n@Component({\\n  selector: \'ngdx-default-node\',\\n  templateUrl: \'./default-node.component.html\',\\n  styleUrls: [\'./default-node.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class DefaultNodeComponent extends DefaultNodeModel implements OnInit {\\n  @ViewChild(\'portsLayer\', { read: ViewContainerRef, static: true })\\n  portsLayer: ViewContainerRef;\\n\\n  constructor() {\\n    super({ type: \'ngdx-default-node\' });\\n  }\\n\\n  ngOnInit() {\\n    // when node is painted and port isn\'t, draw ports\\n\\n    this.paintChanges()\\n      .pipe(\\n        filter((paintedE) => paintedE.isPainted),\\n        switchMap(() => this.selectPorts())\\n      )\\n      .subscribe((ports) => {\\n        ports.forEach((port: DefaultPortModel) => {\\n          if (!port.getPainted()) {\\n            this.generatePort(port);\\n          }\\n        });\\n      });\\n  }\\n\\n  generatePort(port: DefaultPortModel) {\\n    const diagramEngine = this.getDiagramEngine();\\n    diagramEngine.generateWidgetForPort(port, this.portsLayer);\\n\\n    port.paintChanges().subscribe((paintedEvent) => {\\n      if (paintedEvent.isPainted) {\\n        port.updateCoords(diagramEngine.getPortCoords(port));\\n      }\\n    });\\n  }\\n\\n  // https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/models/DefaultNodeModel.ts\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  &.selected {\\n    .default-node {\\n      background-color: white !important;\\n      border-color: blue;\\n    }\\n  }\\n\\n  .default-node {\\n    pointer-events: all;\\n    width: 100%;\\n    border-radius: 10px;\\n    transition: all 0.3s ease-in-out;\\n\\n    cursor: auto;\\n    .title {\\n      padding: 10px;\\n      text-align: center;\\n      border-bottom: 1px solid blue;\\n    }\\n  }\\n\\n  .ports {\\n    flex-grow: 1;\\n    display: flex;\\n    flex-direction: column;\\n  }\\n}\\n","styleUrl":"./default-node.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":14},"extends":"DefaultNodeModel","implements":["OnInit"],"isDuplicate":true,"duplicateId":1,"duplicateName":"DefaultNodeComponent-1","templateData":"<div\\n  class=\\"default-node\\"\\n  [ngStyle]=\\"{\\n    \'height.px\': height$ | async,\\n    \'width.px\': width$ | async,\\n    \'background-color\': color\\n  }\\"\\n>\\n  <div class=\\"ports\\">\\n    <ng-template #portsLayer></ng-template>\\n  </div>\\n</div>\\n"},{"name":"DefaultPortComponent","id":"component-DefaultPortComponent-9817f7879dfa0a7cad0906090258f2fd","file":"libs/ngx-diagrams/stories/port/default/default.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":13}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":17}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `<ngdx-diagram\\n    class=\\"demo-diagram\\"\\n    [model]=\\"diagramModel\\"\\n  ></ngdx-diagram>`,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class DefaultPortComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    node1.addInPort({ name: \'inport1\' });\\n    node1.addOutPort({ name: \'outport1\' });\\n\\n    this.diagramModel.addAll(node1);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":13,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"DefaultPortComponent","id":"component-DefaultPortComponent-04349aadbc7bade7fd7310c464cbb60e-1","file":"libs/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngdx-default-port","styleUrls":["./default-port.component.scss"],"styles":[],"templateUrl":["./default-port.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"in","type":"boolean","optional":false,"description":"","line":17,"inheritance":{"file":"DefaultPortModel"}},{"name":"label","type":"string","optional":false,"description":"","line":18,"inheritance":{"file":"DefaultPortModel"}},{"name":"links","type":"HashMap<any>","optional":false,"description":"","line":19,"inheritance":{"file":"DefaultPortModel"}},{"name":"canCreateLinks$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"height$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"links$","defaultValue":"createEntityState<LinkModel>([], this.entityPipe(\'links\'))","type":"","optional":false,"description":"","line":14,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"linkType","type":"string","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"magnetic$","defaultValue":"createValueState(true, this.entityPipe(\'magnetic\'))","type":"","optional":false,"description":"","line":19,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"maximumLinks","type":"number","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"name","type":"string","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"width$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":17,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"x$","defaultValue":"createValueState(0, this.entityPipe(\'x\'))","type":"","optional":false,"description":"","line":15,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"y$","defaultValue":"createValueState(0, this.entityPipe(\'y\'))","type":"","optional":false,"description":"","line":16,"modifierKind":[113],"inheritance":{"file":"PortModel"}},{"name":"_type","type":"string","optional":false,"description":"","line":7,"modifierKind":[113,132],"inheritance":{"file":"BaseModel"}},{"name":"hovered$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'HoveredChange\'))","type":"","optional":false,"description":"","line":11,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"painted$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'PaintedChange\'))","type":"","optional":false,"description":"","line":12,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"parent$","defaultValue":"createValueState<E>(null, this.entityPipe(\'ParentsChange\'))","type":"","optional":false,"description":"","line":9,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"selected$","defaultValue":"createValueState<boolean>(false, this.entityPipe(\'SelectedChange\'))","type":"","optional":false,"description":"","line":10,"modifierKind":[113],"inheritance":{"file":"BaseModel"}},{"name":"_id","type":"ID","optional":false,"description":"","line":18,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"_logPrefix","type":"string","optional":false,"description":"","line":23,"modifierKind":[113,132],"inheritance":{"file":"BaseEntity"}},{"name":"destroyed$","defaultValue":"new Subject<void>()","type":"","optional":false,"description":"","line":20,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}},{"name":"locked$","defaultValue":"createValueState(false, this.entityPipe(\'locked\'))","type":"","optional":false,"description":"","line":21,"modifierKind":[113],"inheritance":{"file":"BaseEntity"}}],"methodsClass":[{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":59,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultPortModel"}},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53,"inheritance":{"file":"DefaultPortModel"}},{"name":"link","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"LinkModel","typeParameters":[],"line":42,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"DefaultPortModel"}},{"name":"addLink","args":[{"name":"link","type":"LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":140,"jsdoctags":[{"name":"link","type":"LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"canLinkToPort","args":[{"name":"port","type":"PortModel"}],"optional":false,"returnType":"boolean","typeParameters":[],"line":163,"jsdoctags":[{"name":"port","type":"PortModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"createLinkModel","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":171,"inheritance":{"file":"PortModel"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":177,"inheritance":{"file":"PortModel"}},{"name":"getCanCreateLinks","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":61,"inheritance":{"file":"PortModel"}},{"name":"getCoords","args":[],"optional":false,"returnType":"{ x: any; y: any; }","typeParameters":[],"line":71,"inheritance":{"file":"PortModel"}},{"name":"getHeight","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":111,"inheritance":{"file":"PortModel"}},{"name":"getLinks","args":[],"optional":false,"returnType":"EntityMap<LinkModel>","typeParameters":[],"line":144,"inheritance":{"file":"PortModel"}},{"name":"getLinksArray","args":[],"optional":false,"returnType":"LinkModel[]","typeParameters":[],"line":148,"inheritance":{"file":"PortModel"}},{"name":"getLinkType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":127,"inheritance":{"file":"PortModel"}},{"name":"getMagnetic","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":83,"inheritance":{"file":"PortModel"}},{"name":"getMaximumLinks","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":119,"inheritance":{"file":"PortModel"}},{"name":"getName","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":57,"inheritance":{"file":"PortModel"}},{"name":"getNode","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":53,"inheritance":{"file":"PortModel"}},{"name":"getWidth","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":115,"inheritance":{"file":"PortModel"}},{"name":"getX","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":107,"inheritance":{"file":"PortModel"}},{"name":"getY","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":103,"inheritance":{"file":"PortModel"}},{"name":"isLocked","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":167,"inheritance":{"file":"PortModel"}},{"name":"removeLink","args":[{"name":"linkOrId","type":"ID | LinkModel"}],"optional":false,"returnType":"void","typeParameters":[],"line":135,"jsdoctags":[{"name":"linkOrId","type":"ID | LinkModel","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"selectCanCreateLinks","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":75,"inheritance":{"file":"PortModel"}},{"name":"selectLinks","args":[],"optional":false,"returnType":"Observable<EntityMap<LinkModel>>","typeParameters":[],"line":152,"inheritance":{"file":"PortModel"}},{"name":"selectMagnetic","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":87,"inheritance":{"file":"PortModel"}},{"name":"selectX","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":95,"inheritance":{"file":"PortModel"}},{"name":"selectY","args":[],"optional":false,"returnType":"Observable<number>","typeParameters":[],"line":99,"inheritance":{"file":"PortModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":38,"inheritance":{"file":"PortModel"}},{"name":"setCanCreateLinks","args":[{"name":"value","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":79,"jsdoctags":[{"name":"value","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setLinkType","args":[{"name":"type","type":"string"}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"jsdoctags":[{"name":"type","type":"string","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMagnetic","args":[{"name":"magnetic","type":"boolean"}],"optional":false,"returnType":"void","typeParameters":[],"line":91,"jsdoctags":[{"name":"magnetic","type":"boolean","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"setMaximumLinks","args":[{"name":"maximumLinks","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":123,"jsdoctags":[{"name":"maximumLinks","type":"number","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"updateCoords","args":[{"type":"literal type"}],"optional":false,"returnType":"void","typeParameters":[],"line":156,"jsdoctags":[{"type":"literal type","tagName":{"text":"param"}}],"inheritance":{"file":"PortModel"}},{"name":"getHovered","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":46,"inheritance":{"file":"BaseModel"}},{"name":"getPainted","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":38,"inheritance":{"file":"BaseModel"}},{"name":"getParent","args":[],"optional":false,"returnType":"E","typeParameters":[],"line":26,"inheritance":{"file":"BaseModel"}},{"name":"getSelected","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":66,"inheritance":{"file":"BaseModel"}},{"name":"getSelectedEntities","args":[],"optional":false,"returnType":"BaseModel[]","typeParameters":[],"line":82,"inheritance":{"file":"BaseModel"}},{"name":"getType","args":[],"optional":false,"returnType":"string","typeParameters":[],"line":62,"inheritance":{"file":"BaseModel"}},{"name":"paintChanges","args":[],"optional":false,"returnType":"Observable<PaintedEvent>","typeParameters":[],"line":58,"inheritance":{"file":"BaseModel"}},{"name":"parentChanges","args":[],"optional":false,"returnType":"Observable<ParentChangeEvent<E>>","typeParameters":[],"line":34,"inheritance":{"file":"BaseModel"}},{"name":"selectHovered","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":54,"inheritance":{"file":"BaseModel"}},{"name":"selectionChanges","args":[],"optional":false,"returnType":"Observable<SelectionEvent>","typeParameters":[],"line":78,"inheritance":{"file":"BaseModel"}},{"name":"selectSelected","args":[],"optional":false,"returnType":"Observable<boolean>","typeParameters":[],"line":70,"inheritance":{"file":"BaseModel"}},{"name":"serialize","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":19,"inheritance":{"file":"BaseModel"}},{"name":"setHovered","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":50,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setPainted","args":[{"name":"painted","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"jsdoctags":[{"name":"painted","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setParent","args":[{"name":"parent","type":"E"}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"jsdoctags":[{"name":"parent","type":"E","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"setSelected","args":[{"name":"selected","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":74,"jsdoctags":[{"name":"selected","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseModel"}},{"name":"clone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"}],"optional":false,"returnType":"any","typeParameters":[],"line":63,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"destroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":88,"inheritance":{"file":"BaseEntity"}},{"name":"doClone","args":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}"},{"name":"clone","type":"any"}],"optional":false,"returnType":"void","typeParameters":[],"line":59,"jsdoctags":[{"name":"lookupTable","type":"HashMap<any>","defaultValue":"{}","tagName":{"text":"param"}},{"name":"clone","type":"any","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"entityPipe","args":[{"name":"logMessage","type":"string","defaultValue":"\'\'"}],"optional":false,"returnType":"MonoTypeOperatorFunction<T>","typeParameters":["T"],"line":46,"jsdoctags":[{"name":"logMessage","type":"string","defaultValue":"\'\'","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"getLocked","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":50,"inheritance":{"file":"BaseEntity"}},{"name":"lockChanges","args":[],"optional":false,"returnType":"Observable<LockEvent>","typeParameters":[],"line":84,"inheritance":{"file":"BaseEntity"}},{"name":"log","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"onEntityDestroy","args":[],"optional":false,"returnType":"Observable<BaseEvent<BaseEntity>>","typeParameters":[],"line":94,"inheritance":{"file":"BaseEntity"}},{"name":"serialize","args":[],"optional":false,"returnType":"{ id: any; locked: boolean; }","typeParameters":[],"line":77,"inheritance":{"file":"BaseEntity"}},{"name":"setLocked","args":[{"name":"locked","type":"","defaultValue":"true"}],"optional":false,"returnType":"void","typeParameters":[],"line":54,"jsdoctags":[{"name":"locked","type":"","defaultValue":"true","tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}},{"name":"withLog","args":[{"name":"message","type":"string"},{"name":"args","type":"any","dotDotDotToken":true}],"optional":false,"returnType":"any","typeParameters":[],"line":42,"jsdoctags":[{"name":"message","type":"string","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}],"inheritance":{"file":"BaseEntity"}}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { DefaultPortModel } from \'../../models/default-port.model\';\\n\\n@Component({\\n\\tselector: \'ngdx-default-port\',\\n\\ttemplateUrl: \'./default-port.component.html\',\\n\\tstyleUrls: [\'./default-port.component.scss\'],\\n\\tchangeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class DefaultPortComponent extends DefaultPortModel {\\n  constructor() {\\n    super();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  position: relative;\\n  width: 10px;\\n  height: 10px;\\n  border-radius: 60px;\\n  border: 1px solid gray;\\n  background-color: lightgray;\\n  margin: 10px 0;\\n\\n  &:hover {\\n    background-color: green;\\n  }\\n\\n  &.out {\\n    right: -195px;\\n  }\\n\\n  &.in {\\n    left: -5px;\\n  }\\n}\\n","styleUrl":"./default-port.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[],"line":10},"extends":"DefaultPortModel","isDuplicate":true,"duplicateId":1,"duplicateName":"DefaultPortComponent-1","templateData":"<div [ngClass]=\\"in ? \'in\' : \'out\'\\" draggable=\\"false\\"></div>\\n"},{"name":"NgxDiagramComponent","id":"component-NgxDiagramComponent-3f413422b6cabf6c23fb59b5a803eeca","file":"libs/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngdx-diagram","styleUrls":["diagram.component.scss"],"styles":[],"templateUrl":["diagram.component.html"],"viewProviders":[],"inputsClass":[{"name":"allowCanvasTranslation","defaultValue":"true","line":41},{"name":"allowCanvasZoom","defaultValue":"true","line":40},{"name":"allowLooseLinks","defaultValue":"true","line":43},{"name":"inverseZoom","defaultValue":"true","line":42},{"name":"maxZoomIn","defaultValue":"null","line":45,"type":"number"},{"name":"maxZoomOut","defaultValue":"null","line":44,"type":"number"},{"name":"model","line":39,"type":"DiagramModel"},{"name":"portMagneticRadius","defaultValue":"30","line":46},{"name":"smartRouting","defaultValue":"false","line":47}],"outputsClass":[{"name":"actionStartedFiring","defaultValue":"new EventEmitter<BaseAction>()","line":49,"type":"EventEmitter"},{"name":"actionStillFiring","defaultValue":"new EventEmitter<BaseAction>()","line":50,"type":"EventEmitter"},{"name":"actionStoppedFiring","defaultValue":"new EventEmitter<BaseAction>()","line":51,"type":"EventEmitter"}],"propertiesClass":[{"name":"action$","defaultValue":"new BehaviorSubject<BaseAction>(null)","type":"","optional":false,"description":"","line":64,"modifierKind":[113]},{"name":"canvas","type":"ElementRef","optional":false,"description":"","line":60,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'canvas\', {read: ElementRef}"}]},{"name":"destroyed$","defaultValue":"new ReplaySubject<boolean>(1)","type":"","optional":false,"description":"","line":66,"modifierKind":[113]},{"name":"links$","type":"Observable<EntityMap<LinkModel>>","optional":false,"description":"","line":63,"modifierKind":[113]},{"name":"linksLayer","type":"ViewContainerRef","optional":false,"description":"","line":57,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'linksLayer\', {read: ViewContainerRef}"}]},{"name":"ngZone","type":"NgZone","optional":false,"description":"","line":74,"modifierKind":[114]},{"name":"nodes$","type":"Observable<EntityMap<NodeModel>>","optional":false,"description":"","line":62,"modifierKind":[113]},{"name":"nodesLayer","type":"ViewContainerRef","optional":false,"description":"","line":54,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'nodesLayer\', {read: ViewContainerRef}"}]},{"name":"nodesRendered$","defaultValue":"new BehaviorSubject<boolean>(false)","type":"","optional":false,"description":"","line":65,"modifierKind":[113]}],"methodsClass":[{"name":"createMouseListeners","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":626,"modifierKind":[113]},{"name":"fireAction","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":97,"description":"<p>fire the action registered and notify subscribers</p>\\n"},{"name":"getLinksLayer","args":[],"optional":false,"returnType":"HTMLDivElement","typeParameters":[],"line":622,"modifierKind":[113]},{"name":"getMouseElement","args":[{"name":"event","type":"MouseEvent"}],"optional":false,"returnType":"literal type","typeParameters":[],"line":134,"jsdoctags":[{"name":"event","type":"MouseEvent","tagName":{"text":"param"}}]},{"name":"getNodesLayer","args":[],"optional":false,"returnType":"HTMLDivElement","typeParameters":[],"line":618,"modifierKind":[113]},{"name":"initLinks","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":571,"modifierKind":[113]},{"name":"initNodes","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":548,"modifierKind":[113]},{"name":"initSubs","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":605,"modifierKind":[113]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":81},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":89},{"name":"onMouseDown","args":[{"name":"event","type":"MouseEvent"}],"optional":false,"returnType":"void","typeParameters":[],"line":417,"decorators":[{"name":"OutsideZone"}],"jsdoctags":[{"name":"event","type":"MouseEvent","tagName":{"text":"param"}}]},{"name":"onMouseMove","args":[{"name":"event","type":"MouseEvent"}],"optional":false,"returnType":"void","typeParameters":[],"line":298,"description":"","decorators":[{"name":"OutsideZone"}],"jsdoctags":[{"name":{"pos":9489,"end":9494,"flags":0,"escapedText":"event"},"type":"MouseEvent","tagName":{"pos":9483,"end":9488,"flags":0,"escapedText":"param"},"comment":"<p>MouseEvent</p>\\n"}]},{"name":"onMouseUp","args":[{"name":"event","type":"MouseEvent"}],"optional":false,"returnType":"void","typeParameters":[],"line":184,"decorators":[{"name":"OutsideZone"}],"jsdoctags":[{"name":"event","type":"MouseEvent","tagName":{"text":"param"}}]},{"name":"onMouseWheel","args":[{"name":"event","type":"WheelEvent"}],"optional":false,"returnType":"void","typeParameters":[],"line":483,"decorators":[{"name":"OutsideZone"}],"jsdoctags":[{"name":"event","type":"WheelEvent","tagName":{"text":"param"}}]},{"name":"selectAction","args":[],"optional":false,"returnType":"any","typeParameters":[],"line":121},{"name":"setLayerStyles","args":[{"name":"x","type":"number"},{"name":"y","type":"number"},{"name":"zoom","type":"number"}],"optional":false,"returnType":"void","typeParameters":[],"line":537,"decorators":[{"name":"OutsideZone"}],"modifierKind":[113],"jsdoctags":[{"name":"x","type":"number","tagName":{"text":"param"}},{"name":"y","type":"number","tagName":{"text":"param"}},{"name":"zoom","type":"number","tagName":{"text":"param"}}]},{"name":"shouldDrawSelectionBox","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":125},{"name":"startFiringAction","args":[{"name":"action","type":"BaseAction"}],"optional":false,"returnType":"void","typeParameters":[],"line":116,"description":"<p>Register the new action, pre firing and notify subscribers</p>\\n","jsdoctags":[{"name":"action","type":"BaseAction","tagName":{"text":"param"}}]},{"name":"stopFiringAction","args":[{"name":"shouldSkipEvent","type":"boolean","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":106,"description":"<p>Unregister the action, post firing and notify subscribers</p>\\n","jsdoctags":[{"name":"shouldSkipEvent","type":"boolean","optional":true,"tagName":{"text":"param"}}]}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { DOCUMENT } from \'@angular/common\';\\nimport {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  ChangeDetectorRef,\\n  Component,\\n  ElementRef,\\n  EventEmitter,\\n  Inject,\\n  Input,\\n  NgZone,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  ViewChild,\\n  ViewContainerRef\\n} from \'@angular/core\';\\nimport { BehaviorSubject, combineLatest, fromEvent, merge, Observable, ReplaySubject } from \'rxjs\';\\nimport { filter, take, takeUntil, tap } from \'rxjs/operators\';\\nimport { BaseAction, InvalidLinkDestroyed, LinkCreatedAction, MoveCanvasAction, SelectingAction } from \'../../actions\';\\nimport { LooseLinkDestroyed } from \'../../actions/loose-link-destroyed.action\';\\nimport { MoveItemsAction } from \'../../actions/move-items.action\';\\nimport { Coords } from \'../../interfaces/coords.interface\';\\nimport { BaseModel } from \'../../models/base.model\';\\nimport { DiagramModel } from \'../../models/diagram.model\';\\nimport { LinkModel } from \'../../models/link.model\';\\nimport { NodeModel } from \'../../models/node.model\';\\nimport { PointModel } from \'../../models/point.model\';\\nimport { PortModel } from \'../../models/port.model\';\\nimport { EntityMap, OutsideZone, ZonedClass } from \'../../utils\';\\n\\n@Component({\\n  selector: \'ngdx-diagram\',\\n  templateUrl: \'diagram.component.html\',\\n  styleUrls: [\'diagram.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush\\n})\\nexport class NgxDiagramComponent implements AfterViewInit, OnDestroy, ZonedClass {\\n  @Input(\'model\') diagramModel: DiagramModel;\\n  @Input() allowCanvasZoom = true;\\n  @Input() allowCanvasTranslation = true;\\n  @Input() inverseZoom = true;\\n  @Input() allowLooseLinks = true;\\n  @Input() maxZoomOut: number = null;\\n  @Input() maxZoomIn: number = null;\\n  @Input() portMagneticRadius = 30;\\n  @Input() smartRouting = false;\\n\\n  @Output() actionStartedFiring = new EventEmitter<BaseAction>();\\n  @Output() actionStillFiring = new EventEmitter<BaseAction>();\\n  @Output() actionStoppedFiring = new EventEmitter<BaseAction>();\\n\\n  @ViewChild(\'nodesLayer\', { read: ViewContainerRef })\\n  nodesLayer: ViewContainerRef;\\n\\n  @ViewChild(\'linksLayer\', { read: ViewContainerRef })\\n  linksLayer: ViewContainerRef;\\n\\n  @ViewChild(\'canvas\', { read: ElementRef })\\n  canvas: ElementRef;\\n\\n  protected nodes$: Observable<EntityMap<NodeModel>>;\\n  protected links$: Observable<EntityMap<LinkModel>>;\\n  protected action$ = new BehaviorSubject<BaseAction>(null);\\n  protected nodesRendered$ = new BehaviorSubject<boolean>(false);\\n  protected destroyed$ = new ReplaySubject<boolean>(1);\\n\\n  get host(): HTMLElement {\\n    return this.elRef.nativeElement;\\n  }\\n\\n  constructor(\\n    @Inject(DOCUMENT) protected document: any,\\n    public ngZone: NgZone,\\n    protected renderer: Renderer2,\\n    protected cdRef: ChangeDetectorRef,\\n    protected elRef: ElementRef<HTMLElement>\\n  ) {}\\n\\n  // TODO: handle destruction of container, resetting all observables to avoid memory leaks!\\n  ngAfterViewInit() {\\n    if (this.diagramModel) {\\n      this.initNodes();\\n      this.initLinks();\\n      this.initSubs();\\n    }\\n  }\\n\\n  ngOnDestroy() {\\n    this.destroyed$.next(true);\\n    this.destroyed$.complete();\\n  }\\n\\n  /**\\n   * fire the action registered and notify subscribers\\n   */\\n  fireAction() {\\n    if (this.action$.value) {\\n      this.actionStillFiring.emit(this.action$.value);\\n    }\\n  }\\n\\n  /**\\n   * Unregister the action, post firing and notify subscribers\\n   */\\n  stopFiringAction(shouldSkipEvent?: boolean) {\\n    if (!shouldSkipEvent) {\\n      this.actionStoppedFiring.emit(this.action$.value);\\n    }\\n    this.action$.next(null);\\n  }\\n\\n  /**\\n   * Register the new action, pre firing and notify subscribers\\n   */\\n  startFiringAction(action: BaseAction) {\\n    this.action$.next(action);\\n    this.actionStartedFiring.emit(action);\\n  }\\n\\n  selectAction() {\\n    return this.action$ as BehaviorSubject<SelectingAction>;\\n  }\\n\\n  shouldDrawSelectionBox() {\\n    const action = this.action$.getValue();\\n    if (action instanceof SelectingAction) {\\n      action.getBoxDimensions();\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  getMouseElement(event: MouseEvent): { model: BaseModel; element: Element } {\\n    const target = event.target as Element;\\n\\n    // is it a port?\\n    let element = target.closest(\'[data-portid]\');\\n    if (element) {\\n      // get the relevant node and return the port.\\n      const nodeEl = target.closest(\'[data-nodeid]\');\\n      return {\\n        model: this.diagramModel\\n          .getNode(nodeEl.getAttribute(\'data-nodeid\'))\\n          .getPort(element.getAttribute(\'data-portid\')),\\n        element\\n      };\\n    }\\n\\n    // look for a point\\n    element = target.closest(\'[data-pointid]\');\\n    if (element) {\\n      return {\\n        model: this.diagramModel\\n          .getLink(element.getAttribute(\'data-linkid\'))\\n          .getPointModel(element.getAttribute(\'data-pointid\')),\\n        element\\n      };\\n    }\\n\\n    // look for a link\\n    element = target.closest(\'[data-linkid]\');\\n    if (element) {\\n      return {\\n        model: this.diagramModel.getLink(element.getAttribute(\'data-linkid\')),\\n        element\\n      };\\n    }\\n\\n    // a node maybe\\n    element = target.closest(\'[data-nodeid]\');\\n    if (element) {\\n      return {\\n        model: this.diagramModel.getNode(element.getAttribute(\'data-nodeid\')),\\n        element\\n      };\\n    }\\n\\n    // just the canvas\\n    return null;\\n  }\\n\\n  @OutsideZone\\n  onMouseUp(event: MouseEvent) {\\n    const diagramEngine = this.diagramModel.getDiagramEngine();\\n    const action = this.action$.getValue();\\n    // are we going to connect a link to something?\\n    if (action instanceof MoveItemsAction) {\\n      const element = this.getMouseElement(event);\\n      action.selectionModels.forEach((model) => {\\n        // only care about points connecting to things\\n        if (!model || !(model.model instanceof PointModel)) {\\n          return;\\n        }\\n\\n        let el: BaseModel;\\n        if (model.magnet) {\\n          el = model.magnet;\\n        } else if (element && element.model) {\\n          el = element.model;\\n        }\\n\\n        if (el instanceof PortModel && !diagramEngine.isModelLocked(el)) {\\n          const link = model.model.getLink();\\n          if (link.getTargetPort() !== null) {\\n            // if this was a valid link already and we are adding a node in the middle, create 2 links from the original\\n            if (link.getTargetPort() !== el && link.getSourcePort() !== el) {\\n              const targetPort = link.getTargetPort();\\n              const newLink = link.clone({});\\n              newLink.setSourcePort(el);\\n              newLink.setTargetPort(targetPort);\\n              link.setTargetPort(el);\\n              targetPort.removeLink(link);\\n              newLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\\n              link.removePointsAfter(model.model);\\n              diagramEngine.getDiagramModel().addLink(newLink);\\n              // if we are connecting to the same target or source, destroy tweener points\\n            } else if (link.getTargetPort() === el) {\\n              link.removePointsAfter(model.model);\\n            } else if (link.getSourcePort() === el) {\\n              link.removePointsBefore(model.model);\\n            }\\n          } else {\\n            link.setTargetPort(el);\\n            const targetPort = link.getTargetPort();\\n            const srcPort = link.getSourcePort();\\n\\n            if (targetPort.id !== srcPort.id && srcPort.canLinkToPort(targetPort)) {\\n              // link is valid, fire the event\\n              this.startFiringAction(new LinkCreatedAction(event.clientX, event.clientY, link));\\n            }\\n          }\\n        }\\n\\n        // reset current magent\\n        model.magnet = undefined;\\n      });\\n\\n      // check for / destroy any loose links in any models which have been moved\\n      if (!this.allowLooseLinks) {\\n        action.selectionModels.forEach((model) => {\\n          // only care about points connecting to things\\n          if (!model || !(model.model instanceof PointModel)) {\\n            return;\\n          }\\n\\n          const selectedPoint: PointModel = model.model;\\n          const link: LinkModel = selectedPoint.getLink();\\n          if (link.getSourcePort() === null || link.getTargetPort() === null) {\\n            link.destroy();\\n            this.startFiringAction(new LooseLinkDestroyed(event.clientX, event.clientY, link));\\n          }\\n        });\\n      }\\n\\n      // destroy any invalid links\\n      action.selectionModels.forEach((model) => {\\n        // only care about points connecting to things\\n        if (!model || !(model.model instanceof PointModel)) {\\n          return;\\n        }\\n\\n        const link: LinkModel = model.model.getLink();\\n        const sourcePort: PortModel = link.getSourcePort();\\n        const targetPort: PortModel = link.getTargetPort();\\n\\n        if (sourcePort !== null && targetPort !== null) {\\n          if (!sourcePort.canLinkToPort(targetPort)) {\\n            // link not allowed\\n            link.destroy();\\n            this.startFiringAction(new InvalidLinkDestroyed(event.clientX, event.clientY, link));\\n          } else if (\\n            targetPort\\n              .getLinksArray()\\n              .some(\\n                (link) => link !== link && (link.getSourcePort() === sourcePort || link.getTargetPort() === sourcePort)\\n              )\\n          ) {\\n            // link is a duplicate\\n            link.destroy();\\n          }\\n        }\\n      });\\n\\n      this.stopFiringAction();\\n    } else {\\n      this.stopFiringAction();\\n    }\\n\\n    this.action$.next(null);\\n  }\\n\\n  /**\\n   * @description Mouse Move Event Handler\\n   * @param event MouseEvent\\n   */\\n  @OutsideZone\\n  onMouseMove(event: MouseEvent) {\\n    const action = this.action$.getValue();\\n\\n    if (action === null || action === undefined) {\\n      return;\\n    }\\n\\n    if (action instanceof SelectingAction) {\\n      const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\\n\\n      this.diagramModel.getNodes().forEach((node) => {\\n        if ((action as SelectingAction).containsElement(node.getCoords(), this.diagramModel)) {\\n          node.setSelected();\\n        } else {\\n          node.setSelected(false);\\n        }\\n      });\\n\\n      this.diagramModel.getLinks().forEach((link) => {\\n        let allSelected = true;\\n\\n        link.getPoints().forEach((point) => {\\n          if ((action as SelectingAction).containsElement(point.getCoords(), this.diagramModel)) {\\n            point.setSelected();\\n          } else {\\n            point.setSelected(false);\\n            allSelected = false;\\n          }\\n        });\\n\\n        if (allSelected) {\\n          link.setSelected();\\n        }\\n      });\\n\\n      action.mouseX2 = relative.x;\\n      action.mouseY2 = relative.y;\\n\\n      this.fireAction();\\n      this.action$.next(action);\\n      return;\\n    } else if (action instanceof MoveItemsAction) {\\n      const coords: Coords = {\\n        x: event.clientX - action.mouseX,\\n        y: event.clientY - action.mouseY\\n      };\\n      const amountZoom = this.diagramModel.getZoomLevel() / 100;\\n      action.selectionModels.forEach((selectionModel) => {\\n        // reset all previous magnets if any\\n        selectionModel.magnet = undefined;\\n\\n        // in this case we need to also work out the relative grid position\\n        if (\\n          selectionModel.model instanceof NodeModel ||\\n          (selectionModel.model instanceof PointModel && !selectionModel.model.isConnectedToPort())\\n        ) {\\n          const newCoords = {\\n            x: selectionModel.initialX + coords.x / amountZoom,\\n            y: selectionModel.initialY + coords.y / amountZoom\\n          };\\n          const gridRelativeCoords = this.diagramModel.getGridPosition(newCoords);\\n\\n          // magnetic inputs handling\\n          if (selectionModel.model instanceof PointModel && this.portMagneticRadius) {\\n            // get all ports on canvas, check distances, if smaller then defined radius, magnetize!\\n            const portsMap = this.diagramModel.getAllPorts({ filter: (p) => p.getMagnetic() });\\n\\n            for (const port of portsMap.values()) {\\n              const portCoords = port.getCoords();\\n              const distance = Math.hypot(portCoords.x - newCoords.x, portCoords.y - newCoords.y);\\n              if (distance <= this.portMagneticRadius) {\\n                const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(port);\\n                selectionModel.model.setCoords(portCenter);\\n                selectionModel.magnet = port;\\n                return;\\n              }\\n            }\\n          }\\n\\n          selectionModel.model.setCoords(gridRelativeCoords);\\n\\n          if (selectionModel.model instanceof NodeModel) {\\n            // update port coordinates as well\\n            selectionModel.model.getPorts().forEach((port) => {\\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(port);\\n              port.updateCoords(portCoords);\\n            });\\n          }\\n\\n          if (this.diagramModel.getDiagramEngine().getSmartRouting()) {\\n            setTimeout(() => {\\n              this.diagramModel.getDiagramEngine().calculateRoutingMatrix();\\n            }, 1);\\n          }\\n        } else if (selectionModel.model instanceof PointModel) {\\n          // will only run here when trying to create a point on an existing link\\n          // we want points that are connected to ports, to not necessarily snap to grid\\n          // this stuff needs to be pixel perfect, dont touch it\\n          const newCoords = this.diagramModel.getGridPosition({ x: coords.x / amountZoom, y: coords.y / amountZoom });\\n          selectionModel.model.setCoords({\\n            x: selectionModel.initialX + newCoords.x,\\n            y: selectionModel.initialY + newCoords.y\\n          });\\n        }\\n      });\\n\\n      this.fireAction();\\n    } else if (action instanceof MoveCanvasAction) {\\n      if (this.allowCanvasTranslation) {\\n        this.diagramModel.setOffset(\\n          action.initialOffsetX + (event.clientX - action.mouseX),\\n          action.initialOffsetY + (event.clientY - action.mouseY)\\n        );\\n        this.fireAction();\\n      }\\n    }\\n  }\\n\\n  @OutsideZone\\n  onMouseDown(event: MouseEvent) {\\n    if (event.button === 3) {\\n      return;\\n    }\\n\\n    const selectedModel = this.getMouseElement(event);\\n\\n    // canvas selected\\n    if (selectedModel === null) {\\n      // multiple selection\\n      if (event.shiftKey) {\\n        // initiate multiple selection selector\\n        const relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\\n        this.startFiringAction(new SelectingAction(relative.x, relative.y));\\n      } else {\\n        // drag canvas action\\n        this.diagramModel.clearSelection();\\n        this.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, this.diagramModel));\\n      }\\n    } else if (selectedModel.model instanceof PortModel) {\\n      // its a port element, we want to drag a link\\n      if (!selectedModel.model.isLocked() && selectedModel.model.getCanCreateLinks()) {\\n        const relative = this.diagramModel.getDiagramEngine().getRelativeMousePoint(event);\\n        const sourcePort = selectedModel.model;\\n        const link = sourcePort.createLinkModel();\\n\\n        // if we don\'t have a link then we have reached the max amount, or we cannot create new ones\\n        if (link) {\\n          link.setSourcePort(sourcePort);\\n          link.removeMiddlePoints();\\n          if (link.getSourcePort() !== sourcePort) {\\n            link.setSourcePort(sourcePort);\\n          }\\n          link.setTargetPort(null);\\n\\n          link.getFirstPoint().setCoords(relative);\\n          link.getLastPoint().setCoords(relative);\\n\\n          this.diagramModel.clearSelection();\\n          link.getLastPoint().setSelected();\\n          this.diagramModel.addLink(link);\\n\\n          this.startFiringAction(\\n            new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine())\\n          );\\n        }\\n      } else {\\n        this.diagramModel.clearSelection();\\n      }\\n    } else if (selectedModel.model instanceof PointModel && selectedModel.model.isConnectedToPort()) {\\n      this.diagramModel.clearSelection();\\n    } else {\\n      // its some other element, probably want to move it\\n      if (!event.shiftKey && !selectedModel.model.getSelected()) {\\n        this.diagramModel.clearSelection();\\n      }\\n\\n      selectedModel.model.setSelected();\\n\\n      this.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine()));\\n    }\\n\\n    this.createMouseListeners();\\n  }\\n\\n  @OutsideZone\\n  onMouseWheel(event: WheelEvent) {\\n    if (!this.allowCanvasZoom) {\\n      return;\\n    }\\n\\n    event.preventDefault();\\n    event.stopPropagation();\\n    const currentZoomLevel = this.diagramModel.getZoomLevel();\\n\\n    const oldZoomFactor = currentZoomLevel / 100;\\n    let scrollDelta = this.inverseZoom ? -event.deltaY : event.deltaY;\\n\\n    // check if it is pinch gesture\\n    if (event.ctrlKey && scrollDelta % 1 !== 0) {\\n      /* Chrome and Firefox sends wheel event with deltaY that\\n\\t\\t\\t\\t\\t\\t have fractional part, also `ctrlKey` prop of the event is true\\n\\t\\t\\t\\t\\t\\t though ctrl isn\'t pressed\\n\\t\\t\\t\\t\\t*/\\n      scrollDelta /= 3;\\n    } else {\\n      scrollDelta /= 60;\\n    }\\n\\n    if (currentZoomLevel + scrollDelta > 10) {\\n      const newZoomLvl = currentZoomLevel + scrollDelta;\\n      this.diagramModel.setZoomLevel(newZoomLvl);\\n    }\\n\\n    const updatedZoomLvl = this.diagramModel.getZoomLevel();\\n    const zoomFactor = updatedZoomLvl / 100;\\n\\n    const boundingRect = (event.currentTarget as Element).getBoundingClientRect();\\n    const clientWidth = boundingRect.width;\\n    const clientHeight = boundingRect.height;\\n\\n    // compute difference between rect before and after scroll\\n    const widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\\n    const heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\\n\\n    // compute mouse coords relative to canvas\\n    const clientX = event.clientX - boundingRect.left;\\n    const clientY = event.clientY - boundingRect.top;\\n\\n    // compute width and height increment factor\\n    const xFactor = (clientX - this.diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\\n    const yFactor = (clientY - this.diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\\n\\n    const updatedXOffset = this.diagramModel.getOffsetX() - widthDiff * xFactor;\\n    const updatedYOffset = this.diagramModel.getOffsetY() - heightDiff * yFactor;\\n\\n    this.diagramModel.setOffset(updatedXOffset, updatedYOffset);\\n  }\\n\\n  @OutsideZone\\n  protected setLayerStyles(x: number, y: number, zoom: number): void {\\n    const nodesLayer = this.getNodesLayer();\\n    const linksLayer = this.getLinksLayer();\\n\\n    const style = \'transform\';\\n    const value = `translate(${x}px, ${y}px) scale(${zoom / 100.0})`;\\n\\n    this.renderer.setStyle(nodesLayer, style, value);\\n    this.renderer.setStyle(linksLayer, style, value);\\n  }\\n\\n  protected initNodes() {\\n    this.nodes$ = this.diagramModel.selectNodes();\\n\\n    this.diagramModel.getDiagramEngine().setCanvas(this.canvas.nativeElement);\\n    this.diagramModel.getDiagramEngine().setSmartRoutingStatus(this.smartRouting);\\n\\n    this.diagramModel.setMaxZoomIn(this.maxZoomIn);\\n    this.diagramModel.setMaxZoomOut(this.maxZoomOut);\\n\\n    this.nodes$.pipe(takeUntil(this.destroyed$)).subscribe((nodes) => {\\n      this.nodesRendered$.next(false);\\n\\n      for (const node of nodes.values()) {\\n        if (!node.getPainted()) {\\n          this.diagramModel.getDiagramEngine().generateWidgetForNode(node, this.nodesLayer);\\n          this.cdRef.detectChanges();\\n        }\\n      }\\n\\n      this.nodesRendered$.next(true);\\n    });\\n  }\\n\\n  protected initLinks() {\\n    this.links$ = this.diagramModel.selectLinks();\\n\\n    combineLatest([this.nodesRendered$, this.links$])\\n      .pipe(\\n        filter(([nodesRendered]) => !!nodesRendered),\\n        takeUntil(this.destroyed$)\\n      )\\n      .subscribe(([, links]) => {\\n        for (const link of links.values()) {\\n          if (!link.getPainted() && link.getSourcePort().getPainted()) {\\n            if (link.getSourcePort() !== null) {\\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getSourcePort());\\n              link.getPoints()[0].setCoords(portCenter);\\n\\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getSourcePort());\\n              link.getSourcePort().updateCoords(portCoords);\\n            }\\n\\n            if (link.getTargetPort() !== null) {\\n              const portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getTargetPort());\\n              link.getPoints()[link.getPoints().length - 1].setCoords(portCenter);\\n\\n              const portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getTargetPort());\\n              link.getTargetPort().updateCoords(portCoords);\\n            }\\n\\n            this.diagramModel.getDiagramEngine().generateWidgetForLink(link, this.linksLayer);\\n            this.cdRef.detectChanges();\\n          }\\n        }\\n      });\\n  }\\n\\n  protected initSubs() {\\n    combineLatest([\\n      this.diagramModel.selectOffsetX(),\\n      this.diagramModel.selectOffsetY(),\\n      this.diagramModel.selectZoomLevel()\\n    ])\\n      .pipe(\\n        tap(([x, y, zoom]) => this.setLayerStyles(x, y, zoom)),\\n        takeUntil(this.destroyed$)\\n      )\\n      .subscribe();\\n  }\\n\\n  protected getNodesLayer(): HTMLDivElement {\\n    return this.host.querySelector(\'.ngdx-nodes-layer\');\\n  }\\n\\n  protected getLinksLayer(): HTMLDivElement {\\n    return this.host.querySelector(\'.ngdx-links-layer\');\\n  }\\n\\n  protected createMouseListeners() {\\n    const mouseUp$ = fromEvent<MouseEvent>(this.document, \'mouseup\').pipe(\\n      tap((e) => this.onMouseUp(e)),\\n      take(1)\\n    );\\n\\n    const mouseMove$ = fromEvent<MouseEvent>(this.document, \'mousemove\').pipe(\\n      tap((e) => this.onMouseMove(e)),\\n      takeUntil(mouseUp$)\\n    );\\n\\n    merge(mouseMove$, mouseUp$).subscribe();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".ngdx-diagram {\\n  position: relative;\\n  flex-grow: 1;\\n  display: flex;\\n  cursor: move;\\n  overflow: hidden;\\n\\n  .selector {\\n    position: absolute;\\n    background-color: rgba(0, 192, 255, 0.2);\\n    border: solid 2px rgb(0, 192, 255);\\n  }\\n\\n  .ngdx-nodes-layer {\\n    position: absolute;\\n    height: 100%;\\n    width: 100%;\\n    transform-origin: 0 0;\\n    overflow: visible !important;\\n    pointer-events: none;\\n    z-index: 150;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n  }\\n\\n  .ngdx-links-layer {\\n    position: absolute;\\n    height: 100%;\\n    width: 100%;\\n    transform-origin: 0 0;\\n    overflow: visible !important;\\n    pointer-events: none;\\n    z-index: 100;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n  }\\n}\\n","styleUrl":"diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"document","type":"any"},{"name":"ngZone","type":"NgZone"},{"name":"renderer","type":"Renderer2"},{"name":"cdRef","type":"ChangeDetectorRef"},{"name":"elRef","type":"ElementRef<HTMLElement>"}],"line":70,"jsdoctags":[{"name":"document","type":"any","tagName":{"text":"param"}},{"name":"ngZone","type":"NgZone","tagName":{"text":"param"}},{"name":"renderer","type":"Renderer2","tagName":{"text":"param"}},{"name":"cdRef","type":"ChangeDetectorRef","tagName":{"text":"param"}},{"name":"elRef","type":"ElementRef<HTMLElement>","tagName":{"text":"param"}}]},"implements":["AfterViewInit","OnDestroy","ZonedClass"],"accessors":{"host":{"name":"host","getSignature":{"name":"host","type":"","returnType":"HTMLElement","line":68}}},"templateData":"<div class=\\"ngdx-diagram\\" #canvas (mousedown)=\\"onMouseDown($event)\\" (wheel)=\\"onMouseWheel($event)\\">\\n\\t\x3c!-- Nodes Layer --\x3e\\n\\t<div class=\\"ngdx-nodes-layer\\">\\n\\t\\t<ng-template #nodesLayer></ng-template>\\n\\t</div>\\n\\n\\t\x3c!-- Links Layer --\x3e\\n\\t<div class=\\"ngdx-links-layer\\">\\n\\t\\t<ng-template #linksLayer></ng-template>\\n\\t</div>\\n\\n\\t\x3c!-- Selection Box --\x3e\\n\\t<div\\n\\t\\t*ngIf=\\"shouldDrawSelectionBox() && selectAction() | async as action\\"\\n\\t\\tclass=\\"selector\\"\\n\\t\\t[ngStyle]=\\"{\\n\\t\\t\\ttop: action.dimensions.top + \'px\',\\n\\t\\t\\tleft: action.dimensions.left + \'px\',\\n\\t\\t\\twidth: action.dimensions.width + \'px\',\\n\\t\\t\\theight: action.dimensions.height + \'px\'\\n\\t\\t}\\"></div>\\n</div>\\n"},{"name":"PerformanceExampleStoryComponent","id":"component-PerformanceExampleStoryComponent-d8f10b04025790aaea44c6a4bf9b9cdc","file":"libs/ngx-diagrams/stories/examples/performance/performance.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<div class=\\"action-bar\\">\\n\\t<button (click)=\\"resetDiagram()\\" *ngIf=\\"isResseted === false\\">Reset</button\\n\\t><button (click)=\\"createDiagram()\\" *ngIf=\\"isResseted\\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\\n\\t{{ initialRenderTimer }} ms\\n</div>\\n<ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n\\t","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[{"name":"serialized","defaultValue":"new EventEmitter()","line":23,"type":"EventEmitter<SerializedDiagramModel>"}],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":17},{"name":"initialRenderTimer","type":"number","optional":false,"description":"","line":18},{"name":"isCreated","defaultValue":"true","type":"","optional":false,"description":"","line":20},{"name":"isResseted","defaultValue":"false","type":"","optional":false,"description":"","line":19},{"name":"numberOfNodes","defaultValue":"200","type":"number","optional":false,"description":"","line":21}],"methodsClass":[{"name":"clearGraph","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":75},{"name":"createDiagram","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":36},{"name":"createNodes","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":49},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":27},{"name":"recreateDiagram","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":45},{"name":"resetDiagram","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":40}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, EventEmitter, OnInit, Output } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel, SerializedDiagramModel } from \'ngx-diagrams\';\\n\\n@Component({\\n\\tselector: \'app-root\',\\n\\ttemplate: `\\n\\t\\t<div class=\\"action-bar\\">\\n\\t\\t\\t<button (click)=\\"resetDiagram()\\" *ngIf=\\"isResseted === false\\">Reset</button\\n\\t\\t\\t><button (click)=\\"createDiagram()\\" *ngIf=\\"isResseted\\">Recreate</button>Rendered {{ numberOfNodes }} nodes and links in\\n\\t\\t\\t{{ initialRenderTimer }} ms\\n\\t\\t</div>\\n\\t\\t<ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n\\t`,\\n\\tstyleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class PerformanceExampleStoryComponent implements OnInit {\\n\\tdiagramModel: DiagramModel;\\n\\tinitialRenderTimer: number;\\n\\tisResseted = false;\\n\\tisCreated = true;\\n\\tnumberOfNodes = 200;\\n\\n\\t@Output() serialized: EventEmitter<SerializedDiagramModel> = new EventEmitter();\\n\\n\\tconstructor(private diagramEngine: DiagramEngine) {}\\n\\n\\tngOnInit() {\\n\\t\\tthis.diagramEngine.registerDefaultFactories();\\n\\t\\tthis.diagramModel = this.diagramEngine.createDiagram();\\n\\n\\t\\tthis.createNodes();\\n\\n\\t\\tthis.diagramEngine.zoomToFit();\\n\\t}\\n\\n\\tcreateDiagram() {\\n\\t\\tthis.createNodes();\\n\\t}\\n\\n\\tresetDiagram() {\\n\\t\\tthis.diagramModel.reset();\\n\\t\\tthis.isResseted = true;\\n\\t}\\n\\n\\trecreateDiagram() {\\n\\t\\tthis.createNodes();\\n\\t}\\n\\n\\tcreateNodes() {\\n\\t\\tthis.isResseted = false;\\n\\t\\tconst startTime = performance.now();\\n\\t\\tconst nodesDefaultDimensions = { height: 200, width: 200 };\\n\\n\\t\\tfor (let index = 0; index < this.numberOfNodes; index++) {\\n\\t\\t\\tconst nodeLoop = new DefaultNodeModel({ id: index.toString() });\\n\\t\\t\\tconst row = index % 10;\\n\\t\\t\\tconst col = Math.floor(index / 10);\\n\\t\\t\\tnodeLoop.setCoords({ x: 1000 * row, y: 300 * col });\\n\\t\\t\\tnodeLoop.setDimensions(nodesDefaultDimensions);\\n\\t\\t\\tnodeLoop.addInPort({ name: `inport${index}`, id: `inport${index}` });\\n\\t\\t\\tconst outport = nodeLoop.addOutPort({ name: `outport${index}`, id: `outport${index}` });\\n\\n\\t\\t\\tif (index > 0) {\\n\\t\\t\\t\\tconst link = outport.link(this.diagramModel.getNode(`${index - 1}`).getPort(`inport${index - 1}`));\\n\\t\\t\\t\\tthis.diagramModel.addLink(link);\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.diagramModel.addNode(nodeLoop);\\n\\t\\t}\\n\\n\\t\\tconst endTime = performance.now();\\n\\t\\tthis.initialRenderTimer = endTime - startTime;\\n\\t}\\n\\n\\tclearGraph() {\\n\\t\\tthis.diagramModel.reset();\\n\\t}\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n\\n.action-bar {\\n  position: relative;\\n  width: 100%;\\n  height: 40px;\\n  z-index: 2000;\\n  background-color: white;\\n  display: flex;\\n  align-items: center;\\n  * {\\n    margin: 0 10px;\\n  }\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":23,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"SerializationExampleStoryComponent","id":"component-SerializationExampleStoryComponent-921b233ef670cfea5cf2cf4d397faa29","file":"libs/ngx-diagrams/stories/examples/serialization/serialization.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<div class=\\"action-bar\\">\\n  <button (click)=\\"serialize()\\">Serialize Diagram Model</button>\\n  <button (click)=\\"clearGraph()\\">Clear Graph</button>\\n</div>\\n<ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[{"name":"serialized","defaultValue":"new EventEmitter()","line":23,"type":"EventEmitter<SerializedDiagramModel>"}],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":21}],"methodsClass":[{"name":"clearGraph","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":67},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":29},{"name":"serialize","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":62}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, EventEmitter, OnInit, Output } from \'@angular/core\';\\nimport {\\n  DiagramEngine,\\n  DiagramModel,\\n  DefaultNodeModel,\\n  SerializedDiagramModel,\\n} from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `\\n    <div class=\\"action-bar\\">\\n      <button (click)=\\"serialize()\\">Serialize Diagram Model</button>\\n      <button (click)=\\"clearGraph()\\">Clear Graph</button>\\n    </div>\\n    <ngdx-diagram class=\\"demo-diagram\\" [model]=\\"diagramModel\\"></ngdx-diagram>\\n  `,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class SerializationExampleStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  @Output() serialized: EventEmitter<\\n    SerializedDiagramModel\\n  > = new EventEmitter();\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    const node2 = new DefaultNodeModel();\\n    node2.setCoords({ x: 1000, y: 0 });\\n    node2.setDimensions(nodesDefaultDimensions);\\n    const inport = node2.addInPort({ name: \'inport2\' });\\n\\n    for (let index = 0; index < 2; index++) {\\n      const nodeLoop = new DefaultNodeModel();\\n      nodeLoop.setCoords({ x: 1000, y: 300 + index * 300 });\\n      nodeLoop.setDimensions(nodesDefaultDimensions);\\n      nodeLoop.addInPort({ name: `inport${index + 3}` });\\n\\n      this.diagramModel.addNode(nodeLoop);\\n    }\\n\\n    const link = outport1.link(inport);\\n    link.setLocked();\\n\\n    this.diagramModel.addAll(node1, node2, link);\\n\\n    this.diagramModel.getDiagramEngine().zoomToFit();\\n  }\\n\\n  serialize() {\\n    const serializedModel = this.diagramModel.serialize();\\n    this.serialized.emit(serializedModel);\\n  }\\n\\n  clearGraph() {\\n    this.diagramModel.reset();\\n  }\\n\\n  // deserialize() {\\n  // \\tconst JSONModel = {\\n  // \\t\\tid: \'ab04adcc-ebce-41a1-9c8f-de914cb3186c\',\\n  // \\t\\tlocked: false,\\n  // \\t\\tnodes: [\\n  // \\t\\t\\t{\\n  // \\t\\t\\t\\tid: \'e50e8d29-b90c-4907-8f7a-a82f8fbc7051\',\\n  // \\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\tnodeType: \'default\',\\n  // \\t\\t\\t\\textras: {},\\n  // \\t\\t\\t\\twidth: 200,\\n  // \\t\\t\\t\\theight: 200,\\n  // \\t\\t\\t\\tx: 1000,\\n  // \\t\\t\\t\\ty: 300,\\n  // \\t\\t\\t\\tports: [\\n  // \\t\\t\\t\\t\\t{\\n  // \\t\\t\\t\\t\\t\\tid: \'57ba33ad-b539-4491-9358-056db9cfb474\',\\n  // \\t\\t\\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\t\\t\\tname: \'inport3\',\\n  // \\t\\t\\t\\t\\t\\tlinkType: \'default\',\\n  // \\t\\t\\t\\t\\t\\tmaximumLinks: null,\\n  // \\t\\t\\t\\t\\t\\tmagnetic: true,\\n  // \\t\\t\\t\\t\\t\\theight: 12,\\n  // \\t\\t\\t\\t\\t\\twidth: 12,\\n  // \\t\\t\\t\\t\\t\\tcanCreateLinks: false,\\n  // \\t\\t\\t\\t\\t\\tx: 995,\\n  // \\t\\t\\t\\t\\t\\ty: 310,\\n  // \\t\\t\\t\\t\\t},\\n  // \\t\\t\\t\\t],\\n  // \\t\\t\\t},\\n  // \\t\\t\\t{\\n  // \\t\\t\\t\\tid: \'a0cb9388-ffb4-470a-a020-0a3256c0dd1c\',\\n  // \\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\tnodeType: \'default\',\\n  // \\t\\t\\t\\textras: {},\\n  // \\t\\t\\t\\twidth: 200,\\n  // \\t\\t\\t\\theight: 200,\\n  // \\t\\t\\t\\tx: 1000,\\n  // \\t\\t\\t\\ty: 600,\\n  // \\t\\t\\t\\tports: [\\n  // \\t\\t\\t\\t\\t{\\n  // \\t\\t\\t\\t\\t\\tid: \'d0866699-9922-47ab-812a-36d3bde6b513\',\\n  // \\t\\t\\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\t\\t\\tname: \'inport4\',\\n  // \\t\\t\\t\\t\\t\\tlinkType: \'default\',\\n  // \\t\\t\\t\\t\\t\\tmaximumLinks: null,\\n  // \\t\\t\\t\\t\\t\\tmagnetic: true,\\n  // \\t\\t\\t\\t\\t\\theight: 12,\\n  // \\t\\t\\t\\t\\t\\twidth: 12,\\n  // \\t\\t\\t\\t\\t\\tcanCreateLinks: false,\\n  // \\t\\t\\t\\t\\t\\tx: 995,\\n  // \\t\\t\\t\\t\\t\\ty: 610,\\n  // \\t\\t\\t\\t\\t},\\n  // \\t\\t\\t\\t],\\n  // \\t\\t\\t},\\n  // \\t\\t\\t{\\n  // \\t\\t\\t\\tid: \'de1eac05-4782-4bf2-8620-241562501db4\',\\n  // \\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\tnodeType: \'default\',\\n  // \\t\\t\\t\\textras: {},\\n  // \\t\\t\\t\\twidth: 200,\\n  // \\t\\t\\t\\theight: 200,\\n  // \\t\\t\\t\\tx: 500,\\n  // \\t\\t\\t\\ty: 300,\\n  // \\t\\t\\t\\tports: [\\n  // \\t\\t\\t\\t\\t{\\n  // \\t\\t\\t\\t\\t\\tid: \'74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c\',\\n  // \\t\\t\\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\t\\t\\tname: \'outport1\',\\n  // \\t\\t\\t\\t\\t\\tlinkType: \'default\',\\n  // \\t\\t\\t\\t\\t\\tmaximumLinks: null,\\n  // \\t\\t\\t\\t\\t\\tmagnetic: false,\\n  // \\t\\t\\t\\t\\t\\theight: 12,\\n  // \\t\\t\\t\\t\\t\\twidth: 12,\\n  // \\t\\t\\t\\t\\t\\tcanCreateLinks: true,\\n  // \\t\\t\\t\\t\\t\\tx: 695,\\n  // \\t\\t\\t\\t\\t\\ty: 310,\\n  // \\t\\t\\t\\t\\t},\\n  // \\t\\t\\t\\t],\\n  // \\t\\t\\t},\\n  // \\t\\t\\t{\\n  // \\t\\t\\t\\tid: \'86d44ae3-bcc8-4d1a-b0ea-2fc295aa2da2\',\\n  // \\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\tnodeType: \'default\',\\n  // \\t\\t\\t\\textras: {},\\n  // \\t\\t\\t\\twidth: 200,\\n  // \\t\\t\\t\\theight: 200,\\n  // \\t\\t\\t\\tx: 1000,\\n  // \\t\\t\\t\\ty: 0,\\n  // \\t\\t\\t\\tports: [\\n  // \\t\\t\\t\\t\\t{\\n  // \\t\\t\\t\\t\\t\\tid: \'6f2857d4-5fd2-4b0a-878b-730dec5afcdf\',\\n  // \\t\\t\\t\\t\\t\\tlocked: false,\\n  // \\t\\t\\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\t\\t\\tname: \'inport2\',\\n  // \\t\\t\\t\\t\\t\\tlinkType: \'default\',\\n  // \\t\\t\\t\\t\\t\\tmaximumLinks: null,\\n  // \\t\\t\\t\\t\\t\\tmagnetic: true,\\n  // \\t\\t\\t\\t\\t\\theight: 12,\\n  // \\t\\t\\t\\t\\t\\twidth: 12,\\n  // \\t\\t\\t\\t\\t\\tcanCreateLinks: false,\\n  // \\t\\t\\t\\t\\t\\tx: 995,\\n  // \\t\\t\\t\\t\\t\\ty: 10,\\n  // \\t\\t\\t\\t\\t},\\n  // \\t\\t\\t\\t],\\n  // \\t\\t\\t},\\n  // \\t\\t],\\n  // \\t\\tlinks: [\\n  // \\t\\t\\t{\\n  // \\t\\t\\t\\tid: \'635cb9cd-09bd-4693-b746-760b8fbf51ae\',\\n  // \\t\\t\\t\\tlocked: true,\\n  // \\t\\t\\t\\ttype: \'default\',\\n  // \\t\\t\\t\\tsourcePort: \'74bcbcfe-e5ca-4f49-8a00-9eb15916cd3c\',\\n  // \\t\\t\\t\\ttargetPort: \'6f2857d4-5fd2-4b0a-878b-730dec5afcdf\',\\n  // \\t\\t\\t\\textras: {},\\n  // \\t\\t\\t\\tpoints: [\\n  // \\t\\t\\t\\t\\t{ id: \'b085cdea-f1f1-4f26-8989-585a310004f9\', locked: true, type: \'default\', coords: { x: 701, y: 316 } },\\n  // \\t\\t\\t\\t\\t{ id: \'edccec32-2290-4290-a7b3-66e3598c07f5\', locked: true, type: \'default\', coords: { x: 1001, y: 16 } },\\n  // \\t\\t\\t\\t],\\n  // \\t\\t\\t},\\n  // \\t\\t],\\n  // \\t};\\n\\n  // \\tthis.diagramModel.deserialize(JSONModel);\\n  // }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n\\n.action-bar {\\n  position: relative;\\n  width: 100%;\\n  height: 40px;\\n  z-index: 2000;\\n  background-color: white;\\n  display: flex;\\n  align-items: center;\\n  * {\\n    margin: 0 10px;\\n  }\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":25,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]},{"name":"SmartRoutingExampleStoryComponent","id":"component-SmartRoutingExampleStoryComponent-6b131d1e06597880bae8c41f3d9d0fc4","file":"libs/ngx-diagrams/stories/examples/smart-routing/smart-routing.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":["../demo-diagram.component.scss"],"styles":[],"template":"<ngdx-diagram\\n  class=\\"demo-diagram\\"\\n  [model]=\\"diagramModel\\"\\n  [smartRouting]=\\"true\\"\\n></ngdx-diagram>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"diagramModel","type":"DiagramModel","optional":false,"description":"","line":16}],"methodsClass":[{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":20}],"hostBindings":[],"hostListeners":[],"description":"","rawdescription":"","type":"component","sourceCode":"import { Component, OnInit } from \'@angular/core\';\\nimport { DiagramEngine, DiagramModel, DefaultNodeModel } from \'ngx-diagrams\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: `\\n    <ngdx-diagram\\n      class=\\"demo-diagram\\"\\n      [model]=\\"diagramModel\\"\\n      [smartRouting]=\\"true\\"\\n    ></ngdx-diagram>\\n  `,\\n  styleUrls: [\'../demo-diagram.component.scss\'],\\n})\\nexport class SmartRoutingExampleStoryComponent implements OnInit {\\n  diagramModel: DiagramModel;\\n\\n  constructor(private diagramEngine: DiagramEngine) {}\\n\\n  ngOnInit() {\\n    const nodesDefaultDimensions = { height: 200, width: 200 };\\n    this.diagramEngine.registerDefaultFactories();\\n\\n    this.diagramModel = this.diagramEngine.createDiagram();\\n\\n    const node1 = new DefaultNodeModel();\\n    node1.setCoords({ x: 500, y: 300 });\\n    node1.setDimensions(nodesDefaultDimensions);\\n    const outport1 = node1.addOutPort({ name: \'outport1\' });\\n\\n    for (let index = 0; index < 5; index++) {\\n      const nodeLoop = new DefaultNodeModel();\\n      nodeLoop.setCoords({ x: 1500, y: index * 300 });\\n      nodeLoop.setDimensions(nodesDefaultDimensions);\\n      const inportLoop = nodeLoop.addInPort({ name: `inport${index + 3}` });\\n\\n      this.diagramModel.addNode(nodeLoop);\\n\\n      const linkLoop = outport1.link(inportLoop);\\n      this.diagramModel.addLink(linkLoop);\\n    }\\n\\n    const blockingNode = new DefaultNodeModel();\\n    blockingNode.setCoords({ x: 1000, y: 300 });\\n    blockingNode.setDimensions(nodesDefaultDimensions);\\n\\n    this.diagramModel.addAll(node1, blockingNode);\\n\\n    this.diagramEngine.zoomToFit();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".demo-diagram {\\n  display: flex;\\n  height: 100%;\\n  min-height: 100vh;\\n  background-color: #3c3c3c;\\n  background-image: linear-gradient(\\n      0deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    ),\\n    linear-gradient(\\n      90deg,\\n      transparent 24%,\\n      rgba(255, 255, 255, 0.05) 25%,\\n      rgba(255, 255, 255, 0.05) 26%,\\n      transparent 27%,\\n      transparent 74%,\\n      rgba(255, 255, 255, 0.05) 75%,\\n      rgba(255, 255, 255, 0.05) 76%,\\n      transparent 77%,\\n      transparent\\n    );\\n  background-size: 50px 50px;\\n}\\n\\n.action-bar {\\n  position: relative;\\n  width: 100%;\\n  height: 40px;\\n  z-index: 2000;\\n  background-color: white;\\n  display: flex;\\n  align-items: center;\\n  * {\\n    margin: 0 10px;\\n  }\\n}\\n","styleUrl":"../demo-diagram.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"","args":[{"name":"diagramEngine","type":"DiagramEngine"}],"line":16,"jsdoctags":[{"name":"diagramEngine","type":"DiagramEngine","tagName":{"text":"param"}}]},"implements":["OnInit"]}],"modules":[{"name":"DefaultLabelModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"DefaultLabelComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"DefaultLabelComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"DefaultLinkModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"DefaultLinkComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"DefaultLinkComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"DefaultNodeModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"DefaultNodeComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"DefaultPortModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"DefaultPortComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"NgxDiagramsModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"NgxDiagramComponent"},{"name":"TemplateVarDirective"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"NgxDiagramComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"__DEV__","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"","defaultValue":"true"},{"name":"__LOG__","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"LOG_LEVEL","defaultValue":"LOG_LEVEL.ERROR"},{"name":"AutoArrange","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"AutoArrangeDiagramTemplate.bind({})"},{"name":"AutoArrangeDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<AutoArrangeExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: AutoArrangeExampleStoryComponent,\\n  props: args,\\n})"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"BasicDiagramTemplate.bind({})"},{"name":"BasicDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<BasicExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: BasicExampleStoryComponent,\\n  props: args,\\n})"},{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"","defaultValue":"CustomLinkTemplate.bind({})"},{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"","defaultValue":"CustomLinkTemplate.bind({})"},{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"","defaultValue":"CustomNodeTemplate.bind({})"},{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"","defaultValue":"CustomNodeTemplate.bind({})"},{"name":"CustomLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.template.ts","type":"Story<CustomLabelDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomLabelDiagramComponent,\\n  props: args,\\n})"},{"name":"CustomLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.template.ts","type":"Story<CustomLinkDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomLinkDiagramComponent,\\n  props: args,\\n})"},{"name":"CustomNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.template.ts","type":"Story<CustomNodeDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomNodeDiagramComponent,\\n  props: args,\\n})"},{"name":"CustomNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.template.ts","type":"Story<CustomPortDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomPortDiagramComponent,\\n  props: args,\\n})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"","defaultValue":"DefaultLinkTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"","defaultValue":"DefaultLinkTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"","defaultValue":"DefaultNodeTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"","defaultValue":"DefaultNodeTemplate.bind({})"},{"name":"DefaultLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.template.ts","type":"Story<DefaultLabelStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultLabelStoryComponent,\\n  props: args,\\n})"},{"name":"DefaultLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.template.ts","type":"Story<DefaultLinkStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultLinkStoryComponent,\\n  props: args,\\n})"},{"name":"DefaultNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.template.ts","type":"Story<DefaultNodeComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultNodeComponent,\\n  props: args,\\n})"},{"name":"DefaultNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.template.ts","type":"Story<DefaultPortComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultPortComponent,\\n  props: args,\\n})"},{"name":"Performance","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"PerformanceDiagramTemplate.bind({})"},{"name":"PerformanceDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<PerformanceExampleStoryComponent>","defaultValue":"(args: any) => ({\\n\\tcomponent: PerformanceExampleStoryComponent,\\n\\tprops: args,\\n})"},{"name":"ROUTING_SCALING_FACTOR","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts","type":"number","defaultValue":"10"},{"name":"Serialization","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"SerializationDiagramTemplate.bind({})"},{"name":"SerializationDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<SerializationExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: SerializationExampleStoryComponent,\\n  props: { ...args, serialized: action(\'serialized\') },\\n})"},{"name":"SmartRouting","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"SmartRoutingDiagramTemplate.bind({})"},{"name":"SmartRoutingDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<SmartRoutingExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: SmartRoutingExampleStoryComponent,\\n  props: args,\\n})"}],"functions":[{"name":"arrayToMap","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"HashMap<T>","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"coerceArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"}],"returnType":"T[]","jsdoctags":[{"name":"value","tagName":{"text":"param"}}]},{"name":"createEntityState","file":"libs/ngx-diagrams/src/lib/state/state.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"},{"name":"entityPipe"}],"returnType":"EntityState<T>","jsdoctags":[{"name":"value","tagName":{"text":"param"}},{"name":"entityPipe","tagName":{"text":"param"}}]},{"name":"createValueState","file":"libs/ngx-diagrams/src/lib/state/state.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"},{"name":"operator","optional":true}],"returnType":"ValueState<T>","jsdoctags":[{"name":"value","tagName":{"text":"param"}},{"name":"operator","optional":true,"tagName":{"text":"param"}}]},{"name":"enableDiagramProdMode","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[],"returnType":"void"},{"name":"entityProperty","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>rxjs entity properties operator</p>\\n","args":[{"name":"destroyedNotifier"},{"name":"replayBy","type":"number"},{"name":"logMessage","type":"string"}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":"destroyedNotifier","tagName":{"text":"param"}},{"name":"replayBy","type":"number","tagName":{"text":"param"}},{"name":"logMessage","type":"string","tagName":{"text":"param"}}]},{"name":"generateCurvePath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"firstPoint"},{"name":"lastPoint"},{"name":"curvy","type":"number"}],"returnType":"string","jsdoctags":[{"name":"firstPoint","tagName":{"text":"param"}},{"name":"lastPoint","tagName":{"text":"param"}},{"name":"curvy","type":"number","tagName":{"text":"param"}}]},{"name":"generateDynamicPath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"pathCoords"}],"jsdoctags":[{"name":"pathCoords","tagName":{"text":"param"}}]},{"name":"generateLinePath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"firstPoint","type":"any"},{"name":"lastPoint","type":"any"}],"returnType":"string","jsdoctags":[{"name":"firstPoint","type":"any","tagName":{"text":"param"}},{"name":"lastPoint","type":"any","tagName":{"text":"param"}}]},{"name":"isArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"T[]","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"isDev","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[],"returnType":"boolean"},{"name":"isEmptyArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"boolean","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"isFunction","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"function","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"isNil","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"v","type":"any"}],"jsdoctags":[{"name":"v","type":"any","tagName":{"text":"param"}}]},{"name":"isString","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"string","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"log","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"message"},{"name":"level"},{"name":"args","dotDotDotToken":true}],"returnType":"void","jsdoctags":[{"name":"message","tagName":{"text":"param"}},{"name":"level","tagName":{"text":"param"}},{"name":"args","dotDotDotToken":true,"tagName":{"text":"param"}}]},{"name":"mapToArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"map"}],"returnType":"T[]","jsdoctags":[{"name":"map","tagName":{"text":"param"}}]},{"name":"mapToEntries","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"map"}],"returnType":"Entries<T>","jsdoctags":[{"name":"map","tagName":{"text":"param"}}]},{"name":"OutsideZone","file":"libs/ngx-diagrams/src/lib/utils/decorators.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"targetClass"},{"name":"functionName"},{"name":"descriptor","type":""}],"jsdoctags":[{"name":"targetClass","tagName":{"text":"param"}},{"name":"functionName","tagName":{"text":"param"}},{"name":"descriptor","type":"","tagName":{"text":"param"}}]},{"name":"setLogLevel","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"level"}],"returnType":"void","jsdoctags":[{"name":"level","tagName":{"text":"param"}}]},{"name":"UID","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>Generates a unique ID</p>\\n","args":[],"returnType":"ID"},{"name":"unique","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"T[]","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"withLog","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>rxjs log operator</p>\\n","args":[{"name":"message"},{"name":"level"},{"name":"args","type":"any","dotDotDotToken":true}],"jsdoctags":[{"name":"message","tagName":{"text":"param"}},{"name":"level","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}]}],"typealiases":[{"name":"BaseEntityType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"node\\" | \\"link\\" | \\"port\\" | \\"point\\"","file":"libs/ngx-diagrams/src/lib/base.entity.ts","description":"","kind":168},{"name":"EntityMap","ctype":"miscellaneous","subtype":"typealias","rawtype":"Map<ID | T>","file":"libs/ngx-diagrams/src/lib/utils/types.ts","description":"","kind":161},{"name":"Entries","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"libs/ngx-diagrams/src/lib/utils/types.ts","description":"","kind":172},{"name":"ID","ctype":"miscellaneous","subtype":"typealias","rawtype":"string","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","description":"","kind":137}],"enumerations":[{"name":"LOG_LEVEL","childs":[{"name":"LOG"},{"name":"ERROR"}],"ctype":"miscellaneous","subtype":"enum","description":"","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts"}],"groupedVariables":{"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts":[{"name":"__DEV__","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"","defaultValue":"true"},{"name":"__LOG__","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"LOG_LEVEL","defaultValue":"LOG_LEVEL.ERROR"}],"libs/ngx-diagrams/stories/examples/examples.stories.ts":[{"name":"AutoArrange","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"AutoArrangeDiagramTemplate.bind({})"},{"name":"Basic","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"BasicDiagramTemplate.bind({})"},{"name":"Performance","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"PerformanceDiagramTemplate.bind({})"},{"name":"Serialization","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"SerializationDiagramTemplate.bind({})"},{"name":"SmartRouting","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"","defaultValue":"SmartRoutingDiagramTemplate.bind({})"}],"libs/ngx-diagrams/stories/examples/examples.template.ts":[{"name":"AutoArrangeDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<AutoArrangeExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: AutoArrangeExampleStoryComponent,\\n  props: args,\\n})"},{"name":"BasicDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<BasicExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: BasicExampleStoryComponent,\\n  props: args,\\n})"},{"name":"PerformanceDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<PerformanceExampleStoryComponent>","defaultValue":"(args: any) => ({\\n\\tcomponent: PerformanceExampleStoryComponent,\\n\\tprops: args,\\n})"},{"name":"SerializationDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<SerializationExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: SerializationExampleStoryComponent,\\n  props: { ...args, serialized: action(\'serialized\') },\\n})"},{"name":"SmartRoutingDiagramTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"Story<SmartRoutingExampleStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: SmartRoutingExampleStoryComponent,\\n  props: args,\\n})"}],"libs/ngx-diagrams/stories/label/label.stories.ts":[{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"","defaultValue":"CustomLinkTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"","defaultValue":"DefaultLinkTemplate.bind({})"}],"libs/ngx-diagrams/stories/link/link.stories.ts":[{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"","defaultValue":"CustomLinkTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"","defaultValue":"DefaultLinkTemplate.bind({})"}],"libs/ngx-diagrams/stories/node/node.stories.ts":[{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"","defaultValue":"CustomNodeTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"","defaultValue":"DefaultNodeTemplate.bind({})"}],"libs/ngx-diagrams/stories/port/port.stories.ts":[{"name":"Custom","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"","defaultValue":"CustomNodeTemplate.bind({})"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"","defaultValue":"DefaultNodeTemplate.bind({})"}],"libs/ngx-diagrams/stories/label/label.template.ts":[{"name":"CustomLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.template.ts","type":"Story<CustomLabelDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomLabelDiagramComponent,\\n  props: args,\\n})"},{"name":"DefaultLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/label/label.template.ts","type":"Story<DefaultLabelStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultLabelStoryComponent,\\n  props: args,\\n})"}],"libs/ngx-diagrams/stories/link/link.template.ts":[{"name":"CustomLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.template.ts","type":"Story<CustomLinkDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomLinkDiagramComponent,\\n  props: args,\\n})"},{"name":"DefaultLinkTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/link/link.template.ts","type":"Story<DefaultLinkStoryComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultLinkStoryComponent,\\n  props: args,\\n})"}],"libs/ngx-diagrams/stories/node/node.template.ts":[{"name":"CustomNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.template.ts","type":"Story<CustomNodeDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomNodeDiagramComponent,\\n  props: args,\\n})"},{"name":"DefaultNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/node/node.template.ts","type":"Story<DefaultNodeComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultNodeComponent,\\n  props: args,\\n})"}],"libs/ngx-diagrams/stories/port/port.template.ts":[{"name":"CustomNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.template.ts","type":"Story<CustomPortDiagramComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: CustomPortDiagramComponent,\\n  props: args,\\n})"},{"name":"DefaultNodeTemplate","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/stories/port/port.template.ts","type":"Story<DefaultPortComponent>","defaultValue":"(\\n  args: any\\n) => ({\\n  component: DefaultPortComponent,\\n  props: args,\\n})"}],"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts":[{"name":"ROUTING_SCALING_FACTOR","ctype":"miscellaneous","subtype":"variable","file":"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts","type":"number","defaultValue":"10"}]},"groupedFunctions":{"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts":[{"name":"arrayToMap","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"HashMap<T>","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"coerceArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"}],"returnType":"T[]","jsdoctags":[{"name":"value","tagName":{"text":"param"}}]},{"name":"enableDiagramProdMode","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[],"returnType":"void"},{"name":"entityProperty","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>rxjs entity properties operator</p>\\n","args":[{"name":"destroyedNotifier"},{"name":"replayBy","type":"number"},{"name":"logMessage","type":"string"}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":"destroyedNotifier","tagName":{"text":"param"}},{"name":"replayBy","type":"number","tagName":{"text":"param"}},{"name":"logMessage","type":"string","tagName":{"text":"param"}}]},{"name":"generateCurvePath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"firstPoint"},{"name":"lastPoint"},{"name":"curvy","type":"number"}],"returnType":"string","jsdoctags":[{"name":"firstPoint","tagName":{"text":"param"}},{"name":"lastPoint","tagName":{"text":"param"}},{"name":"curvy","type":"number","tagName":{"text":"param"}}]},{"name":"generateDynamicPath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"pathCoords"}],"jsdoctags":[{"name":"pathCoords","tagName":{"text":"param"}}]},{"name":"generateLinePath","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"firstPoint","type":"any"},{"name":"lastPoint","type":"any"}],"returnType":"string","jsdoctags":[{"name":"firstPoint","type":"any","tagName":{"text":"param"}},{"name":"lastPoint","type":"any","tagName":{"text":"param"}}]},{"name":"isArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"T[]","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"isDev","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[],"returnType":"boolean"},{"name":"isEmptyArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"boolean","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"isFunction","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"function","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"isNil","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"v","type":"any"}],"jsdoctags":[{"name":"v","type":"any","tagName":{"text":"param"}}]},{"name":"isString","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"val","type":"any"}],"returnType":"string","jsdoctags":[{"name":"val","type":"any","tagName":{"text":"param"}}]},{"name":"log","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"message"},{"name":"level"},{"name":"args","dotDotDotToken":true}],"returnType":"void","jsdoctags":[{"name":"message","tagName":{"text":"param"}},{"name":"level","tagName":{"text":"param"}},{"name":"args","dotDotDotToken":true,"tagName":{"text":"param"}}]},{"name":"mapToArray","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"map"}],"returnType":"T[]","jsdoctags":[{"name":"map","tagName":{"text":"param"}}]},{"name":"mapToEntries","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"map"}],"returnType":"Entries<T>","jsdoctags":[{"name":"map","tagName":{"text":"param"}}]},{"name":"setLogLevel","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"level"}],"returnType":"void","jsdoctags":[{"name":"level","tagName":{"text":"param"}}]},{"name":"UID","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>Generates a unique ID</p>\\n","args":[],"returnType":"ID"},{"name":"unique","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"arr"}],"returnType":"T[]","jsdoctags":[{"name":"arr","tagName":{"text":"param"}}]},{"name":"withLog","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","ctype":"miscellaneous","subtype":"function","description":"<p>rxjs log operator</p>\\n","args":[{"name":"message"},{"name":"level"},{"name":"args","type":"any","dotDotDotToken":true}],"jsdoctags":[{"name":"message","tagName":{"text":"param"}},{"name":"level","tagName":{"text":"param"}},{"name":"args","type":"any","dotDotDotToken":true,"tagName":{"text":"param"}}]}],"libs/ngx-diagrams/src/lib/state/state.ts":[{"name":"createEntityState","file":"libs/ngx-diagrams/src/lib/state/state.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"},{"name":"entityPipe"}],"returnType":"EntityState<T>","jsdoctags":[{"name":"value","tagName":{"text":"param"}},{"name":"entityPipe","tagName":{"text":"param"}}]},{"name":"createValueState","file":"libs/ngx-diagrams/src/lib/state/state.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"value"},{"name":"operator","optional":true}],"returnType":"ValueState<T>","jsdoctags":[{"name":"value","tagName":{"text":"param"}},{"name":"operator","optional":true,"tagName":{"text":"param"}}]}],"libs/ngx-diagrams/src/lib/utils/decorators.ts":[{"name":"OutsideZone","file":"libs/ngx-diagrams/src/lib/utils/decorators.ts","ctype":"miscellaneous","subtype":"function","description":"","args":[{"name":"targetClass"},{"name":"functionName"},{"name":"descriptor","type":""}],"jsdoctags":[{"name":"targetClass","tagName":{"text":"param"}},{"name":"functionName","tagName":{"text":"param"}},{"name":"descriptor","type":"","tagName":{"text":"param"}}]}]},"groupedEnumerations":{"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts":[{"name":"LOG_LEVEL","childs":[{"name":"LOG"},{"name":"ERROR"}],"ctype":"miscellaneous","subtype":"enum","description":"","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts"}]},"groupedTypeAliases":{"libs/ngx-diagrams/src/lib/base.entity.ts":[{"name":"BaseEntityType","ctype":"miscellaneous","subtype":"typealias","rawtype":"\\"node\\" | \\"link\\" | \\"port\\" | \\"point\\"","file":"libs/ngx-diagrams/src/lib/base.entity.ts","description":"","kind":168}],"libs/ngx-diagrams/src/lib/utils/types.ts":[{"name":"EntityMap","ctype":"miscellaneous","subtype":"typealias","rawtype":"Map<ID | T>","file":"libs/ngx-diagrams/src/lib/utils/types.ts","description":"","kind":161},{"name":"Entries","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"libs/ngx-diagrams/src/lib/utils/types.ts","description":"","kind":172}],"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts":[{"name":"ID","ctype":"miscellaneous","subtype":"typealias","rawtype":"string","file":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","description":"","kind":137}]}},"routes":[],"coverage":{"count":3,"status":"low","files":[{"filePath":"libs/ngx-diagrams/src/lib/actions/base.action.ts","type":"class","linktype":"classe","name":"BaseAction","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts","type":"class","linktype":"classe","name":"InvalidLinkDestroyed","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/links-created.action.ts","type":"class","linktype":"classe","name":"LinkCreatedAction","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts","type":"class","linktype":"classe","name":"LooseLinkDestroyed","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/move-canvas.action.ts","type":"class","linktype":"classe","name":"MoveCanvasAction","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/move-items.action.ts","type":"class","linktype":"classe","name":"MoveItemsAction","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/actions/selecting.action.ts","type":"class","linktype":"classe","name":"SelectingAction","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/base.entity.ts","type":"class","linktype":"classe","name":"BaseEntity","coveragePercent":0,"coverageCount":"0/17","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts","type":"component","linktype":"component","name":"NgxDiagramComponent","coveragePercent":7,"coverageCount":"3/42","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts","type":"component","linktype":"component","name":"DefaultLabelComponent","coveragePercent":0,"coverageCount":"0/52","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts","type":"component","linktype":"component","name":"DefaultLinkComponent","coveragePercent":0,"coverageCount":"0/95","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts","type":"component","linktype":"component","name":"DefaultNodeComponent","coveragePercent":1,"coverageCount":"1/83","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts","type":"component","linktype":"component","name":"DefaultPortComponent","coveragePercent":0,"coverageCount":"0/84","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts","type":"class","linktype":"classe","name":"DefaultLabelFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts","type":"class","linktype":"classe","name":"DefaultLinkFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts","type":"class","linktype":"classe","name":"DefaultNodeFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts","type":"class","linktype":"classe","name":"DefaultPortFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/models/default-label.model.ts","type":"class","linktype":"classe","name":"DefaultLabelModel","coveragePercent":0,"coverageCount":"0/118","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/models/default-link.model.ts","type":"class","linktype":"classe","name":"DefaultLinkModel","coveragePercent":0,"coverageCount":"0/151","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/models/default-node.model.ts","type":"class","linktype":"classe","name":"DefaultNodeModel","coveragePercent":0,"coverageCount":"1/146","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts","type":"class","linktype":"classe","name":"DefaultPortModel","coveragePercent":0,"coverageCount":"0/150","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/defaults/models/default-port.model.ts","type":"interface","linktype":"interface","name":"DefaultPortModelConfig","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/factories/base.factory.ts","type":"class","linktype":"classe","name":"AbstractFactory","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/factories/label.factory.ts","type":"class","linktype":"classe","name":"AbstractLabelFactory","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/factories/link.factory.ts","type":"class","linktype":"classe","name":"AbstractLinkFactory","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/factories/node.factory.ts","type":"class","linktype":"classe","name":"AbstractNodeFactory","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/factories/port.factory.ts","type":"class","linktype":"classe","name":"AbstractPortFactory","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/coords.interface.ts","type":"interface","linktype":"interface","name":"Coords","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts","type":"interface","linktype":"interface","name":"Dimensions","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","linktype":"classe","name":"BaseEvent","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","linktype":"classe","name":"LockEvent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","linktype":"classe","name":"PaintedEvent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","linktype":"classe","name":"ParentChangeEvent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/event.interface.ts","type":"class","linktype":"classe","name":"SelectionEvent","coveragePercent":0,"coverageCount":"0/9","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/select-options.interface.ts","type":"interface","linktype":"interface","name":"SelectOptions","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedBaseModel","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedDiagramModel","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedLabelModel","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedLinkModel","coveragePercent":0,"coverageCount":"0/8","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedNodeModel","coveragePercent":0,"coverageCount":"0/11","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedPointModel","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/interfaces/serialization.interface.ts","type":"interface","linktype":"interface","name":"SerializedPortModel","coveragePercent":0,"coverageCount":"0/11","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/base.model.ts","type":"class","linktype":"classe","name":"BaseModel","coveragePercent":0,"coverageCount":"0/38","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/diagram.model.ts","type":"class","linktype":"classe","name":"DiagramModel","coveragePercent":9,"coverageCount":"6/62","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/label.model.ts","type":"class","linktype":"classe","name":"LabelModel","coveragePercent":0,"coverageCount":"0/63","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/link.model.ts","type":"class","linktype":"classe","name":"LinkModel","coveragePercent":0,"coverageCount":"0/92","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/move-selection.model.ts","type":"interface","linktype":"interface","name":"SelectionModel","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/node.model.ts","type":"class","linktype":"classe","name":"NodeModel","coveragePercent":1,"coverageCount":"1/89","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/point.model.ts","type":"class","linktype":"classe","name":"PointModel","coveragePercent":0,"coverageCount":"0/63","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/models/port.model.ts","type":"class","linktype":"classe","name":"PortModel","coveragePercent":0,"coverageCount":"0/93","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts","type":"injectable","linktype":"injectable","name":"DagreEngine","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts","type":"interface","linktype":"interface","name":"DagreEngineOptions","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts","type":"class","linktype":"classe","name":"PathFinding","coveragePercent":50,"coverageCount":"3/6","status":"medium"},{"filePath":"libs/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ROUTING_SCALING_FACTOR","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/services/engine.service.ts","type":"injectable","linktype":"injectable","name":"DiagramEngine","coveragePercent":14,"coverageCount":"9/61","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/state/state.ts","type":"class","linktype":"classe","name":"EntityState","coveragePercent":0,"coverageCount":"0/23","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/state/state.ts","type":"class","linktype":"classe","name":"ValueState","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/state/state.ts","type":"function","linksubtype":"function","name":"createEntityState","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/state/state.ts","type":"function","linksubtype":"function","name":"createValueState","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/decorators.ts","type":"interface","linktype":"interface","name":"ZonedClass","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/decorators.ts","type":"function","linksubtype":"function","name":"OutsideZone","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/template-var.directive.ts","type":"directive","linktype":"directive","name":"TemplateVarDirective","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/template-var.directive.ts","type":"class","linktype":"classe","name":"TemplateVarContext","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"arrayToMap","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"coerceArray","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"enableDiagramProdMode","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"entityProperty","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"generateCurvePath","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"generateDynamicPath","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"generateLinePath","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isArray","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isDev","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isEmptyArray","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isFunction","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isNil","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"isString","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"log","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"mapToArray","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"mapToEntries","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"setLogLevel","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"UID","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"unique","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"function","linksubtype":"function","name":"withLog","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"__DEV__","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/tool-kit.util.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"__LOG__","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/src/lib/utils/types.ts","type":"interface","linktype":"interface","name":"HashMap","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/auto-arrange/auto-arrange.component.ts","type":"component","linktype":"component","name":"AutoArrangeExampleStoryComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/basic/basic.component.ts","type":"component","linktype":"component","name":"BasicExampleStoryComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AutoArrange","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Basic","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Performance","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Serialization","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SmartRouting","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"AutoArrangeDiagramTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"BasicDiagramTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"PerformanceDiagramTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SerializationDiagramTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/examples.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"SmartRoutingDiagramTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/performance/performance.component.ts","type":"component","linktype":"component","name":"PerformanceExampleStoryComponent","coveragePercent":0,"coverageCount":"0/14","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/serialization/serialization.component.ts","type":"component","linktype":"component","name":"SerializationExampleStoryComponent","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"libs/ngx-diagrams/stories/examples/smart-routing/smart-routing.component.ts","type":"component","linktype":"component","name":"SmartRoutingExampleStoryComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/custom/custom-label.component.ts","type":"component","linktype":"component","name":"CustomLabelComponent","coveragePercent":0,"coverageCount":"0/52","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/custom/custom.factory.ts","type":"class","linktype":"classe","name":"CustomLabelFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/custom/diagram.component.ts","type":"component","linktype":"component","name":"CustomLabelDiagramComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/default/default.component.ts","type":"component","linktype":"component","name":"DefaultLabelStoryComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Custom","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/label.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/label.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomLinkTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/label/label.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DefaultLinkTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/custom/custom-link.component.ts","type":"component","linktype":"component","name":"CustomLinkComponent","coveragePercent":0,"coverageCount":"0/92","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/custom/custom.factory.ts","type":"class","linktype":"classe","name":"CustomLinkFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/custom/diagram.component.ts","type":"component","linktype":"component","name":"CustomLinkDiagramComponent","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/default/default.component.ts","type":"component","linktype":"component","name":"DefaultLinkStoryComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Custom","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/link.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/link.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomLinkTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/link/link.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DefaultLinkTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/custom/custom.component.ts","type":"component","linktype":"component","name":"CustomNodeComponent","coveragePercent":1,"coverageCount":"1/86","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/custom/custom.factory.ts","type":"class","linktype":"classe","name":"CustomNodeFactory","coveragePercent":0,"coverageCount":"0/10","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/custom/diagram.component.ts","type":"component","linktype":"component","name":"CustomNodeDiagramComponent","coveragePercent":0,"coverageCount":"0/7","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/default/default.component.ts","type":"component","linktype":"component","name":"DefaultNodeComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Custom","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/node.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/node.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomNodeTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/node/node.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DefaultNodeTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/custom/custom.component.ts","type":"component","linktype":"component","name":"CustomPortComponent","coveragePercent":0,"coverageCount":"0/85","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/custom/custom.factory.ts","type":"class","linktype":"classe","name":"CustomPortFactory","coveragePercent":0,"coverageCount":"0/11","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/custom/diagram.component.ts","type":"component","linktype":"component","name":"CustomPortDiagramComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/default/default.component.ts","type":"component","linktype":"component","name":"DefaultPortComponent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Custom","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/port.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/port.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"CustomNodeTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"libs/ngx-diagrams/stories/port/port.template.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"DefaultNodeTemplate","coveragePercent":0,"coverageCount":"0/1","status":"low"}]}}')},641:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/code-brackets.2e1112d7.svg"},642:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/colors.a4bd0486.svg"},643:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/comments.a3859089.svg"},644:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/flow.edad2ac1.svg"},645:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/plugin.d494b228.svg"},646:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/stackalt.dba9fbb3.svg"},650:function(module,exports,__webpack_require__){__webpack_require__(651),__webpack_require__(812),__webpack_require__(813),__webpack_require__(985),__webpack_require__(1191),__webpack_require__(1193),__webpack_require__(1198),__webpack_require__(1210),__webpack_require__(1212),__webpack_require__(1217),__webpack_require__(1219),module.exports=__webpack_require__(1224)},722:function(module,exports){},813:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(99)}},[[650,1,2]]]);
//# sourceMappingURL=main.549564fb2a4af0028078.bundle.js.map