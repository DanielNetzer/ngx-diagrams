{"version":3,"file":"main.e566bc52972815240653.bundle.js","sources":["webpack:///./projects/ngx-diagrams/src/lib/models/diagram.model.ts"],"sourcesContent":["import { BehaviorSubject, Observable } from 'rxjs';\nimport { NodeModel } from './node.model';\nimport { LinkModel } from './link.model';\nimport { BaseEntity, BaseEntityType } from '../base.entity';\nimport { DiagramEngine } from '../services/engine.service';\nimport { BaseModel } from './base.model';\nimport { uniq, flatMap } from 'lodash';\nimport { PortModel } from './port.model';\nimport { PointModel } from './point.model';\nimport { Coords } from '../interfaces/coords.interface';\nimport { ID } from '../utils/tool-kit.util';\n\nexport class DiagramModel extends BaseEntity {\n\tlinks$: BehaviorSubject<{ [s: string]: LinkModel }>;\n\tnodes$: BehaviorSubject<{ [s: string]: NodeModel }>;\n\tzoom$: BehaviorSubject<number>;\n\toffsetX$: BehaviorSubject<number>;\n\toffsetY$: BehaviorSubject<number>;\n\tgridSize$: BehaviorSubject<number>;\n\n\tconstructor(private diagramEngine: DiagramEngine, id?: string) {\n\t\tsuper(id);\n\t\tthis.nodes$ = new BehaviorSubject<{ [s: string]: NodeModel }>({});\n\t\tthis.links$ = new BehaviorSubject<{ [s: string]: LinkModel }>({});\n\t\tthis.zoom$ = new BehaviorSubject(100);\n\t\tthis.offsetX$ = new BehaviorSubject(0);\n\t\tthis.offsetY$ = new BehaviorSubject(0);\n\t\tthis.gridSize$ = new BehaviorSubject(0);\n\t}\n\n\t// TODO: support the following events for links and nodes\n\t// removed, updated<positionChanged/dataChanged>, added\n\n\tgetNodes(): { [s: string]: NodeModel } {\n\t\treturn this.nodes$.getValue();\n\t}\n\n\tgetNode(id: ID): NodeModel | null {\n\t\treturn this.nodes$.getValue()[id];\n\t}\n\n\tgetLink(id: ID): LinkModel | null {\n\t\treturn this.links$.getValue()[id];\n\t}\n\n\tgetLinks(): { [s: string]: LinkModel } {\n\t\treturn this.links$.getValue();\n\t}\n\n\t/**\n\t * Add a node to the diagram\n\t * @returns Inserted Node\n\t */\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.nodes$.next({ ...this.nodes$.value, [node.id]: node });\n\t\treturn node;\n\t}\n\n\t/**\n\t * Delete a node from the diagram\n\t */\n\tdeleteNode(nodeOrId: NodeModel | string): void {\n\t\tconst nodeID: ID = typeof nodeOrId === 'string' ? nodeOrId : nodeOrId.id;\n\n\t\t// TODO: delete all related links\n\t\tconst updNodes = { ...this.nodes$.value };\n\t\tdelete updNodes[nodeID];\n\t\tthis.nodes$.next(updNodes);\n\t}\n\n\t/**\n\t * Get nodes behaviour subject, use `.getValue()` for snapshot\n\t */\n\tselectNodes(): Observable<{ [s: string]: NodeModel }> {\n\t\treturn this.nodes$.asObservable();\n\t}\n\n\t/**\n\t * Add link\n\t * @returns Newly created link\n\t */\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.links$.next({ ...this.links$.value, [link.id]: link });\n\t\treturn link;\n\t}\n\n\t/**\n\t * Delete link\n\t */\n\tdeleteLink(linkOrId: LinkModel | string) {\n\t\tconst linkID: ID = typeof linkOrId === 'string' ? linkOrId : linkOrId.id;\n\n\t\tconst updLinks = { ...this.links$.value };\n\t\tdelete updLinks[linkID];\n\n\t\tthis.links$.next(updLinks);\n\t}\n\n\t/**\n\t * Get links behaviour subject, use `.getValue()` for snapshot\n\t */\n\tselectLinks(): Observable<{ [s: string]: LinkModel }> {\n\t\treturn this.links$.asObservable();\n\t}\n\n\t/**\n\t * Serialize the diagram model\n\t * @returns diagram model as a string\n\t */\n\t// serialize(): string {\n\t// \treturn JSON.stringify(this.model);\n\t// }\n\n\t/**\n\t * Load into the diagram model a serialized diagram\n\t */\n\t// deserialize(serializedModel: string) {\n\t// \tthis.model = JSON.parse(serializedModel);\n\t// }\n\n\tsetOffset(x: number, y: number) {\n\t\tthis.offsetX$.next(x);\n\t\tthis.offsetY$.next(y);\n\t}\n\n\tsetOffsetX(x: number) {\n\t\tthis.offsetX$.next(x);\n\t}\n\n\tgetOffsetX(): number {\n\t\treturn this.offsetX$.getValue();\n\t}\n\n\tselectOffsetX(): Observable<number> {\n\t\treturn this.offsetX$.asObservable();\n\t}\n\n\tsetOffsetY(y: number) {\n\t\tthis.offsetY$.next(y);\n\t}\n\n\tgetOffsetY(): number {\n\t\treturn this.offsetY$.getValue();\n\t}\n\n\tselectOffsetY(): Observable<number> {\n\t\treturn this.offsetY$.asObservable();\n\t}\n\n\tsetZoomLevel(z: number) {\n\t\tthis.zoom$.next(z);\n\t}\n\n\tgetZoomLevel(): number {\n\t\treturn this.zoom$.getValue();\n\t}\n\n\tselectZoomLevel(): Observable<number> {\n\t\treturn this.zoom$.asObservable();\n\t}\n\n\tgetDiagramEngine(): DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n\n\tclearSelection(ignore: BaseModel | null = null) {\n\t\tthis.getSelectedItems().forEach(element => {\n\t\t\tif (ignore && ignore.id === element.id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telement.setSelected(false);\n\t\t});\n\t}\n\n\tgetGridPosition({ x, y }: Coords): Coords {\n\t\tconst gridSize = this.gridSize$.getValue();\n\t\tif (gridSize === 0) {\n\t\t\treturn { x, y };\n\t\t}\n\t\treturn {\n\t\t\tx: gridSize * Math.floor((x + gridSize / 2) / gridSize),\n\t\t\ty: gridSize * Math.floor((y + gridSize / 2) / gridSize)\n\t\t};\n\t}\n\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel[] {\n\t\tif (!Array.isArray(filters)) {\n\t\t\tfilters = [filters];\n\t\t}\n\t\tlet items = [];\n\n\t\t// run through nodes\n\t\titems = items.concat(\n\t\t\tflatMap(this.nodes$.getValue(), node => {\n\t\t\t\treturn node.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t// find all the links\n\t\titems = items.concat(\n\t\t\tflatMap(this.links$.getValue(), link => {\n\t\t\t\treturn link.getSelectedEntities();\n\t\t\t})\n\t\t);\n\n\t\t// find all points\n\t\titems = items.concat(\n\t\t\tflatMap(this.links$.getValue(), link => {\n\t\t\t\treturn flatMap(link.getPoints(), point => {\n\t\t\t\t\treturn point.getSelectedEntities();\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\titems = uniq(items);\n\n\t\tif (filters.length > 0) {\n\t\t\titems = uniq(items).filter((item: BaseModel) => {\n\t\t\t\tif (filters.includes('node') && item instanceof NodeModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('link') && item instanceof LinkModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('port') && item instanceof PortModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('point') && item instanceof PointModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}\n\n\taddAll(...models: BaseModel[]) {\n\t\tmodels.forEach(model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n}\n"],"mappings":"AAYA","sourceRoot":""}