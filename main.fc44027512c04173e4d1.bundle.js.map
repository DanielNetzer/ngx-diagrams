{"version":3,"file":"main.fc44027512c04173e4d1.bundle.js","sources":["webpack:///./projects/ngx-diagrams/src/lib/models/diagram.model.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\nimport { NodeModel } from './node.model';\nimport { LinkModel } from './link.model';\nimport { BaseEntity } from '../base.entity';\nimport { DiagramEngine } from '../services/engine.service';\nimport { BaseModel } from './base.model';\n\nexport class DiagramModel extends BaseEntity {\n\tlinks$: BehaviorSubject<{ [s: string]: LinkModel }>;\n\tnodes$: BehaviorSubject<{ [s: string]: NodeModel }>;\n\tzoom$: BehaviorSubject<number>;\n\toffsetX$: BehaviorSubject<number>;\n\toffsetY$: BehaviorSubject<number>;\n\tgridSize$: BehaviorSubject<number>;\n\n\tconstructor(private diagramEngine: DiagramEngine, id?: string) {\n\t\tsuper(id);\n\t\tthis.nodes$ = new BehaviorSubject<{ [s: string]: NodeModel }>({});\n\t\tthis.links$ = new BehaviorSubject<{ [s: string]: LinkModel }>({});\n\t\tthis.zoom$ = new BehaviorSubject(100);\n\t\tthis.offsetX$ = new BehaviorSubject(0);\n\t\tthis.offsetY$ = new BehaviorSubject(0);\n\t\tthis.gridSize$ = new BehaviorSubject(0);\n\t}\n\n\t// TODO: support the following events for links and nodes\n\t// removed, updated<positionChanged/dataChanged>, added\n\n\tgetNode(id: string): NodeModel | null {\n\t\treturn this.nodes$.getValue()[id];\n\t}\n\n\tgetLink(id: string): LinkModel | null {\n\t\treturn this.links$.getValue()[id];\n\t}\n\n\t/**\n\t * Add a node to the diagram\n\t * @returns Inserted Node\n\t */\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis.nodes$.next({ ...this.nodes$.value, [node.id]: node });\n\t\treturn node;\n\t}\n\n\t/**\n\t * Delete a node from the diagram\n\t */\n\tdeleteNode(nodeOrId: NodeModel | string): void {\n\t\tconst nodeId: string = typeof nodeOrId === 'string' ? nodeOrId : nodeOrId.id;\n\n\t\t// TODO: delete all related links\n\t\tconst updNodes = { ...this.nodes$.value };\n\t\tdelete updNodes[nodeId];\n\t\tthis.nodes$.next(updNodes);\n\t}\n\n\t/**\n\t * Get nodes behaviour subject, use `.getValue()` for snapshot\n\t */\n\tselectNodes(): BehaviorSubject<{ [s: string]: NodeModel }> {\n\t\treturn this.nodes$;\n\t}\n\n\t/**\n\t * Add link\n\t * @returns Newly created link\n\t */\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis.links$.next({ ...this.links$.value, [link.id]: link });\n\t\treturn link;\n\t}\n\n\t/**\n\t * Delete link\n\t */\n\tdeleteLink(linkOrId: LinkModel | string) {\n\t\tconst linkId: string = typeof linkOrId === 'string' ? linkOrId : linkOrId.id;\n\n\t\tconst updLinks = { ...this.links$.value };\n\t\tdelete updLinks[linkId];\n\n\t\tthis.links$.next(updLinks);\n\t}\n\n\t/**\n\t * Get links behaviour subject, use `.getValue()` for snapshot\n\t */\n\tselectLinks(): BehaviorSubject<{ [s: string]: LinkModel }> {\n\t\treturn this.links$;\n\t}\n\n\t/**\n\t * Serialize the diagram model\n\t * @returns diagram model as a string\n\t */\n\t// serialize(): string {\n\t// \treturn JSON.stringify(this.model);\n\t// }\n\n\t/**\n\t * Load into the diagram model a serialized diagram\n\t */\n\t// deserialize(serializedModel: string) {\n\t// \tthis.model = JSON.parse(serializedModel);\n\t// }\n\n\tsetOffset(x: number, y: number) {\n\t\tthis.offsetX$.next(x);\n\t\tthis.offsetY$.next(y);\n\t}\n\n\tsetOffsetX(x: number) {\n\t\tthis.offsetX$.next(x);\n\t}\n\n\tgetOffsetX(): BehaviorSubject<number> {\n\t\treturn this.offsetX$;\n\t}\n\n\tsetOffsetY(y: number) {\n\t\tthis.offsetY$.next(y);\n\t}\n\n\tgetOffsetY(): BehaviorSubject<number> {\n\t\treturn this.offsetY$;\n\t}\n\n\tsetZoomLevel(z: number) {\n\t\tthis.zoom$.next(z);\n\t}\n\n\tgetZoomLevel(): BehaviorSubject<number> {\n\t\treturn this.zoom$;\n\t}\n\n\tgetDiagramEngine(): DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n\n\taddAll(...models: BaseModel[]) {\n\t\tmodels.forEach(model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n}\n"],"mappings":"AAOA","sourceRoot":""}