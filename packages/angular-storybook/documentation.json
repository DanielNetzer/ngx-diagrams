{
    "pipes": [],
    "interfaces": [
        {
            "name": "ComponentProviderOptions",
            "id": "interface-ComponentProviderOptions-d7bad6d793232d2ac9babc69432192ad",
            "file": "packages/angular/src/lib/injection.tokens.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken, Type } from '@angular/core';\nimport { BaseEntityType, BaseModel, EngineSetup } from '@rxzu/core';\n\nexport const MODEL: InjectionToken<BaseModel> = new InjectionToken('MODEL');\n\nexport interface ComponentProviderOptions<T = any> {\n  component: Type<T>;\n  type: BaseEntityType;\n  name?: string;\n}\n\nexport const COMPONENT: InjectionToken<Omit<ComponentProviderOptions, 'type'>> = new InjectionToken('COMPONENT');\n\nexport const DIAGRAM_DEFAULT_OPTIONS: InjectionToken<EngineSetup> = new InjectionToken('DIAGRAM_DEFAULT_OPTIONS', {\n  providedIn: 'root',\n  factory: function() {\n    return {\n      allowCanvasZoom: true,\n      allowCanvasTranslation: true,\n      inverseZoom: true,\n      allowLooseLinks: true,\n      maxZoomOut: 0,\n      maxZoomIn: 0,\n      portMagneticRadius: 30\n    } as EngineSetup\n  }\n})\n",
            "properties": [
                {
                    "name": "component",
                    "type": "Type<T>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "BaseEntityType",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ZonedClass",
            "id": "interface-ZonedClass-e25d4af36bea6b7cde4b97b6a6b47e3a",
            "file": "packages/angular/src/lib/utils/decorators.ts",
            "type": "interface",
            "sourceCode": "import { NgZone } from '@angular/core';\n\nexport interface ZonedClass {\n  ngZone: NgZone;\n}\n\nexport function OutsideZone<T extends ZonedClass>(\n  targetClass: T,\n  functionName: string,\n  descriptor: any\n) {\n  const source = descriptor.value;\n  descriptor.value = function (...data: any[]) {\n    if (!this.ngZone) {\n      throw new Error(\n        \"Class with 'OutsideZone' decorator should have 'ngZone' class property with 'NgZone' class.\"\n      );\n    }\n    return this.ngZone.runOutsideAngular(() => source.call(this, ...data));\n  };\n  return descriptor;\n}\n",
            "properties": [
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "EngineService",
            "id": "injectable-EngineService-262d550fef97c74d2f0b74412de3b074",
            "file": "packages/angular/src/lib/engine.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  Injectable,\n  Renderer2,\n  RendererFactory2\n} from '@angular/core';\nimport { DiagramEngine } from '@rxzu/core';\nimport { FactoryService } from './factory.service';\n\n@Injectable()\nexport class EngineService extends DiagramEngine {\n  protected _renderer: Renderer2;\n\n  constructor(\n    protected resolver: ComponentFactoryResolver,\n    protected rendererFactory: RendererFactory2,\n    protected factory: FactoryService\n  ) {\n    super(factory);\n    this._renderer = this.rendererFactory.createRenderer(null, null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    },
                    {
                        "name": "factory",
                        "type": "FactoryService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "factory",
                        "type": "FactoryService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DiagramEngine",
            "type": "injectable"
        },
        {
            "name": "FactoryService",
            "id": "injectable-FactoryService-1bdb2356f3dd527d2e7df1a05c6c6ac2",
            "file": "packages/angular/src/lib/factory.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolveComponent",
                    "args": [
                        {
                            "type": "WidgetOptions<M | ViewContainerRef>"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<any>",
                    "typeParameters": [
                        "M"
                    ],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "type": "WidgetOptions<M | ViewContainerRef>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\n  ComponentFactoryResolver, ComponentRef,\n  Injectable,\n  Injector, Renderer2,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\nimport { AbstractFactory, BaseModel, toRegistryKey, WidgetOptions } from '@rxzu/core';\nimport { RegistryService } from './registry.service';\nimport { MODEL } from './injection.tokens';\n\n@Injectable()\nexport class FactoryService extends AbstractFactory<Type<any>, ComponentRef<any>> {\n\n  constructor(registry: RegistryService, private cfr: ComponentFactoryResolver, private renderer: Renderer2) {\n    super(registry);\n  }\n\n  resolveComponent<M extends BaseModel>({ model, host, index, diagramModel }: WidgetOptions<M, ViewContainerRef>): ComponentRef<any> {\n    const cmp = this.get(model);\n    if (!cmp) throw new Error(`[RxZu] Couldn't find component for ${toRegistryKey(model.type, model.name)}`);\n\n    const injector = Injector.create({ providers: [{ provide: MODEL, useValue: model }], parent: host.injector });\n    const ref = host.createComponent(this.cfr.resolveComponentFactory(cmp), index, injector);\n\n    this.renderer.setAttribute(ref.location.nativeElement, 'data-type', model.type);\n    this.renderer.setAttribute(ref.location.nativeElement, 'data-id', model.id);\n    this.renderer.setAttribute(ref.location.nativeElement, 'data-parentId', model.getParent()?.id ?? diagramModel?.id);\n    this.renderer.setAttribute(ref.location.nativeElement, 'data-theme', model.name);\n\n    ref.changeDetectorRef.detectChanges();\n\n    model.onEntityDestroy().subscribe(() => ref.destroy());\n\n    return ref;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "registry",
                        "type": "RegistryService"
                    },
                    {
                        "name": "cfr",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "registry",
                        "type": "RegistryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cfr",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractFactory",
            "type": "injectable"
        },
        {
            "name": "RegistryService",
            "id": "injectable-RegistryService-cf7134082905d17d3da0af733605cf4f",
            "file": "packages/angular/src/lib/registry.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Inject, Injectable, Optional, SkipSelf, Type } from '@angular/core';\nimport { AbstractRegistry } from '@rxzu/core';\n\n@Injectable({ providedIn: 'root' })\nexport class RegistryService extends AbstractRegistry<Type<any>> {\n\n  constructor(@Optional() @SkipSelf() @Inject(RegistryService) parent: RegistryService | null) {\n    super(parent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "RegistryService | null"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "parent",
                        "type": "RegistryService | null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AbstractRegistry",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "TemplateVarContext",
            "id": "class-TemplateVarContext-a31c3786aab76309a86889750d089e0b",
            "file": "packages/angular/src/lib/utils/template-var.directive.ts",
            "type": "class",
            "sourceCode": "import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]',\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any> | null = null;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(\n    protected vcRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>\n  ) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "$implicit",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "templateVar",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "TemplateVarDirective",
            "id": "directive-TemplateVarDirective-a31c3786aab76309a86889750d089e0b",
            "file": "packages/angular/src/lib/utils/template-var.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nclass TemplateVarContext {\n  $implicit: any;\n  templateVar: any;\n}\n\n@Directive({\n  selector: '[templateVar]',\n})\nexport class TemplateVarDirective {\n  view: EmbeddedViewRef<any> | null = null;\n\n  protected context = new TemplateVarContext();\n\n  @Input()\n  set templateVar(context: any) {\n    this.context.$implicit = this.context.templateVar = context;\n    this.updateView();\n  }\n\n  constructor(\n    protected vcRef: ViewContainerRef,\n    protected templateRef: TemplateRef<any>\n  ) {}\n\n  updateView() {\n    if (!this.view) {\n      this.vcRef.clear();\n      this.view = this.vcRef.createEmbeddedView(this.templateRef, this.context);\n    } else {\n      this.view.markForCheck();\n    }\n  }\n}\n",
            "selector": "[templateVar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "templateVar",
                    "line": 23,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "new TemplateVarContext()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "view",
                    "defaultValue": "null",
                    "type": "EmbeddedViewRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "vcRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "templateVar": {
                    "name": "templateVar",
                    "setSignature": {
                        "name": "templateVar",
                        "type": "void",
                        "args": [
                            {
                                "name": "context",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "context",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "DefaultLabelComponent",
            "id": "component-DefaultLabelComponent-1e8fc6e7b7da4885f2805aa3d35b7309",
            "file": "packages/angular/src/lib/defaults/components/default-label/default-label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rxzu-default-label",
            "styleUrls": [
                "./default-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "type": "LabelModel",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MODEL"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, Host,\n  Inject,\n  OnInit\n} from '@angular/core';\nimport { LabelModel } from '@rxzu/core';\nimport { MODEL } from '../../../injection.tokens';\n\n@Component({\n  selector: 'rxzu-default-label',\n  templateUrl: './default-label.component.html',\n  styleUrls: ['./default-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLabelComponent implements OnInit {\n  constructor(\n    @Host() @Inject(MODEL) public model: LabelModel,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.model.selectCoords().subscribe(() => {\n      this.cdRef.detectChanges();\n    });\n\n    this.model.setPainted(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n}\n\n.default-label {\n  color: white;\n  user-select: none;\n}\n",
                    "styleUrl": "./default-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "model",
                        "type": "LabelModel"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "model",
                        "type": "LabelModel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"default-label\"\n  [ngStyle]=\"{\n    transform:\n      'translate(' +\n      (model.selectCoords() | async)?.x +\n      'px, ' +\n      (model.selectCoords() | async)?.y +\n      'px)' +\n      'rotate(' +\n      (model.selectRotation() | async) +\n      'deg)'\n  }\"\n>\n  {{ model.selectText() | async }}\n</div>\n"
        },
        {
            "name": "DefaultLinkComponent",
            "id": "component-DefaultLinkComponent-dc74ff8e001bff0e910ed9590e8c13af",
            "file": "packages/angular/src/lib/defaults/components/default-link/default-link.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rxzu-default-link",
            "styleUrls": [
                "./default-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "model",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MODEL"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLabelIncline",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onHover",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "trackByPoints",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, Host,\n  Inject, OnInit,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { PointModel, generateCurvePath, Coords, LinkModel } from '@rxzu/core';\nimport { combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MODEL } from '../../../injection.tokens';\n\n@Component({\n  selector: 'rxzu-default-link',\n  templateUrl: './default-link.component.html',\n  styleUrls: ['./default-link.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultLinkComponent implements OnInit, AfterViewInit {\n  @ViewChild('labelLayer', { read: ViewContainerRef, static: true })\n  labelLayer!: ViewContainerRef;\n\n  constructor(\n    @Host() @Inject(MODEL) public model: LinkModel,\n    private cdRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.model.setPainted(true);\n  }\n\n  trackByPoints(i: number, point: PointModel) {\n    return point.id;\n  }\n\n  onHover() {\n    this.cdRef.detectChanges();\n  }\n\n  ngAfterViewInit() {\n    const firstPCoords$ = this.model.getFirstPoint().selectCoords();\n    const lastPCoords$ = this.model.getLastPoint().selectCoords();\n\n    // Observe link coords and update drawing accordingly\n    combineLatest([firstPCoords$, lastPCoords$])\n      .pipe(takeUntil(this.model.onEntityDestroy()))\n      .subscribe(([firstPCoords, lastPCoords]) => {\n        const points = [firstPCoords, lastPCoords];\n\n        // handle regular links\n        // draw the smoothing\n        // if the points are too close, just draw a straight line\n        const isHorizontal =\n          Math.abs(firstPCoords.x - lastPCoords.x) >\n          Math.abs(firstPCoords.y - lastPCoords.y);\n        const xOrY = isHorizontal ? 'x' : 'y';\n        let isStraight = false;\n        if (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n          isStraight = true;\n        }\n\n        const path = generateCurvePath(\n          firstPCoords,\n          lastPCoords,\n          isStraight ? 0 : 50\n        );\n        this.model.setPath(path);\n\n        const label = this.model.getLabel();\n\n        // update label position\n        if (label) {\n          label.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\n        }\n\n        this.cdRef.detectChanges();\n      });\n  }\n\n  calcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\n    const dy = secondPoint.y - firstPoint.y;\n    const dx = secondPoint.x - firstPoint.x;\n\n    if (dx === 0) {\n      return 0;\n    }\n\n    let inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\n\n    if (inclineAngel < 0) {\n      inclineAngel += 180;\n    }\n\n    return inclineAngel;\n  }\n\n  calcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\n    return {\n      x: (firstPoint.x + secondPoint.x) / 2 + 20,\n      y: (firstPoint.y + secondPoint.y) / 2 + 20,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: absolute;\n}\n\n.link-container {\n  position: relative;\n  fill: none;\n  overflow: visible;\n  pointer-events: all;\n}\n\n.default-link {\n  fill: none;\n  overflow: visible;\n\n  @keyframes dash {\n    from {\n      stroke-dashoffset: 24;\n    }\n    to {\n      stroke-dashoffset: 0;\n    }\n  }\n\n  &.hovered {\n    stroke: rgb(0, 192, 255);\n    stroke-dasharray: 10, 2;\n    animation: dash 1s linear infinite;\n  }\n}\n\n.default-point {\n  color: lightgray;\n  overflow: visible;\n  pointer-events: all;\n\n  &.hovered {\n    color: rgb(0, 192, 255);\n  }\n}\n",
                    "styleUrl": "./default-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "model",
                        "type": "LinkModel"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "model",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"link-container\">\n  <!-- Link -->\n  <g [id]=\"model.id\">\n    <path\n      class=\"default-link\"\n      stroke-width=\"1\"\n      stroke=\"white\"\n      [attr.d]=\"model.selectPath() | async\"\n      (mouseleave)=\"model.setHovered(false); onHover()\"\n      (mouseenter)=\"model.setHovered(); onHover()\"\n      [ngClass]=\"{ hovered: model.selectHovered() | async }\"\n    ></path>\n    <path\n      class=\"default-link\"\n      stroke=\"blue\"\n      stroke-linecap=\"round\"\n      (mouseleave)=\"model.setHovered(false); onHover()\"\n      (mouseenter)=\"model.setHovered(); onHover()\"\n      [attr.stroke-width]=\"20\"\n      [attr.data-type]=\"model.type\"\n      [attr.data-id]=\"model.id\"\n      [attr.stroke-opacity]=\"(model.selectHovered() | async) ? '0.1' : '0'\"\n      [attr.d]=\"model.selectPath() | async\"\n    ></path>\n  </g>\n\n  <!-- Points -->\n  <g\n    *ngFor=\"let point of model.getPoints(); trackBy: trackByPoints\"\n    [id]=\"point.id\"\n  >\n    <circle\n      fill=\"currentColor\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"5\"\n      class=\"default-point\"\n      [ngClass]=\"{ hovered: point.selectHovered() | async }\"\n    />\n    <circle\n      [attr.data-type]=\"point.type\"\n      [attr.data-id]=\"point.id\"\n      [attr.data-parentId]=\"model.id\"\n      (mouseleave)=\"point.setHovered(false); model.setHovered(false)\"\n      (mouseenter)=\"point.setHovered(); model.setHovered()\"\n      [attr.cx]=\"point.selectX() | async\"\n      [attr.cy]=\"point.selectY() | async\"\n      r=\"15\"\n      [attr.opacity]=\"0\"\n      [ngClass]=\"{ selected: point.selectSelected() | async }\"\n    />\n  </g>\n</svg>\n"
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-b1c2d0336dce05d0bcd69c1aec02dd16",
            "file": "packages/angular/src/lib/defaults/components/default-node/default-node.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rxzu-default-node",
            "styleUrls": [
                "./default-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "type": "NodeModel",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MODEL"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "portDiffers",
                    "type": "IterableDiffer<PortModel>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyPortChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "IterableChanges<PortModel> | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "IterableChanges<PortModel> | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortsHost",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "updateNodePosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "updatePorts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef, Host,\n  Inject, IterableChanges, IterableDiffer, IterableDiffers, OnInit,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { NodeModel, PortModel } from '@rxzu/core';\nimport { MODEL } from '../../../injection.tokens';\nimport { filter, mapTo, pluck, switchMap, take, takeUntil, tap } from 'rxjs/operators';\nimport { combineLatest } from 'rxjs';\nimport { RxZuDiagramComponent } from '../../../diagram/diagram.component';\nimport { FactoryService } from '../../../factory.service';\n\n@Component({\n  selector: 'rxzu-default-node',\n  templateUrl: './default-node.component.html',\n  styleUrls: ['./default-node.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultNodeComponent implements OnInit {\n  private portDiffers: IterableDiffer<PortModel>;\n  @ViewChild('portsLayer', { read: ViewContainerRef, static: true })\n  portsLayer!: ViewContainerRef;\n\n  constructor(\n    @Host() @Inject(MODEL) public model: NodeModel,\n    private factory: FactoryService,\n    private diagram: RxZuDiagramComponent,\n    private elRef: ElementRef,\n    private renderer: Renderer2,\n    private iterableDiffers: IterableDiffers\n  ) {\n    this.portDiffers = this.iterableDiffers.find([]).create<PortModel>((index, item) => item.id);\n  }\n\n  ngOnInit() {\n    this.updateNodePosition();\n    this.updatePorts();\n  }\n\n  getPortsHost() {\n    return this.portsLayer;\n  }\n\n  updateNodePosition(): void {\n    // subscribe to node coordinates\n    this.model.selectCoords().pipe(takeUntil(this.model.onEntityDestroy())).subscribe(({ x, y }) => {\n      this.renderer.setStyle(this.elRef.nativeElement, 'left', `${x}px`);\n      this.renderer.setStyle(this.elRef.nativeElement, 'top', `${y}px`);\n    });\n  }\n\n  updatePorts(): void {\n    this.model\n      .selectPorts()\n      .pipe(\n        takeUntil(this.model.onEntityDestroy()),\n        filter(\n          (\n            ports: PortModel[] | null | undefined\n          ): ports is PortModel[] =>\n            ports !== null && ports !== undefined\n        ),\n        tap(ports => this.applyPortChanges(this.portDiffers.diff(ports))),\n        switchMap(ports => combineLatest(ports.map((port) => port.paintChanges().pipe(\n          pluck('isPainted'),\n          filter<boolean>(Boolean),\n          take(1))\n          ))\n        ),\n        filter((val) => val !== null),\n        mapTo(true)\n      ).subscribe(() => !this.model.getPainted().isPainted && this.model.setPainted(true));\n  }\n\n  private applyPortChanges(changes: IterableChanges<PortModel> | null): void {\n    if (changes) {\n      changes.forEachAddedItem(({ item, currentIndex }) => {\n        item.setParent(this.model);\n        this.factory.generateWidget({\n          model: item,\n          host: this.getPortsHost(),\n          index: currentIndex ?? undefined,\n          diagramModel: this.model.getParent()\n        });\n      });\n      changes.forEachMovedItem(({ previousIndex, currentIndex, item }) => {\n        if (previousIndex !== null && currentIndex !== null && previousIndex !== currentIndex) {\n          const view = this.getPortsHost().get(previousIndex);\n          if (view) {\n            this.getPortsHost().move(view, currentIndex);\n            this.model.updatePortCoords(item, this.diagram.diagramEngine);\n          }\n        }\n      });\n      changes.forEachRemovedItem(record => record.item.destroy());\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: absolute;\n}\n\n.default-node {\n  &.selected {\n    background-color: honeydew;\n  }\n\n  &.hovered {\n    background-color: gainsboro;\n  }\n\n  pointer-events: all;\n  width: 100%;\n  border-radius: 10px;\n  user-select: none;\n  cursor: auto;\n  background-color: white;\n}\n\n.ports {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./default-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "model",
                        "type": "NodeModel"
                    },
                    {
                        "name": "factory",
                        "type": "FactoryService"
                    },
                    {
                        "name": "diagram",
                        "type": "RxZuDiagramComponent"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "iterableDiffers",
                        "type": "IterableDiffers"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "model",
                        "type": "NodeModel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "factory",
                        "type": "FactoryService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "diagram",
                        "type": "RxZuDiagramComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "iterableDiffers",
                        "type": "IterableDiffers",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"default-node\"\n  [ngClass]=\"{\n    selected: model.selectSelected() | async,\n    hovered: model.selectHovered() | async\n  }\"\n  [ngStyle]=\"{\n    'height.px': model.selectHeight() | async,\n    'width.px': model.selectWidth() | async\n  }\"\n  (mouseover)=\"model.setHovered()\"\n  (mouseout)=\"model.setHovered(false)\"\n>\n  <div class=\"ports\">\n    <ng-template #portsLayer></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-b316a330cf3fdef57b3344e689f84f45",
            "file": "packages/angular/src/lib/defaults/components/default-port/default-port.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rxzu-default-port",
            "styleUrls": [
                "./default-port.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-port.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MODEL"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Host, Inject, OnInit } from '@angular/core';\nimport { PortModel } from '@rxzu/core';\nimport { MODEL } from '../../../injection.tokens';\n\n@Component({\n  selector: 'rxzu-default-port',\n  templateUrl: './default-port.component.html',\n  styleUrls: ['./default-port.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DefaultPortComponent implements OnInit {\n  constructor(@Host() @Inject(MODEL) public model: PortModel) {}\n\n  ngOnInit() {\n    this.model.setPainted(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  position: relative;\n  width: 10px;\n  height: 10px;\n  border-radius: 60px;\n  border: 1px solid gray;\n  background-color: lightgray;\n  margin: 10px 0;\n}\n",
                    "styleUrl": "./default-port.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "model",
                        "type": "PortModel"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "model",
                        "type": "PortModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div draggable=\"false\"></div>\n"
        },
        {
            "name": "RxZuDiagramComponent",
            "id": "component-RxZuDiagramComponent-5eb94277b50dba329691fb9ff85514ed",
            "file": "packages/angular/src/lib/diagram/diagram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "RxzuDiagram",
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "EngineService"
                },
                {
                    "name": "FactoryService"
                }
            ],
            "selector": "rxzu-diagram",
            "styleUrls": [
                "diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowCanvasTranslation",
                    "defaultValue": "true",
                    "line": 47
                },
                {
                    "name": "allowCanvasZoom",
                    "defaultValue": "true",
                    "line": 45
                },
                {
                    "name": "allowLooseLinks",
                    "defaultValue": "true",
                    "line": 51
                },
                {
                    "name": "inverseZoom",
                    "defaultValue": "true",
                    "line": 49
                },
                {
                    "name": "keyBindings",
                    "defaultValue": "{}",
                    "line": 58
                },
                {
                    "name": "maxZoomIn",
                    "defaultValue": "0",
                    "line": 55
                },
                {
                    "name": "maxZoomOut",
                    "defaultValue": "0",
                    "line": 53
                },
                {
                    "name": "model",
                    "line": 42,
                    "type": "DiagramModel"
                },
                {
                    "name": "name",
                    "description": "<p>The name of the diagram, if not set will be <code>&#39;default&#39;</code> </p>\n",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "options",
                    "line": 43,
                    "type": "Partial<EngineSetup>"
                },
                {
                    "name": "portMagneticRadius",
                    "defaultValue": "30",
                    "line": 57
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvas",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "diagramEngine",
                    "type": "EngineService",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "keyboardManager",
                    "type": "KeyboardManager",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "linksLayer",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linksLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "mouseManager",
                    "type": "MouseManager",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "ngZone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "nodesLayer",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nodesLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "selectionBox$",
                    "type": "Observable<SelectingAction | null>",
                    "optional": true,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "getLinksLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement | null",
                    "typeParameters": [],
                    "line": 244,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "getNodesLayer",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLDivElement | null",
                    "typeParameters": [],
                    "line": 236,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "initSelectionBox",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "initSubs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "onKeyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseMove",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseWheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLayerStyles",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "zoom",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "decorators": [
                        {
                            "name": "OutsideZone"
                        }
                    ],
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "zoom",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomToFit",
                    "args": [
                        {
                            "name": "additionalZoomFactor",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "jsdoctags": [
                        {
                            "name": "additionalZoomFactor",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomToNodes",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "NodeModel[]"
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "defaultValue": "100"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "NodeModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "margin",
                            "type": "number",
                            "defaultValue": "100",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:copy",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 174
                },
                {
                    "name": "window:paste",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 179
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef, OnInit\n} from '@angular/core';\nimport { combineLatest, noop, Observable, of } from 'rxjs';\nimport { map, switchMap, takeUntil, tap } from 'rxjs/operators';\nimport {\n  SelectingAction,\n  MouseManager,\n  DiagramModel,\n  EngineSetup,\n  KeyboardManager, NodeModel\n} from '@rxzu/core';\nimport { ZonedClass, OutsideZone } from '../utils';\nimport { EngineService } from '../engine.service';\nimport { FactoryService } from '../factory.service';\nimport { DIAGRAM_DEFAULT_OPTIONS } from '../injection.tokens';\n\n@Component({\n  selector: 'rxzu-diagram',\n  exportAs: 'RxzuDiagram',\n  templateUrl: 'diagram.component.html',\n  styleUrls: ['diagram.component.scss'],\n  providers: [EngineService, FactoryService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RxZuDiagramComponent\n  implements OnInit, AfterViewInit, OnDestroy, ZonedClass {\n  /** The name of the diagram, if not set will be `'default'` */\n  @Input() name?: string;\n  @Input() model!: DiagramModel;\n  @Input() options?: Partial<EngineSetup>;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() allowCanvasZoom = true;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() allowCanvasTranslation = true;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() inverseZoom = true;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() allowLooseLinks = true;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() maxZoomOut = 0;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() maxZoomIn = 0;\n  /** @deprecated use options instead, will be removed in v4.0.0 */\n  @Input() portMagneticRadius = 30;\n  @Input() keyBindings = {};\n\n  @ViewChild('nodesLayer', { read: ViewContainerRef, static: true })\n  nodesLayer?: ViewContainerRef;\n\n  @ViewChild('linksLayer', { read: ViewContainerRef, static: true })\n  linksLayer?: ViewContainerRef;\n\n  @ViewChild('canvas', { read: ElementRef, static: true })\n  canvas?: ElementRef;\n\n  mouseManager?: MouseManager;\n  keyboardManager?: KeyboardManager;\n  selectionBox$?: Observable<SelectingAction | null>;\n\n  get host(): HTMLElement {\n    return this.elRef.nativeElement;\n  }\n\n  constructor(\n    public readonly diagramEngine: EngineService,\n    public ngZone: NgZone,\n    protected renderer: Renderer2,\n    protected cdRef: ChangeDetectorRef,\n    protected elRef: ElementRef<HTMLElement>,\n    @Inject(DIAGRAM_DEFAULT_OPTIONS) protected defaultOptions: EngineSetup\n  ) {\n    this.mouseManager = this.diagramEngine.getMouseManager();\n    this.keyboardManager = this.diagramEngine.getKeyboardManager();\n  }\n\n  ngOnInit() {\n    this.options = { ...this.defaultOptions, ...this.options };\n    this.model =\n      (this.model && this.diagramEngine.setModel(this.model)) ||\n      this.diagramEngine.createModel({\n        name: this.name || 'default',\n        ...this.options,\n      });\n\n    if (!this.canvas) {\n      return;\n    }\n\n    this.diagramEngine.setCanvas(this.canvas.nativeElement);\n\n    this.diagramEngine.setup({\n      ...this.options,\n      // TODO: remove after deprecated inputs removed\n      ...this,\n    } as EngineSetup);\n\n    this.diagramEngine.paintNodes(this.nodesLayer)\n      .pipe(\n        takeUntil(this.model.onEntityDestroy()),\n        switchMap(() => {\n          if (!this.diagramEngine) {\n            return of(null);\n          }\n\n          return this.diagramEngine.paintLinks(\n            this.linksLayer\n          ) as Observable<void>;\n        })\n      )\n      .subscribe(() => {\n        this.initSubs();\n        this.initSelectionBox();\n        this.cdRef.detectChanges();\n      });\n  }\n\n  ngAfterViewInit() {\n  }\n\n  ngOnDestroy() {\n    if (this.keyboardManager) {\n      this.keyboardManager.dispose();\n    }\n\n    this.model.destroy();\n  }\n\n  initSelectionBox() {\n    if (!this.diagramEngine) {\n      return;\n    }\n\n    this.selectionBox$ = this.diagramEngine.selectAction().pipe(\n      map((a) => {\n        if (\n          a &&\n          a.action &&\n          a.action instanceof SelectingAction &&\n          a.state === 'firing'\n        ) {\n          return a.action as SelectingAction;\n        } else {\n          return null;\n        }\n      }),\n      tap(() => this.cdRef.detectChanges())\n    );\n  }\n\n  @OutsideZone\n  onMouseUp(event: MouseEvent) {\n    this.mouseManager ? this.mouseManager.onMouseUp(event) : noop();\n  }\n\n  @OutsideZone\n  onKeyUp(event: KeyboardEvent) {\n    this.keyboardManager ? this.keyboardManager.onKeyUp(event) : noop();\n  }\n\n  @HostListener('window:copy', ['$event'])\n  onCopy(event: ClipboardEvent) {\n    this.keyboardManager ? this.keyboardManager.onCopy() : noop();\n  }\n\n  @HostListener('window:paste', ['$event'])\n  onPaste(event: ClipboardEvent) {\n    this.keyboardManager ? this.keyboardManager.onPaste() : noop();\n  }\n\n  @OutsideZone\n  onMouseMove(event: MouseEvent) {\n    this.mouseManager ? this.mouseManager.onMouseMove(event) : noop();\n  }\n\n  @OutsideZone\n  onMouseDown(event: MouseEvent) {\n    this.mouseManager ? this.mouseManager.onMouseDown(event) : noop();\n  }\n\n  @OutsideZone\n  onMouseWheel(event: WheelEvent) {\n    this.mouseManager ? this.mouseManager.onMouseWheel(event) : noop();\n  }\n\n  zoomToFit(additionalZoomFactor?: number): void {\n    this.diagramEngine.zoomToFit(additionalZoomFactor);\n  }\n\n  zoomToNodes(nodes: NodeModel[], margin = 100): void {\n    this.diagramEngine.zoomToNodes(nodes, margin);\n  }\n\n  @OutsideZone\n  protected setLayerStyles(x: number, y: number, zoom: number): void {\n    const nodesLayer = this.getNodesLayer();\n    const linksLayer = this.getLinksLayer();\n\n    const style = 'transform';\n    const value = `translate(${x}px, ${y}px) scale(${zoom / 100.0})`;\n\n    this.renderer.setStyle(nodesLayer, style, value);\n    this.renderer.setStyle(linksLayer, style, value);\n  }\n\n  protected initSubs() {\n    const diagramModel = this.diagramEngine?.getDiagramModel();\n    if (!diagramModel) {\n      return;\n    }\n\n    combineLatest([\n      diagramModel.selectOffsetX(),\n      diagramModel.selectOffsetY(),\n      diagramModel.selectZoomLevel(),\n    ])\n      .pipe(\n        takeUntil(this.model.onEntityDestroy()),\n        tap(([x, y, zoom]) => this.setLayerStyles(x, y, zoom))\n      )\n      .subscribe();\n  }\n\n  protected getNodesLayer(): HTMLDivElement | null {\n    if (!this.host) {\n      return null;\n    }\n\n    return this.nodesLayer?.element.nativeElement;\n  }\n\n  protected getLinksLayer(): HTMLDivElement | null {\n    if (!this.host) {\n      return null;\n    }\n\n    return this.linksLayer?.element.nativeElement;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rxzu-diagram {\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  cursor: move;\n  overflow: hidden;\n\n  &:focus {\n    outline: none;\n  }\n\n  .selector {\n    position: absolute;\n    background-color: rgba(0, 192, 255, 0.2);\n    border: solid 2px rgb(0, 192, 255);\n  }\n\n  .rxzu-nodes-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible;\n    pointer-events: none;\n    z-index: 150;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .rxzu-links-layer {\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    transform-origin: 0 0;\n    overflow: visible;\n    pointer-events: none;\n    z-index: 100;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n}\n",
                    "styleUrl": "diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "EngineService"
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "defaultOptions",
                        "type": "EngineSetup"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "EngineService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultOptions",
                        "type": "EngineSetup",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "ZonedClass"
            ],
            "accessors": {
                "host": {
                    "name": "host",
                    "getSignature": {
                        "name": "host",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 73
                    }
                }
            },
            "templateData": "<div\n  class=\"rxzu-diagram\"\n  #canvas\n  (mousedown)=\"onMouseDown($event)\"\n  (wheel)=\"onMouseWheel($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  tabindex=\"1\"\n>\n  <!-- Nodes Layer -->\n  <div class=\"rxzu-nodes-layer\">\n    <ng-template #nodesLayer></ng-template>\n  </div>\n\n  <!-- Links Layer -->\n  <div class=\"rxzu-links-layer\">\n    <ng-template #linksLayer></ng-template>\n  </div>\n\n  <!-- Selection Box -->\n  <div\n    *ngIf=\"selectionBox$ | async as selectionBox\"\n    class=\"selector\"\n    [ngStyle]=\"{\n      top: selectionBox?.dimensions.top + 'px',\n      left: selectionBox?.dimensions.left + 'px',\n      width: selectionBox?.dimensions.width + 'px',\n      height: selectionBox?.dimensions.height + 'px'\n    }\"\n  ></div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "RxZuDefaultsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        },
                        {
                            "name": "DefaultLinkComponent"
                        },
                        {
                            "name": "DefaultNodeComponent"
                        },
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RxZuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        },
                        {
                            "name": "DefaultLinkComponent"
                        },
                        {
                            "name": "DefaultNodeComponent"
                        },
                        {
                            "name": "DefaultPortComponent"
                        },
                        {
                            "name": "RxZuModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RxZuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RxZuDiagramComponent"
                        },
                        {
                            "name": "TemplateVarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RxZuDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COMPONENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/angular/src/lib/injection.tokens.ts",
                "type": "InjectionToken<Omit<ComponentProviderOptions, type>>",
                "defaultValue": "new InjectionToken('COMPONENT')"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/angular/src/lib/defaults/defaults.module.ts",
                "type": "[]",
                "defaultValue": "[DefaultLinkComponent, DefaultLabelComponent, DefaultPortComponent, DefaultNodeComponent]"
            },
            {
                "name": "DEFAULTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/angular/src/lib/defaults/defaults.module.ts",
                "type": "ComponentProviderOptions[]",
                "defaultValue": "[\n  {\n    type: 'node',\n    component: DefaultNodeComponent\n  },\n  {\n    type: 'port',\n    component: DefaultPortComponent\n  }, {\n    type: 'link',\n    component: DefaultLinkComponent\n  },\n  {\n    type: 'label',\n    component: DefaultLabelComponent\n  }\n]"
            },
            {
                "name": "DIAGRAM_DEFAULT_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/angular/src/lib/injection.tokens.ts",
                "type": "InjectionToken<EngineSetup>",
                "defaultValue": "new InjectionToken('DIAGRAM_DEFAULT_OPTIONS', {\n  providedIn: 'root',\n  factory: function() {\n    return {\n      allowCanvasZoom: true,\n      allowCanvasTranslation: true,\n      inverseZoom: true,\n      allowLooseLinks: true,\n      maxZoomOut: 0,\n      maxZoomIn: 0,\n      portMagneticRadius: 30\n    } as EngineSetup\n  }\n})"
            },
            {
                "name": "MODEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "packages/angular/src/lib/injection.tokens.ts",
                "type": "InjectionToken<BaseModel>",
                "defaultValue": "new InjectionToken('MODEL')"
            }
        ],
        "functions": [
            {
                "name": "OutsideZone",
                "file": "packages/angular/src/lib/utils/decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "targetClass"
                    },
                    {
                        "name": "functionName"
                    },
                    {
                        "name": "descriptor",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "targetClass",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "functionName",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "descriptor",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "packages/angular/src/lib/injection.tokens.ts": [
                {
                    "name": "COMPONENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/angular/src/lib/injection.tokens.ts",
                    "type": "InjectionToken<Omit<ComponentProviderOptions, type>>",
                    "defaultValue": "new InjectionToken('COMPONENT')"
                },
                {
                    "name": "DIAGRAM_DEFAULT_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/angular/src/lib/injection.tokens.ts",
                    "type": "InjectionToken<EngineSetup>",
                    "defaultValue": "new InjectionToken('DIAGRAM_DEFAULT_OPTIONS', {\n  providedIn: 'root',\n  factory: function() {\n    return {\n      allowCanvasZoom: true,\n      allowCanvasTranslation: true,\n      inverseZoom: true,\n      allowLooseLinks: true,\n      maxZoomOut: 0,\n      maxZoomIn: 0,\n      portMagneticRadius: 30\n    } as EngineSetup\n  }\n})"
                },
                {
                    "name": "MODEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/angular/src/lib/injection.tokens.ts",
                    "type": "InjectionToken<BaseModel>",
                    "defaultValue": "new InjectionToken('MODEL')"
                }
            ],
            "packages/angular/src/lib/defaults/defaults.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/angular/src/lib/defaults/defaults.module.ts",
                    "type": "[]",
                    "defaultValue": "[DefaultLinkComponent, DefaultLabelComponent, DefaultPortComponent, DefaultNodeComponent]"
                },
                {
                    "name": "DEFAULTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "packages/angular/src/lib/defaults/defaults.module.ts",
                    "type": "ComponentProviderOptions[]",
                    "defaultValue": "[\n  {\n    type: 'node',\n    component: DefaultNodeComponent\n  },\n  {\n    type: 'port',\n    component: DefaultPortComponent\n  }, {\n    type: 'link',\n    component: DefaultLinkComponent\n  },\n  {\n    type: 'label',\n    component: DefaultLabelComponent\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {
            "packages/angular/src/lib/utils/decorators.ts": [
                {
                    "name": "OutsideZone",
                    "file": "packages/angular/src/lib/utils/decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "targetClass"
                        },
                        {
                            "name": "functionName"
                        },
                        {
                            "name": "descriptor",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetClass",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "functionName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "descriptor",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "packages/angular/src/lib/defaults/components/default-label/default-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/defaults/components/default-link/default-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/defaults/components/default-node/default-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/defaults/components/default-port/default-port.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/defaults/defaults.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/defaults/defaults.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/diagram/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RxZuDiagramComponent",
                "coveragePercent": 2,
                "coverageCount": "1/38",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EngineService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FactoryService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/injection.tokens.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ComponentProviderOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/injection.tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/injection.tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIAGRAM_DEFAULT_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/injection.tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/registry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistryService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/utils/decorators.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ZonedClass",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/utils/decorators.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "OutsideZone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/utils/template-var.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TemplateVarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "packages/angular/src/lib/utils/template-var.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TemplateVarContext",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}